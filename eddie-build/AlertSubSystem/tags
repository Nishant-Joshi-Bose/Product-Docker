!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALARM	Alerts.h	/^	ALARM,$/;"	e	enum:_alert_type
ARRAY_SIZE	mongoose.h	150;"	d
AVS	Alerts.h	/^	AVS = 1$/;"	e	enum:_alert_source
BASE64_ENCODE_BODY	mongoose.c	422;"	d	file:
BASE64_FLUSH	mongoose.c	452;"	d	file:
BASE64_FLUSH	mongoose.c	462;"	d	file:
BASE64_FLUSH	mongoose.c	471;"	d	file:
BASE64_FLUSH	mongoose.c	478;"	d	file:
BASE64_OUT	mongoose.c	447;"	d	file:
BASE64_OUT	mongoose.c	461;"	d	file:
BASE64_OUT	mongoose.c	465;"	d	file:
BASE64_OUT	mongoose.c	477;"	d	file:
BIG_ENDIAN	mongoose.c	764;"	d	file:
BIG_ENDIAN	mongoose.h	386;"	d
BOSE_CRITICAL	DPrint_.h	266;"	d
BOSE_DEBUG	DPrint_.h	270;"	d
BOSE_DIE	DPrint_.h	343;"	d
BOSE_ERROR	DPrint_.h	267;"	d
BOSE_INFO	DPrint_.h	269;"	d
BOSE_INSANE	DPrint_.h	272;"	d
BOSE_IS_LOG	DPrint_.h	228;"	d
BOSE_LOG	DPrint_.h	304;"	d
BOSE_LOGX	DPrint_.h	321;"	d
BOSE_LOG_IF	DPrint_.h	241;"	d
BOSE_LOG_LEVEL	DPrint_.h	222;"	d
BOSE_PERROR	DPrint_.h	285;"	d
BOSE_VERBOSE	DPrint_.h	271;"	d
BOSE_WARNING	DPrint_.h	268;"	d
BYTE_ORDER	mongoose.c	759;"	d	file:
BYTE_ORDER	mongoose.h	388;"	d
CAlertOutput	AlertOutput.h	/^	CAlertOutput (CAlertsSystemClient *aClient)$/;"	f	class:CAlertOutput
CAlertOutput	AlertOutput.h	/^class CAlertOutput {$/;"	c
CAlerts	Alerts.cpp	/^CAlerts :: CAlerts (NotifyTargetTaskIF *m_task) {$/;"	f	class:CAlerts
CAlerts	Alerts.h	/^class CAlerts {$/;"	c
CAlertsManager	AlertsManager.cpp	/^CAlertsManager :: CAlertsManager () :$/;"	f	class:CAlertsManager
CAlertsManager	AlertsManager.h	/^class CAlertsManager : public CAlertsManagerAPI {$/;"	c
CAlertsManagerAPI	AlertsManagerAPI.h	/^class CAlertsManagerAPI {$/;"	c
CAlertsMessage	AlertsMessage.h	/^	CAlertsMessage (std::string schedule_time, std::string a_source) :$/;"	f	class:CAlertsMessage
CAlertsMessage	AlertsMessage.h	/^class CAlertsMessage {$/;"	c
CAlertsScheduler	AlertsScheduler.h	/^	CAlertsScheduler (){}; $/;"	f	class:CAlertsScheduler
CAlertsScheduler	AlertsScheduler.h	/^	CAlertsScheduler (NotifyTargetTaskIF * m_task) : m_ap_task(m_task){}; $/;"	f	class:CAlertsScheduler
CAlertsScheduler	AlertsScheduler.h	/^class CAlertsScheduler {$/;"	c
CAlertsSystemClient	AlertsSystemClient.cpp	/^CAlertsSystemClient :: CAlertsSystemClient ()  $/;"	f	class:CAlertsSystemClient
CAlertsSystemClient	AlertsSystemClient.h	/^class CAlertsSystemClient : public CAlertsManagerAPI {$/;"	c
CAlsaAlertOutput	AlsaAlertOutput.h	/^	CAlsaAlertOutput (CAlertsSystemClient *aClient)$/;"	f	class:CAlsaAlertOutput
CAlsaAlertOutput	AlsaAlertOutput.h	/^class CAlsaAlertOutput : public CAlertOutput {$/;"	c
CONSOLE_UART	mongoose.c	12053;"	d	file:
CONTENT_DISPOSITION	mongoose.c	5832;"	d	file:
CRITICAL	DPrint_.h	/^        CRITICAL,        \/\/ Catastrophic.$/;"	e	enum:DPrint::Level
CS_COMMON_CS_DBG_H_	mongoose.c	188;"	d	file:
CS_COMMON_CS_DIRENT_H_	mongoose.c	552;"	d	file:
CS_COMMON_CS_ENDIAN_H_	mongoose.c	751;"	d	file:
CS_COMMON_PLATFORMS_LWIP_MG_NET_IF_LWIP_H_	mongoose.c	13678;"	d	file:
CS_COMMON_PLATFORMS_PIC32_NET_IF_H_	mongoose.c	14872;"	d	file:
CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_	mongoose.h	573;"	d
CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_	mongoose.h	622;"	d
CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_	mongoose.h	473;"	d
CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_	mongoose.h	517;"	d
CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_	mongoose.h	743;"	d
CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_	mongoose.h	850;"	d
CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_	mongoose.h	329;"	d
CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_	mongoose.h	158;"	d
CS_COMMON_PLATFORMS_SIMPLELINK_SL_FS_SLFS_H_	mongoose.c	12196;"	d	file:
CS_COMMON_PLATFORMS_SIMPLELINK_SL_NET_IF_H_	mongoose.c	12982;"	d	file:
CS_COMMON_PLATFORM_H_	mongoose.h	38;"	d
CS_DEFINE_DIRENT	mongoose.h	277;"	d
CS_DEFINE_DIRENT	mongoose.h	532;"	d
CS_DEFINE_DIRENT	mongoose.h	721;"	d
CS_ENABLE_DEBUG	mongoose.c	197;"	d	file:
CS_ENABLE_STDIO	mongoose.h	300;"	d
CS_ENABLE_STDIO	mongoose.h	439;"	d
CS_ENABLE_STDIO	mongoose.h	503;"	d
CS_ENABLE_STDIO	mongoose.h	559;"	d
CS_ENABLE_STDIO	mongoose.h	725;"	d
CS_ENABLE_STDIO	mongoose.h	828;"	d
CS_ENABLE_STDIO	mongoose.h	887;"	d
CS_LOG_ENABLE_TS_DIFF	mongoose.c	201;"	d	file:
CS_MONGOOSE_SRC_COMMON_H_	mongoose.h	24;"	d
CS_MONGOOSE_SRC_INTERNAL_H_	mongoose.c	11;"	d	file:
CS_MONGOOSE_SRC_NET_IF_SOCKET_H_	mongoose.c	2965;"	d	file:
CS_MONGOOSE_SRC_NET_IF_TUN_H_	mongoose.c	2993;"	d	file:
CS_MONGOOSE_SRC_TUN_H_	mongoose.c	1876;"	d	file:
CS_PLATFORM	mongoose.h	67;"	d
CS_PLATFORM	mongoose.h	69;"	d
CS_PLATFORM	mongoose.h	71;"	d
CS_PLATFORM	mongoose.h	73;"	d
CS_PLATFORM	mongoose.h	75;"	d
CS_PLATFORM	mongoose.h	77;"	d
CS_PLATFORM	mongoose.h	79;"	d
CS_PLATFORM	mongoose.h	81;"	d
CS_PLATFORM	mongoose.h	83;"	d
CS_PLATFORM	mongoose.h	85;"	d
CS_PLATFORM	mongoose.h	87;"	d
CS_PLATFORM	mongoose.h	90;"	d
CS_PLATFORM	mongoose.h	92;"	d
CS_P_CC3100	mongoose.h	51;"	d
CS_P_CC3200	mongoose.h	49;"	d
CS_P_CUSTOM	mongoose.h	44;"	d
CS_P_ESP32	mongoose.h	47;"	d
CS_P_ESP8266	mongoose.h	48;"	d
CS_P_MBED	mongoose.h	53;"	d
CS_P_MSP432	mongoose.h	50;"	d
CS_P_NRF51	mongoose.h	57;"	d
CS_P_NRF52	mongoose.h	58;"	d
CS_P_NXP_KINETIS	mongoose.h	56;"	d
CS_P_NXP_LPC	mongoose.h	55;"	d
CS_P_PIC32	mongoose.h	59;"	d
CS_P_STM32	mongoose.h	60;"	d
CS_P_TM4C129	mongoose.h	52;"	d
CS_P_UNIX	mongoose.h	45;"	d
CS_P_WINCE	mongoose.h	54;"	d
CS_P_WINDOWS	mongoose.h	46;"	d
C_DISABLE_BUILTIN_SNPRINTF	mongoose.c	1465;"	d	file:
C_SNPRINTF_APPEND_CHAR	mongoose.c	1484;"	d	file:
C_SNPRINTF_FLAG_ZERO	mongoose.c	1490;"	d	file:
CheckEnabledPatterns	DPrint.cpp	/^bool DPrintImpl::CheckEnabledPatterns( const string& facility )$/;"	f	class:DPrintImpl
CheckLevelPatterns	DPrint.cpp	/^DPrint::Level DPrintImpl::CheckLevelPatterns( const string& facility )$/;"	f	class:DPrintImpl
DATA_FILE	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	e	enum:mg_http_proto_data_type	file:
DATA_NONE	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	e	enum:mg_http_proto_data_type	file:
DATA_PUT	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	e	enum:mg_http_proto_data_type	file:
DBG	mongoose.c	239;"	d	file:
DBG	mongoose.c	249;"	d	file:
DBG	mongoose.c	256;"	d	file:
DEBUG	DPrint_.h	/^        DEBUG,           \/\/ Normal debugging.$/;"	e	enum:DPrint::Level
DIR	mongoose.c	/^typedef struct { int dummy; } DIR;$/;"	t	typeref:struct:__anon3	file:
DIRSEP	mongoose.h	276;"	d
DIRSEP	mongoose.h	407;"	d
DIRSEP	mongoose.h	489;"	d
DIRSEP	mongoose.h	531;"	d
DIRSEP	mongoose.h	652;"	d
DIRSEP	mongoose.h	768;"	d
DIRSEP	mongoose.h	868;"	d
DO_NOT_WARN_UNUSED	mongoose.h	140;"	d
DO_NOT_WARN_UNUSED	mongoose.h	146;"	d
DPrint	DPrint.cpp	/^DPrint::DPrint( char const* facility )$/;"	f	class:DPrint
DPrint	DPrint.cpp	/^DPrint::DPrint( const DPrint& that )$/;"	f	class:DPrint
DPrint	DPrint.cpp	/^DPrint::DPrint( const string& facility )$/;"	f	class:DPrint
DPrint	DPrint_.h	/^class DPrint$/;"	c
DPrintImpl	DPrint.cpp	/^DPrintImpl::DPrintImpl( ) :$/;"	f	class:DPrintImpl
DPrintImpl	DPrint.cpp	/^class DPrintImpl$/;"	c	file:
EINPROGRESS	mongoose.h	213;"	d
ERROR	DPrint_.h	/^        ERROR,           \/\/ Bad, probably unrecoverable.$/;"	e	enum:DPrint::Level
EWOULDBLOCK	mongoose.h	216;"	d
F1	mongoose.c	812;"	d	file:
F2	mongoose.c	813;"	d	file:
F3	mongoose.c	814;"	d	file:
F4	mongoose.c	815;"	d	file:
FD_INVALID	mongoose.c	/^  FD_INVALID,$/;"	e	enum:fd_type	file:
FD_SLFS	mongoose.c	/^  FD_SLFS$/;"	e	enum:fd_type	file:
FD_SPIFFS	mongoose.c	/^  FD_SPIFFS,$/;"	e	enum:fd_type	file:
FD_SYS	mongoose.c	/^  FD_SYS,$/;"	e	enum:fd_type	file:
FS_SLFS_MAX_FILE_SIZE	mongoose.c	12257;"	d	file:
GET_IPV4	mongoose.c	13767;"	d	file:
GET_IPV4	mongoose.c	13769;"	d	file:
GetCurrentLoggingStatus	DPrint.cpp	/^list<string> DPrint::GetCurrentLoggingStatus() const$/;"	f	class:DPrint
GetCurrentLoggingStatus	DPrint.cpp	/^list<string> DPrintImpl::GetCurrentLoggingStatus( )$/;"	f	class:DPrintImpl
GetEXE	DPrint.cpp	/^string GetEXE()$/;"	f	namespace:__anon1
GetSysLog	DPrint.cpp	/^SysLog& GetSysLog()$/;"	f	namespace:__anon1
HEXTOI	mongoose.c	6382;"	d	file:
HOSTtime	mongoose.c	/^time_t HOSTtime() {$/;"	f
INFO	DPrint_.h	/^        INFO,            \/\/ Ordinary.$/;"	e	enum:DPrint::Level
INSANE	DPrint_.h	/^        INSANE           \/\/ Very verbose debugging.$/;"	e	enum:DPrint::Level
INT64_FMT	mongoose.h	266;"	d
INT64_FMT	mongoose.h	409;"	d
INT64_FMT	mongoose.h	491;"	d
INT64_FMT	mongoose.h	535;"	d
INT64_FMT	mongoose.h	601;"	d
INT64_FMT	mongoose.h	654;"	d
INT64_FMT	mongoose.h	770;"	d
INT64_FMT	mongoose.h	870;"	d
INT64_X_FMT	mongoose.h	267;"	d
INT64_X_FMT	mongoose.h	410;"	d
INT64_X_FMT	mongoose.h	492;"	d
INT64_X_FMT	mongoose.h	536;"	d
INT64_X_FMT	mongoose.h	602;"	d
INT64_X_FMT	mongoose.h	655;"	d
INT64_X_FMT	mongoose.h	771;"	d
INT64_X_FMT	mongoose.h	871;"	d
INVALID	Alerts.h	/^	INVALID = 0,$/;"	e	enum:_alert_type
INVALID_SOCKET	mongoose.h	404;"	d
INVALID_SOCKET	mongoose.h	598;"	d
INVALID_SOCKET	mongoose.h	649;"	d
INVALID_SOCKET	mongoose.h	765;"	d
IPADDR_NTOA	mongoose.c	13751;"	d	file:
IPADDR_NTOA	mongoose.c	13759;"	d	file:
Initialize	DPrint.cpp	/^void DPrint::Initialize( std::string const& appName )$/;"	f	class:DPrint
Initialize	DPrint.cpp	/^void SysLog::Initialize( const std::string& identity )$/;"	f	class:__anon1::SysLog
Instance	DPrint.cpp	/^inline DPrintImpl* DPrintImpl::Instance( )$/;"	f	class:DPrintImpl
IsLog	DPrint.cpp	/^bool DPrint::IsLog( DPrint::Level level ) const$/;"	f	class:DPrint
IsLog	DPrint.cpp	/^bool DPrintImpl::IsLog( DPrint::Level level, int facilityIndex )$/;"	f	class:DPrintImpl
LITTLE_ENDIAN	mongoose.c	761;"	d	file:
LITTLE_ENDIAN	mongoose.h	385;"	d
LL_DEBUG	mongoose.c	/^  LL_DEBUG = 3,$/;"	e	enum:cs_log_level	file:
LL_ERROR	mongoose.c	/^  LL_ERROR = 0,$/;"	e	enum:cs_log_level	file:
LL_INFO	mongoose.c	/^  LL_INFO = 2,$/;"	e	enum:cs_log_level	file:
LL_NONE	mongoose.c	/^  LL_NONE = -1,$/;"	e	enum:cs_log_level	file:
LL_VERBOSE_DEBUG	mongoose.c	/^  LL_VERBOSE_DEBUG = 4,$/;"	e	enum:cs_log_level	file:
LL_WARN	mongoose.c	/^  LL_WARN = 1,$/;"	e	enum:cs_log_level	file:
LOCAL	Alerts.h	/^	LOCAL = 0,$/;"	e	enum:_alert_source
LOG	mongoose.c	229;"	d	file:
LOG	mongoose.c	255;"	d	file:
LWIP_TIMEVAL_PRIVATE	mongoose.h	547;"	d
Level	DPrint_.h	/^    enum Level$/;"	g	class:DPrint
Limit	DPrint_.h	/^        Limit( char const* s, size_t lim = defaultLimit )$/;"	f	struct:DPrint::Limit
Limit	DPrint_.h	/^        Limit( std::string const& s, size_t lim = defaultLimit )$/;"	f	struct:DPrint::Limit
Limit	DPrint_.h	/^    struct Limit$/;"	s	class:DPrint
LoadConfigFile	DPrint.cpp	/^void DPrintImpl::LoadConfigFile( const char* confFileName )$/;"	f	class:DPrintImpl
LoadConfigFile	DPrint.cpp	/^void DPrintImpl::LoadConfigFile( std::istream& inf,$/;"	f	class:DPrintImpl
LoadConfigFile	DPrint.cpp	/^void DPrintImpl::LoadConfigFile()$/;"	f	class:DPrintImpl
Log	DPrint.cpp	/^void DPrint::Log( DPrint::Level level, const char* format, ... ) const$/;"	f	class:DPrint
Log	DPrint.cpp	/^void DPrintImpl::Log( DPrint::Level level,$/;"	f	class:DPrintImpl
LogCritical	DPrint.cpp	/^void DPrint::LogCritical( const char* format, ... ) const$/;"	f	class:DPrint
LogDebug	DPrint.cpp	/^void DPrint::LogDebug( const char* format, ... ) const$/;"	f	class:DPrint
LogError	DPrint.cpp	/^void DPrint::LogError( const char* format, ... ) const$/;"	f	class:DPrint
LogForTestAutomation	DPrint.cpp	/^void DPrintImpl::LogForTestAutomation( int facilityIndex,$/;"	f	class:DPrintImpl
LogIfRequired	DPrint.cpp	/^void DPrintImpl::LogIfRequired( DPrint::Level level,$/;"	f	class:DPrintImpl
LogInfo	DPrint.cpp	/^void DPrint::LogInfo( const char* format, ... ) const$/;"	f	class:DPrint
LogInsane	DPrint.cpp	/^void DPrint::LogInsane( const char* format, ... ) const$/;"	f	class:DPrint
LogOutputLocation	DPrint.cpp	/^    enum LogOutputLocation$/;"	g	class:DPrintImpl	file:
LogTestAutomation	DPrint.cpp	/^void DPrint::LogTestAutomation( const char* format, ... ) const$/;"	f	class:DPrint
LogToFile	DPrint.cpp	/^void DPrintImpl::LogToFile( DPrint::Level level,$/;"	f	class:DPrintImpl
LogVerbose	DPrint.cpp	/^void DPrint::LogVerbose( const char* format, ... ) const$/;"	f	class:DPrint
LogWarning	DPrint.cpp	/^void DPrint::LogWarning( const char* format, ... ) const$/;"	f	class:DPrint
MAX	mongoose.c	9195;"	d	file:
MAX_OPEN_SLFS_FILES	mongoose.c	12206;"	d	file:
MBUF_FREE	mongoose.c	1023;"	d	file:
MBUF_FREE	mongoose.c	34;"	d	file:
MBUF_REALLOC	mongoose.c	1019;"	d	file:
MBUF_REALLOC	mongoose.c	30;"	d	file:
MD5STEP	mongoose.c	817;"	d	file:
MD5Transform	mongoose.c	/^static void MD5Transform(uint32_t buf[4], uint32_t const in[16]) {$/;"	f	file:
MD5_Final	mongoose.c	/^void MD5_Final(unsigned char digest[16], MD5_CTX *ctx) {$/;"	f
MD5_Init	mongoose.c	/^void MD5_Init(MD5_CTX *ctx) {$/;"	f
MD5_Update	mongoose.c	/^void MD5_Update(MD5_CTX *ctx, const unsigned char *buf, size_t len) {$/;"	f
MG_CALLOC	mongoose.c	18;"	d	file:
MG_COPY_COMMON_CONNECTION_OPTIONS	mongoose.c	1983;"	d	file:
MG_CTL_MSG_MESSAGE_SIZE	mongoose.c	55;"	d	file:
MG_DEFAULT_NAMESERVER	mongoose.c	10585;"	d	file:
MG_DISABLE_PFS	mongoose.c	48;"	d	file:
MG_ENABLE_BROADCAST	mongoose.h	304;"	d
MG_ENABLE_BROADCAST	mongoose.h	443;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	308;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	447;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	643;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	312;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	451;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	720;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	832;"	d
MG_ENABLE_HTTP_CGI	mongoose.h	316;"	d
MG_ENABLE_HTTP_CGI	mongoose.h	455;"	d
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL	mongoose.c	13681;"	d	file:
MG_ENABLE_NET_IF_PIC32	mongoose.c	14881;"	d	file:
MG_ENABLE_NET_IF_SIMPLELINK	mongoose.c	12991;"	d	file:
MG_ENABLE_NET_IF_SOCKET	mongoose.c	2974;"	d	file:
MG_ENV_EXPORT_TO_CGI	mongoose.c	7832;"	d	file:
MG_FREE	mongoose.c	1473;"	d	file:
MG_FREE	mongoose.c	26;"	d	file:
MG_FREE	mongoose.c	603;"	d	file:
MG_FS_SLFS	mongoose.h	715;"	d
MG_INTERNAL	mongoose.c	43;"	d	file:
MG_LWIP	mongoose.h	496;"	d
MG_LWIP	mongoose.h	544;"	d
MG_LWIP	mongoose.h	881;"	d
MG_LWIP_IFACE_VTABLE	mongoose.c	14316;"	d	file:
MG_LWIP_SSL_IO_SIZE	mongoose.c	14596;"	d	file:
MG_LWIP_SSL_RECV_MBUF_LIMIT	mongoose.c	14604;"	d	file:
MG_MALLOC	mongoose.c	1469;"	d	file:
MG_MALLOC	mongoose.c	14;"	d	file:
MG_MALLOC	mongoose.c	607;"	d	file:
MG_MAX_CGI_ENVIR_VARS	mongoose.c	7828;"	d	file:
MG_MAX_HOST_LEN	mongoose.c	1981;"	d	file:
MG_MAX_HTTP_HEADERS	mongoose.h	296;"	d
MG_MAX_HTTP_HEADERS	mongoose.h	435;"	d
MG_MAX_HTTP_REQUEST_SIZE	mongoose.h	288;"	d
MG_MAX_HTTP_REQUEST_SIZE	mongoose.h	427;"	d
MG_MAX_HTTP_SEND_MBUF	mongoose.h	292;"	d
MG_MAX_HTTP_SEND_MBUF	mongoose.h	431;"	d
MG_NET_IF	mongoose.h	320;"	d
MG_NET_IF	mongoose.h	459;"	d
MG_NET_IF	mongoose.h	499;"	d
MG_NET_IF	mongoose.h	552;"	d
MG_NET_IF	mongoose.h	554;"	d
MG_NET_IF	mongoose.h	584;"	d
MG_NET_IF	mongoose.h	638;"	d
MG_NET_IF	mongoose.h	759;"	d
MG_NET_IF	mongoose.h	877;"	d
MG_NET_IF	mongoose.h	879;"	d
MG_NET_IF_LWIP_LOW_LEVEL	mongoose.h	103;"	d
MG_NET_IF_PIC32	mongoose.h	104;"	d
MG_NET_IF_SIMPLELINK	mongoose.h	102;"	d
MG_NET_IF_SOCKET	mongoose.h	101;"	d
MG_PIC32_IFACE_VTABLE	mongoose.c	15162;"	d	file:
MG_Q_MSG_CB	mongoose.c	/^  MG_Q_MSG_CB,$/;"	e	enum:mg_q_msg_type	file:
MG_REALLOC	mongoose.c	22;"	d	file:
MG_SET_PTRPTR	mongoose.c	37;"	d	file:
MG_SIG_ACCEPT	mongoose.c	/^  MG_SIG_ACCEPT = 6,$/;"	e	enum:mg_sig_type	file:
MG_SIG_CLOSE_CONN	mongoose.c	/^  MG_SIG_CLOSE_CONN = 4,$/;"	e	enum:mg_sig_type	file:
MG_SIG_CONNECT_RESULT	mongoose.c	/^  MG_SIG_CONNECT_RESULT = 1,$/;"	e	enum:mg_sig_type	file:
MG_SIG_QUEUE_LEN	mongoose.c	14354;"	d	file:
MG_SIG_RECV	mongoose.c	/^  MG_SIG_RECV = 2,$/;"	e	enum:mg_sig_type	file:
MG_SIG_SENT_CB	mongoose.c	/^  MG_SIG_SENT_CB = 3,$/;"	e	enum:mg_sig_type	file:
MG_SIG_TOMBSTONE	mongoose.c	/^  MG_SIG_TOMBSTONE = 5,$/;"	e	enum:mg_sig_type	file:
MG_SL_IFACE_VTABLE	mongoose.c	13445;"	d	file:
MG_SOCKET_IFACE_VTABLE	mongoose.c	3771;"	d	file:
MG_SSL_IF	mongoose.h	585;"	d
MG_SSL_IF	mongoose.h	639;"	d
MG_SSL_IF	mongoose.h	760;"	d
MG_SSL_IF_MBEDTLS	mongoose.h	107;"	d
MG_SSL_IF_OPENSSL	mongoose.h	106;"	d
MG_SSL_IF_SIMPLELINK	mongoose.h	108;"	d
MG_TCP_RECV_BUFFER_SIZE	mongoose.c	13016;"	d	file:
MG_TCP_RECV_BUFFER_SIZE	mongoose.c	3079;"	d	file:
MG_TCP_RECV_BUFFER_SIZE	mongoose.c	3815;"	d	file:
MG_TUN_DATA_FRAME	mongoose.c	1889;"	d	file:
MG_TUN_F_END_STREAM	mongoose.c	1890;"	d	file:
MG_TUN_IFACE_VTABLE	mongoose.c	3947;"	d	file:
MG_TUN_PROTO_NAME	mongoose.c	1887;"	d	file:
MG_TUN_RECONNECT_INTERVAL	mongoose.c	1884;"	d	file:
MG_UART_CHAR_PUT	mongoose.c	12504;"	d	file:
MG_UART_CHAR_PUT	mongoose.c	12506;"	d	file:
MG_UDP_RECV_BUFFER_SIZE	mongoose.c	13017;"	d	file:
MG_UDP_RECV_BUFFER_SIZE	mongoose.c	3080;"	d	file:
MG_UDP_RECV_BUFFER_SIZE	mongoose.c	3816;"	d	file:
MG_VERSION	mongoose.h	26;"	d
MG_WEBSOCKET_PING_INTERVAL_SECONDS	mongoose.c	8791;"	d	file:
MG_WS_NO_HOST_HEADER_MAGIC	mongoose.c	8794;"	d	file:
MIME_ENTRY	mongoose.c	5130;"	d	file:
MIN	mongoose.c	14608;"	d	file:
MIN	mongoose.c	92;"	d	file:
MPS_BEGIN	mongoose.c	/^  MPS_BEGIN,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_FINALIZE	mongoose.c	/^  MPS_FINALIZE,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_FINISHED	mongoose.c	/^  MPS_FINISHED$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_GOT_BOUNDARY	mongoose.c	/^  MPS_GOT_BOUNDARY,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_GOT_CHUNK	mongoose.c	/^  MPS_GOT_CHUNK,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_WAITING_FOR_BOUNDARY	mongoose.c	/^  MPS_WAITING_FOR_BOUNDARY,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_WAITING_FOR_CHUNK	mongoose.c	/^  MPS_WAITING_FOR_CHUNK,$/;"	e	enum:mg_http_multipart_stream_state	file:
MatchFacility	DPrint.cpp	/^bool DPrintImpl::MatchFacility( const string& pattern, const string& facility )$/;"	f	class:DPrintImpl
NOINLINE	mongoose.h	137;"	d
NOINLINE	mongoose.h	143;"	d
NOINSTR	mongoose.h	139;"	d
NOINSTR	mongoose.h	145;"	d
NORETURN	mongoose.h	136;"	d
NORETURN	mongoose.h	142;"	d
NO_LIBC	mongoose.c	47;"	d	file:
NUM_DIGITS	mongoose.c	355;"	d	file:
NUM_LETTERS	mongoose.c	354;"	d	file:
NUM_SYS_FDS	mongoose.c	12493;"	d	file:
NUM_UPPERCASES	mongoose.c	353;"	d	file:
NameToLevel	DPrint.cpp	/^DPrint::Level DPrint::NameToLevel( std::string const& name )$/;"	f	class:DPrint
PDP_ENDIAN	mongoose.h	387;"	d
Prefix	DPrint.cpp	/^void DPrint::Prefix( std::ostringstream& ss, Level level,$/;"	f	class:DPrint
Prefix	DPrint.cpp	/^void DPrintImpl::Prefix( std::ostream& os,$/;"	f	class:DPrintImpl
Prefix	DPrint.cpp	/^void SysLog::Prefix( std::ostream& os,$/;"	f	class:__anon1::SysLog
ProcessConfig	DPrint.cpp	/^void DPrintImpl::ProcessConfig( const char *filename, int line,$/;"	f	class:DPrintImpl
ProcessConfigCommand	DPrint.cpp	/^void DPrintImpl::ProcessConfigCommand$/;"	f	class:DPrintImpl
ProcessConfigSet	DPrint.cpp	/^bool DPrintImpl::ProcessConfigSet( const char* file, int line, Strings& args )$/;"	f	class:DPrintImpl
Put	DPrint.cpp	/^void DPrint::Put( std::ostringstream& ss ) const$/;"	f	class:DPrint
Put	DPrint.cpp	/^void DPrintImpl::Put( std::ostringstream& ss )$/;"	f	class:DPrintImpl
Put	DPrint.cpp	/^void DPrintImpl::Put( std::ostringstream& ss, std::ostream& os )$/;"	f	class:DPrintImpl
Put	DPrint.cpp	/^void SysLog::Put( std::ostringstream& ss )$/;"	f	class:__anon1::SysLog
R0	mongoose.c	1230;"	d	file:
R0	mongoose.c	1240;"	d	file:
R1	mongoose.c	1231;"	d	file:
R1	mongoose.c	1243;"	d	file:
R2	mongoose.c	1232;"	d	file:
R2	mongoose.c	1246;"	d	file:
R3	mongoose.c	1233;"	d	file:
R3	mongoose.c	1249;"	d	file:
R4	mongoose.c	1234;"	d	file:
R4	mongoose.c	1252;"	d	file:
RegisterDPrintClient	DPrint.cpp	/^int DPrintImpl::RegisterDPrintClient( const string &facility )$/;"	f	class:DPrintImpl
RegisterDPrintClient	DPrint.cpp	/^void DPrintImpl::RegisterDPrintClient( int index )$/;"	f	class:DPrintImpl
SET_ADDR	mongoose.c	13752;"	d	file:
SET_ADDR	mongoose.c	13760;"	d	file:
SHA1HANDSOFF	mongoose.c	1207;"	d	file:
SIZE_T_FMT	mongoose.h	268;"	d
SIZE_T_FMT	mongoose.h	405;"	d
SIZE_T_FMT	mongoose.h	487;"	d
SIZE_T_FMT	mongoose.h	529;"	d
SIZE_T_FMT	mongoose.h	603;"	d
SIZE_T_FMT	mongoose.h	650;"	d
SIZE_T_FMT	mongoose.h	766;"	d
SIZE_T_FMT	mongoose.h	866;"	d
SLFS_FD_BASE	mongoose.c	12495;"	d	file:
SNTP_ATTEMPTS	mongoose.c	11764;"	d	file:
SNTP_TIMEOUT	mongoose.c	11760;"	d	file:
SNTP_TIME_OFFSET	mongoose.c	11757;"	d	file:
SOMAXCONN	mongoose.h	605;"	d
SPIFFS_FD_BASE	mongoose.c	12494;"	d	file:
STDOUT	DPrint.cpp	/^        STDOUT,$/;"	e	enum:DPrintImpl::LogOutputLocation	file:
STR	mongoose.h	220;"	d
STRX	mongoose.h	219;"	d
SYSLOG	DPrint.cpp	/^        SYSLOG,$/;"	e	enum:DPrintImpl::LogOutputLocation	file:
S_IFCHR	mongoose.h	704;"	d
S_IFCHR	mongoose.h	817;"	d
S_IFDIR	mongoose.h	703;"	d
S_IFDIR	mongoose.h	816;"	d
S_IFREG	mongoose.h	705;"	d
S_IFREG	mongoose.h	818;"	d
S_ISDIR	mongoose.h	271;"	d
S_ISDIR	mongoose.h	706;"	d
S_ISDIR	mongoose.h	819;"	d
S_ISREG	mongoose.h	274;"	d
S_ISREG	mongoose.h	707;"	d
S_ISREG	mongoose.h	820;"	d
SetEnabled	DPrint.cpp	/^void DPrint::SetEnabled( bool bEnabled )$/;"	f	class:DPrint
SetEnabled	DPrint.cpp	/^void DPrintImpl::SetEnabled( bool bEnabled )$/;"	f	class:DPrintImpl
SetFacilityEnabled	DPrint.cpp	/^bool DPrint::SetFacilityEnabled( const string& facility, bool enabled )$/;"	f	class:DPrint
SetFacilityEnabled	DPrint.cpp	/^bool DPrintImpl::SetFacilityEnabled( const string& facility, bool enabled )$/;"	f	class:DPrintImpl
SetFacilityLogLevel	DPrint.cpp	/^bool DPrintImpl::SetFacilityLogLevel( const string& facility,$/;"	f	class:DPrintImpl
SetGlobalLogLevel	DPrint.cpp	/^bool DPrint::SetGlobalLogLevel( DPrint::Level level )$/;"	f	class:DPrint
SetGlobalLogLevel	DPrint.cpp	/^bool DPrintImpl::SetGlobalLogLevel( DPrint::Level level )$/;"	f	class:DPrintImpl
SetLogLevel	DPrint.cpp	/^bool DPrint::SetLogLevel( const string& facility, DPrint::Level level )$/;"	f	class:DPrint
SetLogOutputLocation	DPrint.cpp	/^void DPrintImpl::SetLogOutputLocation( LogOutputLocation logOutputLocation )$/;"	f	class:DPrintImpl
SetPrintToStdout	DPrint.cpp	/^void DPrint::SetPrintToStdout( bool enable )$/;"	f	class:DPrint
SetTestAutomationLogHandler	DPrint.cpp	/^void DPrint::SetTestAutomationLogHandler( TestAutomationLogHandler* handler )$/;"	f	class:DPrint
StringToLevel	DPrint.cpp	/^int DPrintImpl::StringToLevel( const std::string& level )$/;"	f	class:DPrintImpl
SysLog	DPrint.cpp	/^SysLog::SysLog()$/;"	f	class:__anon1::SysLog
SysLog	DPrint.cpp	/^struct SysLog$/;"	s	namespace:__anon1	file:
TCP_BIND	mongoose.c	13749;"	d	file:
TCP_BIND	mongoose.c	13757;"	d	file:
TCP_NEW	mongoose.c	13748;"	d	file:
TCP_NEW	mongoose.c	13756;"	d	file:
TIMER	Alerts.h	/^	TIMER,$/;"	e	enum:_alert_type
TestAutomationLogHandler	DPrint_.h	/^    typedef void TestAutomationLogHandler( char const* message, size_t len );$/;"	t	class:DPrint
Timestamp	DPrint.cpp	/^struct Timestamp$/;"	s	namespace:__anon1	file:
UDP_BIND	mongoose.c	13750;"	d	file:
UDP_BIND	mongoose.c	13758;"	d	file:
UINT16_MAX	mongoose.h	258;"	d
UINT32_MAX	mongoose.h	261;"	d
UNUSED	DPrint_.h	/^        UNUSED,          \/\/ Not a real log level. Don't use.$/;"	e	enum:DPrint::Level
USB	DPrint.cpp	/^        USB$/;"	e	enum:DPrintImpl::LogOutputLocation	file:
UnregisterDPrintClient	DPrint.cpp	/^void DPrintImpl::UnregisterDPrintClient( int index )$/;"	f	class:DPrintImpl
VERBOSE	DPrint_.h	/^        VERBOSE,         \/\/ Verbose debugging.$/;"	e	enum:DPrint::Level
WARNING	DPrint_.h	/^        WARNING,         \/\/ Bad but recoverable.$/;"	e	enum:DPrint::Level
WARN_UNUSED_RESULT	mongoose.h	138;"	d
WARN_UNUSED_RESULT	mongoose.h	144;"	d
WEAK	mongoose.c	/^FILE *cs_log_file WEAK = NULL;$/;"	v
WEAK	mongoose.c	/^double cs_log_ts WEAK;$/;"	v
WEAK	mongoose.c	/^enum cs_log_level cs_log_level WEAK =$/;"	v	typeref:enum:cs_log_level
WEAK	mongoose.h	129;"	d
WEAK	mongoose.h	131;"	d
_CRT_SECURE_NO_WARNINGS	mongoose.h	183;"	d
_FILE_OFFSET_BITS	mongoose.h	353;"	d
_FILE_OFFSET_BITS	mongoose.h	494;"	d
_FILE_OFFSET_BITS	mongoose.h	538;"	d
_LARGEFILE_SOURCE	mongoose.h	348;"	d
_LL_MAX	mongoose.c	/^  _LL_MAX = 5,$/;"	e	enum:cs_log_level	file:
_LL_MIN	mongoose.c	/^  _LL_MIN = -2,$/;"	e	enum:cs_log_level	file:
_MG_ALLOWED_CONNECT_FLAGS_MASK	mongoose.c	1987;"	d	file:
_MG_CALLBACK_MODIFIABLE_FLAGS_MASK	mongoose.c	1991;"	d	file:
_MG_F_FD_CAN_READ	mongoose.c	13224;"	d	file:
_MG_F_FD_CAN_READ	mongoose.c	3438;"	d	file:
_MG_F_FD_CAN_WRITE	mongoose.c	13225;"	d	file:
_MG_F_FD_CAN_WRITE	mongoose.c	3439;"	d	file:
_MG_F_FD_ERROR	mongoose.c	13226;"	d	file:
_MG_F_FD_ERROR	mongoose.c	3440;"	d	file:
_WINSOCK_DEPRECATED_NO_WARNINGS	mongoose.h	179;"	d
_XOPEN_SOURCE	mongoose.h	333;"	d
__STDC_FORMAT_MACROS	mongoose.h	338;"	d
__STDC_LIMIT_MACROS	mongoose.h	343;"	d
__S_IFCHR	mongoose.h	698;"	d
__S_IFCHR	mongoose.h	811;"	d
__S_IFDIR	mongoose.h	697;"	d
__S_IFDIR	mongoose.h	810;"	d
__S_IFMT	mongoose.h	695;"	d
__S_IFMT	mongoose.h	808;"	d
__S_IFREG	mongoose.h	699;"	d
__S_IFREG	mongoose.h	812;"	d
__S_ISTYPE	mongoose.h	701;"	d
__S_ISTYPE	mongoose.h	814;"	d
__cdecl	mongoose.h	413;"	d
__cdecl	mongoose.h	493;"	d
__cdecl	mongoose.h	537;"	d
__cdecl	mongoose.h	656;"	d
__cdecl	mongoose.h	772;"	d
__cdecl	mongoose.h	872;"	d
__func__	mongoose.h	221;"	d
_alert_source	Alerts.h	/^typedef enum _alert_source{$/;"	g
_alert_type	Alerts.h	/^typedef enum _alert_type{$/;"	g
_exit	mongoose.c	/^void _exit(int status) {$/;"	f
_fstat	mongoose.c	/^int _fstat(int fd, struct stat *s) {$/;"	f
_getpid	mongoose.c	/^int _getpid() {$/;"	f
_gettimeofday_r	mongoose.c	/^int _gettimeofday_r(struct _reent *r, struct timeval *tp, void *tzp) {$/;"	f
_isatty	mongoose.c	/^int _isatty(int fd) {$/;"	f
_kill	mongoose.c	/^int _kill(int pid, int sig) {$/;"	f
_not_implemented	mongoose.c	/^void _not_implemented(const char *what) {$/;"	f
_off_t	mongoose.h	/^typedef size_t _off_t;$/;"	t
_stat	mongoose.c	/^int _stat(const char *pathname, struct stat *st) {$/;"	f
_wstati64	mongoose.c	/^int _wstati64(const wchar_t *path, cs_stat_t *st) {$/;"	f
a_source	Alerts.h	/^	alert_source a_source;$/;"	m	class:CAlerts
a_type	Alerts.h	/^	alert_type  a_type;$/;"	m	class:CAlerts
access	alsa.c	/^        snd_pcm_access_t access;$/;"	m	struct:transfer_method	file:
access	alsa.cpp	/^        snd_pcm_access_t access;$/;"	m	struct:transfer_method	file:
access	playAudio.cpp	/^        snd_pcm_access_t access;$/;"	m	struct:transfer_method	file:
addAlert	Alerts.cpp	/^bool CAlerts:: addAlert (struct tm *sch_time,std::function <void(std::string )> cbk)$/;"	f	class:CAlerts
addAlert	AlertsManager.cpp	/^bool CAlertsManager :: addAlert (CAlertsMessage *alertMessage,std::function<void(std::string)> cbk)$/;"	f	class:CAlertsManager
addAlert	AlertsScheduler.cpp	/^bool CAlertsScheduler :: addAlert (struct tm* t_time, std::function <void (std::string)> cbk)$/;"	f	class:CAlertsScheduler
addAlert	AlertsSystemClient.cpp	/^bool CAlertsSystemClient :: addAlert (CAlertsMessage *alertMessage, std::function <void(std::string)> cbk)$/;"	f	class:CAlertsSystemClient
addAlert	main.cpp	/^void addAlert (CAlertsSystemClient* m_pAlerts_client)$/;"	f
addAlertAction	AlertsSystemClient.cpp	/^bool CAlertsSystemClient :: addAlertAction (CAlertsMessage *alertMessage,std::function<void(std::string)> cbk )$/;"	f	class:CAlertsSystemClient
alertActiveCbk	AlertsSystemClient.cpp	/^void CAlertsSystemClient :: alertActiveCbk (std::string alert_id)$/;"	f	class:CAlertsSystemClient
alertClient	AlertOutput.h	/^	CAlertsSystemClient *alertClient;$/;"	m	class:CAlertOutput
alertObservers	AlertsSystemClient.h	/^	std::vector <CAlertOutput *> alertObservers;$/;"	m	class:CAlertsSystemClient
alert_callback	Alerts.h	/^	std::function<void(std::string)> alert_callback;$/;"	m	class:CAlerts
alert_id	Alerts.h	/^	std::string alert_id;  \/\/The id will be returned to the module on successful alert\/alarm setup$/;"	m	class:CAlerts
alert_id	AlertsMessage.h	/^	std::string alert_id;$/;"	m	class:CAlertsMessage
alert_source	Alerts.h	/^}alert_source;$/;"	t	typeref:enum:_alert_source
alert_source	AlertsMessage.h	/^	std::string alert_source;$/;"	m	class:CAlertsMessage
alert_type	Alerts.h	/^}alert_type;$/;"	t	typeref:enum:_alert_type
areas	alsa.c	/^        snd_pcm_channel_area_t *areas;$/;"	m	struct:async_private_data	file:
areas	alsa.cpp	/^        snd_pcm_channel_area_t *areas;$/;"	m	struct:async_private_data	file:
areas	playAudio.cpp	/^        snd_pcm_channel_area_t *areas;$/;"	m	struct:async_private_data	file:
arg	mongoose.c	/^  void *arg;$/;"	m	struct:mg_q_msg	file:
asprintf	mongoose.c	/^int asprintf(char **strp, const char *fmt, ...) {$/;"	f
async_callback	alsa.c	/^static void async_callback(snd_async_handler_t *ahandler)$/;"	f	file:
async_callback	alsa.cpp	/^static void async_callback(snd_async_handler_t *ahandler)$/;"	f	file:
async_callback	playAudio.cpp	/^static void async_callback(snd_async_handler_t *ahandler)$/;"	f	file:
async_direct_callback	alsa.c	/^static void async_direct_callback(snd_async_handler_t *ahandler)$/;"	f	file:
async_direct_callback	alsa.cpp	/^static void async_direct_callback(snd_async_handler_t *ahandler)$/;"	f	file:
async_direct_callback	playAudio.cpp	/^static void async_direct_callback(snd_async_handler_t *ahandler)$/;"	f	file:
async_direct_loop	alsa.c	/^static int async_direct_loop(snd_pcm_t *handle,$/;"	f	file:
async_direct_loop	alsa.cpp	/^static int async_direct_loop(snd_pcm_t *handle,$/;"	f	file:
async_direct_loop	playAudio.cpp	/^static int async_direct_loop(snd_pcm_t *handle,$/;"	f	file:
async_loop	alsa.c	/^static int async_loop(snd_pcm_t *handle,$/;"	f	file:
async_loop	alsa.cpp	/^static int async_loop(snd_pcm_t *handle,$/;"	f	file:
async_loop	playAudio.cpp	/^static int async_loop(snd_pcm_t *handle,$/;"	f	file:
async_private_data	alsa.c	/^struct async_private_data {$/;"	s	file:
async_private_data	alsa.cpp	/^struct async_private_data {$/;"	s	file:
async_private_data	playAudio.cpp	/^struct async_private_data {$/;"	s	file:
blk	mongoose.c	1229;"	d	file:
blk	mongoose.c	1236;"	d	file:
blk0	mongoose.c	/^static uint32_t blk0(union char64long16 *block, int i) {$/;"	f	file:
body	mongoose.c	/^  struct mg_str body;$/;"	m	struct:mg_tun_frame	typeref:struct:mg_tun_frame::mg_str	file:
body_len	mongoose.c	/^  int64_t body_len; \/* How many bytes of chunked body was reassembled. *\/$/;"	m	struct:mg_http_proto_data_chuncked	file:
boundary	mongoose.c	/^  const char *boundary;$/;"	m	struct:mg_http_multipart_stream	file:
boundary_len	mongoose.c	/^  int boundary_len;$/;"	m	struct:mg_http_multipart_stream	file:
broadcast	main.cpp	/^static void broadcast(struct mg_connection *nc, const struct mg_str msg) {$/;"	f	file:
broadcast	websocket_chat.c	/^static void broadcast(struct mg_connection *nc, const struct mg_str msg) {$/;"	f	file:
buf	DPrint.cpp	/^    char buf[ 32 ];$/;"	m	struct:__anon1::Timestamp	file:
buf	mongoose.c	/^  char buf[MG_CGI_ENVIRONMENT_SIZE];       \/* Environment buffer *\/$/;"	m	struct:mg_cgi_env_block	file:
buffer_size	alsa.c	/^static snd_pcm_sframes_t buffer_size;$/;"	v	file:
buffer_size	alsa.cpp	/^static snd_pcm_sframes_t buffer_size;$/;"	v	file:
buffer_size	playAudio.cpp	/^static snd_pcm_sframes_t buffer_size;$/;"	v	file:
buffer_time	alsa.c	/^static unsigned int buffer_time = 500000;               \/* ring buffer length in us *\/$/;"	v	file:
buffer_time	alsa.cpp	/^static unsigned int buffer_time = 500000;               \/* ring buffer length in us *\/$/;"	v	file:
buffer_time	playAudio.cpp	/^static unsigned int buffer_time = 500000;               \/* ring buffer length in us *\/$/;"	v	file:
byteReverse	mongoose.c	/^static void byteReverse(unsigned char *buf, unsigned longs) {$/;"	f	file:
c	mongoose.c	/^  unsigned char c[64];$/;"	m	union:char64long16	file:
c_itoa	mongoose.c	/^static int c_itoa(char *buf, size_t buf_size, int64_t num, int base, int flags,$/;"	f	file:
c_snprintf	mongoose.c	/^int c_snprintf(char *buf, size_t buf_size, const char *fmt, ...) {$/;"	f
c_strnlen	mongoose.c	/^size_t c_strnlen(const char *s, size_t maxlen) {$/;"	f
c_strnstr	mongoose.c	/^const char *c_strnstr(const char *s, const char *find, size_t slen) {$/;"	f
c_vsnprintf	mongoose.c	/^int c_vsnprintf(char *buf, size_t buf_size, const char *fmt, va_list ap) {$/;"	f
ca_cert	mongoose.c	/^  mbedtls_x509_crt *ca_cert;$/;"	m	struct:mg_ssl_if_ctx	file:
callback	mongoose.c	/^  mg_event_handler_t callback;$/;"	m	struct:ctl_msg	file:
callback	mongoose.c	/^  mg_resolve_callback_t callback;$/;"	m	struct:mg_resolve_async_request	file:
callback_cbk	Alerts.cpp	/^void CAlerts::callback_cbk()$/;"	f	class:CAlerts
cb	mongoose.c	/^  void (*cb)(struct mg_mgr *mgr, void *arg);$/;"	m	struct:mg_q_msg	file:
cbk	AlertsMessage.h	/^	std::function <void(std::string)> cbk;$/;"	m	class:CAlertsMessage
cbk_controller	AlertsManager.cpp	/^void cbk_controller (std::string alert_id)$/;"	f
cert	mongoose.c	/^  mbedtls_x509_crt *cert;$/;"	m	struct:mg_ssl_if_ctx	file:
cgi	mongoose.c	/^  struct mg_http_proto_data_cgi cgi;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_proto_data_cgi	file:
cgi_nc	mongoose.c	/^  struct mg_connection *cgi_nc;$/;"	m	struct:mg_http_proto_data_cgi	typeref:struct:mg_http_proto_data_cgi::mg_connection	file:
channels	alsa.c	/^static unsigned int channels = 1;                       \/* count of channels *\/$/;"	v	file:
channels	alsa.cpp	/^static unsigned int channels = 1;                       \/* count of channels *\/$/;"	v	file:
channels	playAudio.cpp	/^static unsigned int channels = 1;                       \/* count of channels *\/$/;"	v	file:
char64long16	mongoose.c	/^union char64long16 {$/;"	u	file:
chunk	mongoose.c	/^  struct mg_http_proto_data_chuncked chunk;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_proto_data_chuncked	file:
cipher_suites	mongoose.c	/^  struct mbuf cipher_suites;$/;"	m	struct:mg_ssl_if_ctx	typeref:struct:mg_ssl_if_ctx::mbuf	file:
cl	mongoose.c	/^  int64_t cl;    \/* Content-Length. How many bytes to send. *\/$/;"	m	struct:mg_http_proto_data_file	file:
clientCbk	AlertsSystemClient.h	/^	std::function <void (std::string)> clientCbk;$/;"	m	class:CAlertsSystemClient
close	DPrint.cpp	/^void SysLog::close()$/;"	f	class:__anon1::SysLog
close	mongoose.c	/^int close(int fd) {$/;"	f
closedir	mongoose.c	/^int closedir(DIR *d) {$/;"	f
closedir	mongoose.c	/^int closedir(DIR *dir) {$/;"	f
closesocket	mongoose.h	424;"	d
coap_add_opt_info	mongoose.c	/^static char *coap_add_opt_info(char *ptr, uint16_t val, size_t len) {$/;"	f	file:
coap_add_uint16	mongoose.c	/^static char *coap_add_uint16(char *ptr, uint16_t val) {$/;"	f	file:
coap_calculate_packet_size	mongoose.c	/^static uint32_t coap_calculate_packet_size(struct mg_coap_message *cm,$/;"	f	file:
coap_get_ext_opt	mongoose.c	/^static int coap_get_ext_opt(char *ptr, struct mbuf *io, uint16_t *opt_info) {$/;"	f	file:
coap_get_ext_opt_size	mongoose.c	/^static size_t coap_get_ext_opt_size(uint32_t value) {$/;"	f	file:
coap_get_options	mongoose.c	/^static char *coap_get_options(char *ptr, struct mbuf *io,$/;"	f	file:
coap_get_token	mongoose.c	/^static char *coap_get_token(char *ptr, struct mbuf *io,$/;"	f	file:
coap_handler	mongoose.c	/^static void coap_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
coap_parse_header	mongoose.c	/^static char *coap_parse_header(char *ptr, struct mbuf *io,$/;"	f	file:
coap_split_opt	mongoose.c	/^static int coap_split_opt(uint32_t value, uint8_t *base, uint16_t *ext) {$/;"	f	file:
conf	mongoose.c	/^  mbedtls_ssl_config *conf;$/;"	m	struct:mg_ssl_if_ctx	file:
count	mongoose.c	/^  int count;$/;"	m	struct:sntp_data	file:
cs_base64_decode	mongoose.c	/^int cs_base64_decode(const unsigned char *s, int len, char *dst, int *dec_len) {$/;"	f
cs_base64_emit_chunk	mongoose.c	/^static void cs_base64_emit_chunk(struct cs_base64_ctx *ctx) {$/;"	f	file:
cs_base64_emit_code	mongoose.c	/^static void cs_base64_emit_code(struct cs_base64_ctx *ctx, int v) {$/;"	f	file:
cs_base64_encode	mongoose.c	/^void cs_base64_encode(const unsigned char *src, int src_len, char *dst) {$/;"	f
cs_base64_finish	mongoose.c	/^void cs_base64_finish(struct cs_base64_ctx *ctx) {$/;"	f
cs_base64_init	mongoose.c	/^void cs_base64_init(struct cs_base64_ctx *ctx, cs_base64_putc_t b64_putc,$/;"	f
cs_base64_update	mongoose.c	/^void cs_base64_update(struct cs_base64_ctx *ctx, const char *str, size_t len) {$/;"	f
cs_dirent_dummy	mongoose.c	/^typedef int cs_dirent_dummy;$/;"	t	file:
cs_fprint_base64	mongoose.c	/^void cs_fprint_base64(FILE *f, const unsigned char *src, int src_len) {$/;"	f
cs_from_hex	mongoose.c	/^void cs_from_hex(char *to, const char *p, size_t len) {$/;"	f
cs_hmac_sha1	mongoose.c	/^void cs_hmac_sha1(const unsigned char *key, size_t keylen,$/;"	f
cs_log_level	mongoose.c	/^enum cs_log_level {$/;"	g	file:
cs_log_print_prefix	mongoose.c	/^void cs_log_print_prefix(const char *func) {$/;"	f
cs_log_printf	mongoose.c	/^void cs_log_printf(const char *fmt, ...) {$/;"	f
cs_log_set_file	mongoose.c	/^void cs_log_set_file(FILE *file) {$/;"	f
cs_log_set_level	mongoose.c	/^void cs_log_set_level(enum cs_log_level level) {$/;"	f
cs_md5	mongoose.c	/^char *cs_md5(char buf[33], ...) {$/;"	f
cs_sha1_final	mongoose.c	/^void cs_sha1_final(unsigned char digest[20], cs_sha1_ctx *context) {$/;"	f
cs_sha1_init	mongoose.c	/^void cs_sha1_init(cs_sha1_ctx *context) {$/;"	f
cs_sha1_transform	mongoose.c	/^void cs_sha1_transform(uint32_t state[5], const unsigned char buffer[64]) {$/;"	f
cs_sha1_update	mongoose.c	/^void cs_sha1_update(cs_sha1_ctx *context, const unsigned char *data,$/;"	f
cs_stat_t	mongoose.h	/^typedef struct _stati64 cs_stat_t;$/;"	t	typeref:struct:_stati64
cs_stat_t	mongoose.h	/^typedef struct stat cs_stat_t;$/;"	t	typeref:struct:stat
cs_time	mongoose.c	/^double cs_time(void) {$/;"	f
cs_to64	mongoose.c	/^int64_t cs_to64(const char *s) {$/;"	f
cs_to_hex	mongoose.c	/^void cs_to_hex(char *to, const unsigned char *p, size_t len) {$/;"	f
ctl_msg	mongoose.c	/^struct ctl_msg {$/;"	s	file:
d	mongoose.c	/^  DIR d;$/;"	m	struct:win32_dir	file:
d_ino	mongoose.c	/^  int d_ino;$/;"	m	struct:dirent	file:
d_name	mongoose.c	/^  char d_name[256];$/;"	m	struct:dirent	file:
d_name	mongoose.c	/^  char d_name[MAX_PATH];$/;"	m	struct:dirent	file:
data	mongoose.c	/^  void *data;$/;"	m	struct:mg_resolve_async_request	file:
defaultLimit	DPrint_.h	/^        static constexpr size_t defaultLimit = 100;$/;"	m	struct:DPrint::Limit
deleteAlert	Alerts.cpp	/^bool CAlerts :: deleteAlert ()$/;"	f	class:CAlerts
deleteAlert	AlertsManager.cpp	/^bool CAlertsManager :: deleteAlert(std::string alert_id)$/;"	f	class:CAlertsManager
deleteAlert	AlertsScheduler.cpp	/^bool CAlertsScheduler :: deleteAlert (std::string alert_message_id)$/;"	f	class:CAlertsScheduler
deleteAlert	AlertsSystemClient.cpp	/^bool CAlertsSystemClient :: deleteAlert (std::string alert_id)$/;"	f	class:CAlertsSystemClient
deleteAlertAction	AlertsSystemClient.cpp	/^bool CAlertsSystemClient :: deleteAlertAction (std::string alert_id)$/;"	f	class:CAlertsSystemClient
device	alsa.c	/^static char *device = "plughw:0,0";                     \/* playback device *\/$/;"	v	file:
device	alsa.cpp	/^static char *device = "plughw:0,0";                     \/* playback device *\/$/;"	v	file:
device	playAudio.cpp	/^static char *device = "plughw:0,0";                     \/* playback device *\/$/;"	v	file:
direct_loop	alsa.c	/^static int direct_loop(snd_pcm_t *handle,$/;"	f	file:
direct_loop	alsa.cpp	/^static int direct_loop(snd_pcm_t *handle,$/;"	f	file:
direct_loop	playAudio.cpp	/^static int direct_loop(snd_pcm_t *handle,$/;"	f	file:
direct_write_loop	alsa.c	/^static int direct_write_loop(snd_pcm_t *handle,$/;"	f	file:
direct_write_loop	alsa.cpp	/^static int direct_write_loop(snd_pcm_t *handle,$/;"	f	file:
direct_write_loop	playAudio.cpp	/^static int direct_write_loop(snd_pcm_t *handle,$/;"	f	file:
dirent	mongoose.c	/^struct dirent {$/;"	s	file:
disp	mongoose.c	/^  struct mg_connection *disp;$/;"	m	struct:mg_tun_client	typeref:struct:mg_tun_client::mg_connection	file:
disp_url	mongoose.c	/^  const char *disp_url;$/;"	m	struct:mg_tun_client	file:
dns_handler	mongoose.c	/^static void dns_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
do_ssi_exec	mongoose.c	/^static void do_ssi_exec(struct mg_connection *nc, char *tag) {$/;"	f	file:
drop_dir	mongoose.c	/^static const char *drop_dir(const char *fname, bool *is_slfs) {$/;"	f	file:
dummy	mongoose.c	/^typedef struct { int dummy; } DIR;$/;"	m	struct:__anon3	file:
endpoint_handler	mongoose.c	/^  mg_event_handler_t endpoint_handler;$/;"	m	struct:mg_http_proto_data	file:
endpoints	mongoose.c	/^  struct mg_http_endpoint *endpoints;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_endpoint	file:
err	mongoose.c	/^  enum mg_resolve_err err;$/;"	m	struct:mg_resolve_async_request	typeref:enum:mg_resolve_async_request::mg_resolve_err	file:
err	mongoose.c	/^  err_t err;$/;"	m	struct:mg_lwip_conn_state	file:
ev_handler	main.cpp	/^static void ev_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
ev_handler	websocket_chat.c	/^static void ev_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
ev_handler	websocket_chat_client.c	/^static void ev_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
ext_len	mongoose.c	/^  size_t ext_len;$/;"	m	struct:__anon4	file:
extension	mongoose.c	/^  const char *extension;$/;"	m	struct:__anon4	file:
fd_type	mongoose.c	/^enum fd_type {$/;"	g	file:
fd_type	mongoose.c	/^static int fd_type(int fd) {$/;"	f	file:
fh	mongoose.c	/^  _i32 fh;$/;"	m	struct:sl_fd_info	file:
file	mongoose.c	/^  struct mg_http_proto_data_file file;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_proto_data_file	file:
file_name	mongoose.c	/^  const char *file_name;$/;"	m	struct:mg_http_multipart_stream	file:
file_upload_state	mongoose.c	/^struct file_upload_state {$/;"	s	file:
fileno	mongoose.h	224;"	d
fileno	mongoose.h	541;"	d
fileno	mongoose.h	658;"	d
fileno	mongoose.h	774;"	d
flags	mongoose.c	/^  uint16_t flags;$/;"	m	struct:mg_dns_header	file:
flags	mongoose.c	/^  uint8_t flags;$/;"	m	struct:mg_tun_frame	file:
format	alsa.c	/^static snd_pcm_format_t format = SND_PCM_FORMAT_S16;    \/* sample format *\/$/;"	v	file:
format	alsa.cpp	/^static snd_pcm_format_t format = SND_PCM_FORMAT_S16;    \/* sample format *\/$/;"	v	file:
format	playAudio.cpp	/^static snd_pcm_format_t format = SND_PCM_FORMAT_S16;    \/* sample format *\/$/;"	v	file:
fourbit	mongoose.c	/^static int fourbit(int ch) {$/;"	f	file:
fp	mongoose.c	/^  FILE *fp;      \/* Opened file. *\/$/;"	m	struct:mg_http_proto_data_file	file:
fp	mongoose.c	/^  FILE *fp;$/;"	m	struct:file_upload_state	file:
fprint_str	mongoose.c	/^void fprint_str(FILE *fp, const char *str) {$/;"	f
freq	alsa.c	/^static double freq = 440;                               \/* sinusoidal wave frequency in Hz *\/$/;"	v	file:
freq	alsa.cpp	/^static double freq = 440;                               \/* sinusoidal wave frequency in Hz *\/$/;"	v	file:
freq	playAudio.cpp	/^static double freq = 440;                               \/* sinusoidal wave frequency in Hz *\/$/;"	v	file:
from_b64	mongoose.c	/^static unsigned char from_b64(unsigned char ch) {$/;"	f	file:
fs_slfs_close	mongoose.c	/^int fs_slfs_close(int fd) {$/;"	f
fs_slfs_fstat	mongoose.c	/^int fs_slfs_fstat(int fd, struct stat *s) {$/;"	f
fs_slfs_lseek	mongoose.c	/^off_t fs_slfs_lseek(int fd, off_t offset, int whence) {$/;"	f
fs_slfs_open	mongoose.c	/^int fs_slfs_open(const char *pathname, int flags, mode_t mode) {$/;"	f
fs_slfs_read	mongoose.c	/^ssize_t fs_slfs_read(int fd, void *buf, size_t count) {$/;"	f
fs_slfs_rename	mongoose.c	/^int fs_slfs_rename(const char *from, const char *to) {$/;"	f
fs_slfs_set_new_file_size	mongoose.c	/^void fs_slfs_set_new_file_size(const char *name, size_t size) {$/;"	f
fs_slfs_stat	mongoose.c	/^int fs_slfs_stat(const char *pathname, struct stat *s) {$/;"	f
fs_slfs_unlink	mongoose.c	/^int fs_slfs_unlink(const char *pathname) {$/;"	f
fs_slfs_write	mongoose.c	/^ssize_t fs_slfs_write(int fd, const void *buf, size_t count) {$/;"	f
fseeko	mongoose.h	234;"	d
fseeko	mongoose.h	236;"	d
generate	DPrint.cpp	/^const char* Timestamp::generate()$/;"	f	class:__anon1::Timestamp
generate_sine	alsa.c	/^static void generate_sine(const snd_pcm_channel_area_t *areas, $/;"	f	file:
generate_sine	alsa.cpp	/^static void generate_sine(const snd_pcm_channel_area_t *areas, $/;"	f	file:
generate_sine	playAudio.cpp	/^static void generate_sine(const snd_pcm_channel_area_t *areas, $/;"	f	file:
getAlertId	Alerts.cpp	/^std::string CAlerts :: getAlertId()$/;"	f	class:CAlerts
getAlertSource	AlertsMessage.cpp	/^std::string CAlertsMessage :: getAlertSource ()$/;"	f	class:CAlertsMessage
getMessageId	Alerts.cpp	/^std::string CAlerts :: getMessageId()$/;"	f	class:CAlerts
getScheduledTime	AlertsMessage.cpp	/^std::string CAlertsMessage :: getScheduledTime ()$/;"	f	class:CAlertsMessage
getTask	AlertsManager.h	/^	inline NotifyTargetTaskIF * getTask () const$/;"	f	class:CAlertsManager
gettimeofday	mongoose.c	/^int gettimeofday(struct timeval *tp, void *tzp) {$/;"	f
getu16	mongoose.c	/^static uint16_t getu16(const char *p) {$/;"	f	file:
hPipe	mongoose.c	/^  HANDLE hPipe;$/;"	m	struct:mg_threadparam	file:
hander	mongoose.c	/^  mg_event_handler_t hander;$/;"	m	struct:sntp_data	file:
handle	mongoose.c	/^  HANDLE handle;$/;"	m	struct:win32_dir	file:
handler	mongoose.c	/^  mg_event_handler_t handler;$/;"	m	struct:mg_http_endpoint	file:
help	alsa.c	/^static void help(void)$/;"	f	file:
help	alsa.cpp	/^static void help(void)$/;"	f	file:
help	playAudio.cpp	/^static void help(void)$/;"	f	file:
identity_len	mongoose.c	/^  size_t identity_len;$/;"	m	struct:mg_ssl_if_ctx	file:
iface	mongoose.c	/^  struct mg_iface *iface;$/;"	m	struct:mg_tun_client	typeref:struct:mg_tun_client::mg_iface	file:
in_addr_t	mongoose.h	/^typedef uint32_t in_addr_t;$/;"	t
inet_ntoa	mongoose.c	/^char *inet_ntoa(struct in_addr in) {$/;"	f
inet_ntoa	mongoose.c	/^char *inet_ntoa(struct in_addr n) {$/;"	f
inet_ntop	mongoose.c	/^const char *inet_ntop(int af, const void *src, char *dst, socklen_t size) {$/;"	f
inet_pton	mongoose.c	/^int inet_pton(int af, const char *src, void *dst) {$/;"	f
info	mongoose.c	/^  WIN32_FIND_DATAW info;$/;"	m	struct:win32_dir	file:
int16_t	mongoose.h	/^typedef short int16_t;$/;"	t
int32_t	mongoose.h	/^typedef int int32_t;$/;"	t
int64_t	mongoose.h	/^typedef __int64 int64_t;$/;"	t
int8_t	mongoose.h	/^typedef signed char int8_t;$/;"	t
intptr_t	mongoose.c	1997;"	d	file:
intptr_t	mongoose.h	/^typedef long intptr_t;$/;"	t
is_websocket	main.cpp	/^static int is_websocket(const struct mg_connection *nc) {$/;"	f	file:
is_websocket	websocket_chat.c	/^static int is_websocket(const struct mg_connection *nc) {$/;"	f	file:
isbyte	mongoose.c	/^static int isbyte(int n) {$/;"	f	file:
keepalive	mongoose.c	/^  int keepalive; \/* Keep connection open after sending. *\/$/;"	m	struct:mg_http_proto_data_file	file:
key	mongoose.c	/^  mbedtls_pk_context *key;$/;"	m	struct:mg_ssl_if_ctx	file:
kr_recv	mongoose.c	/^ssize_t kr_recv(int fd, void *buf, size_t len) {$/;"	f
kr_send	mongoose.c	/^ssize_t kr_send(int fd, const void *buf, size_t len) {$/;"	f
l	mongoose.c	/^  uint32_t l[16];$/;"	m	union:char64long16	file:
last_ssl_write_size	mongoose.c	/^  int last_ssl_write_size;$/;"	m	struct:mg_lwip_conn_state	file:
last_stream_id	mongoose.c	/^  uint32_t last_stream_id; \/* stream id of most recently accepted connection *\/$/;"	m	struct:mg_tun_client	file:
last_time	mongoose.c	/^  time_t last_time;$/;"	m	struct:mg_resolve_async_request	file:
lc	mongoose.c	/^  struct mg_connection *lc;$/;"	m	struct:mg_lwip_conn_state	typeref:struct:mg_lwip_conn_state::mg_connection	file:
len	mongoose.c	/^  int len;                                 \/* Space taken *\/$/;"	m	struct:mg_cgi_env_block	file:
len_	DPrint_.h	/^        size_t len_;$/;"	m	struct:DPrint::Limit
level	DPrint.cpp	/^    DPrint::Level level;$/;"	m	struct:__anon2	file:
levelNames	DPrint.cpp	/^const char* const levelNames[] =$/;"	m	namespace:__anon1	file:
lfn	mongoose.c	/^  char *lfn;$/;"	m	struct:file_upload_state	file:
lim_	DPrint_.h	/^        size_t lim_;$/;"	m	struct:DPrint::Limit
linked_conn	mongoose.c	/^  struct mg_connection *linked_conn;$/;"	m	struct:mg_reverse_proxy_data	typeref:struct:mg_reverse_proxy_data::mg_connection	file:
listener	mongoose.c	/^  struct mg_connection *listener;$/;"	m	struct:mg_tun_client	typeref:struct:mg_tun_client::mg_connection	file:
lower	DPrint.cpp	/^std::string lower( std::string s )$/;"	f	namespace:__anon1
lowercase	mongoose.c	/^static int lowercase(const char *s) {$/;"	f	file:
lseek	mongoose.c	/^off_t lseek(int fd, off_t offset, int whence) {$/;"	f
m_FacilityEnabled	DPrint.cpp	/^    bool m_FacilityEnabled[ maxFacilities ];$/;"	m	class:DPrintImpl	file:
m_FacilityLogLevel	DPrint.cpp	/^    DPrint::Level m_FacilityLogLevel[ maxFacilities ];$/;"	m	class:DPrintImpl	file:
m_FacilityNames	DPrint.cpp	/^    Strings m_FacilityNames;$/;"	m	class:DPrintImpl	file:
m_FacilityRefCount	DPrint.cpp	/^    int m_FacilityRefCount[ maxFacilities ];$/;"	m	class:DPrintImpl	file:
m_FacilityTable	DPrint.cpp	/^    map<string, int> m_FacilityTable;   \/\/ a map of facility names and indices into the above vectors$/;"	m	class:DPrintImpl	file:
m_alert_manager	AlertsSystemClient.h	/^	CAlertsManager* m_alert_manager;$/;"	m	class:CAlertsSystemClient
m_alert_task	Alerts.h	/^	NotifyTargetTaskIF *m_alert_task;$/;"	m	class:CAlerts
m_alert_timer	Alerts.h	/^	APTimerPtr m_alert_timer;$/;"	m	class:CAlerts
m_alerts	AlertsScheduler.h	/^	std::vector <CAlerts> m_alerts;$/;"	m	class:CAlertsScheduler
m_alertsScheduler	AlertsManager.h	/^	CAlertsScheduler m_alertsScheduler;$/;"	m	class:CAlertsManager
m_alerts_it	AlertsScheduler.h	/^	std::vector <CAlerts>::iterator m_alerts_it;$/;"	m	class:CAlertsScheduler
m_ap_task	AlertsScheduler.h	/^	NotifyTargetTaskIF * m_ap_task;$/;"	m	class:CAlertsScheduler
m_appName	DPrint.cpp	/^    std::string m_appName;$/;"	m	class:DPrintImpl	file:
m_defaultLevel	DPrint.cpp	/^    DPrint::Level m_defaultLevel;       \/\/ This is used to keep track of the default dprint level for a new facility$/;"	m	class:DPrintImpl	file:
m_enabledByDefault	DPrint.cpp	/^    bool m_enabledByDefault;            \/\/ This is used to determine if a dprint logger for a new facility$/;"	m	class:DPrintImpl	file:
m_facilityPatterns	DPrint.cpp	/^    map<string, bool> m_facilityPatterns; \/\/ Stores patterns that were previously specified$/;"	m	class:DPrintImpl	file:
m_identity	DPrint.cpp	/^    string m_identity;$/;"	m	struct:__anon1::SysLog	file:
m_index	DPrint_.h	/^    int m_index;$/;"	m	class:DPrint
m_levelPatterns	DPrint.cpp	/^    map<string, DPrint::Level> m_levelPatterns; \/\/ Stores patterns that were previously specified$/;"	m	class:DPrintImpl	file:
m_logFile	DPrint.cpp	/^    std::ofstream m_logFile;            \/\/ When m_logOutputLocation is USB$/;"	m	class:DPrintImpl	file:
m_logOutputLocation	DPrint.cpp	/^    LogOutputLocation m_logOutputLocation;$/;"	m	class:DPrintImpl	file:
m_pTask	AlertsManager.h	/^	NotifyTargetTaskIF * m_pTask;$/;"	m	class:CAlertsManager
m_socket	DPrint.cpp	/^    int m_socket;$/;"	m	struct:__anon1::SysLog	file:
main	alsa.c	/^int main(int argc, char *argv[])$/;"	f
main	alsa.cpp	/^int main(int argc, char *argv[])$/;"	f
main	main.cpp	/^int main(void) {$/;"	f
main	main_old.cpp	/^int main ()$/;"	f
main	websocket_chat.c	/^int main(void) {$/;"	f
main	websocket_chat_client.c	/^int main(int argc, char **argv) {$/;"	f
mask	mongoose.c	/^  uint32_t mask;$/;"	m	struct:ws_mask_ctx	file:
maxFacilities	DPrint.cpp	/^    static constexpr size_t maxFacilities = 1024;$/;"	m	class:DPrintImpl	file:
max_retries	mongoose.c	/^  int max_retries;$/;"	m	struct:mg_resolve_async_request	file:
mbuf_append	mongoose.c	/^size_t mbuf_append(struct mbuf *a, const void *buf, size_t len) {$/;"	f
mbuf_free	mongoose.c	/^void mbuf_free(struct mbuf *mbuf) {$/;"	f
mbuf_init	mongoose.c	/^void mbuf_init(struct mbuf *mbuf, size_t initial_size) {$/;"	f
mbuf_insert	mongoose.c	/^size_t mbuf_insert(struct mbuf *a, size_t off, const void *buf, size_t len) {$/;"	f
mbuf_remove	mongoose.c	/^void mbuf_remove(struct mbuf *mb, size_t n) {$/;"	f
mbuf_resize	mongoose.c	/^void mbuf_resize(struct mbuf *a, size_t new_size) {$/;"	f
mbuf_trim	mongoose.c	/^void mbuf_trim(struct mbuf *mbuf) {$/;"	f
message	mongoose.c	/^  char message[MG_CTL_MSG_MESSAGE_SIZE];$/;"	m	struct:ctl_msg	file:
message_id	Alerts.h	/^	std::string message_id;$/;"	m	class:CAlerts
message_token	Alerts.h	/^	std::string message_token;$/;"	m	class:CAlerts
mg_abs_path	mongoose.c	/^static void mg_abs_path(const char *utf8_path, char *abs_path, size_t len) {$/;"	f	file:
mg_accept_conn	mongoose.c	/^static int mg_accept_conn(struct mg_connection *lc) {$/;"	f	file:
mg_add_conn	mongoose.c	/^MG_INTERNAL void mg_add_conn(struct mg_mgr *mgr, struct mg_connection *c) {$/;"	f
mg_add_sock	mongoose.c	/^struct mg_connection *mg_add_sock(struct mg_mgr *s, sock_t sock,$/;"	f
mg_add_sock_opt	mongoose.c	/^struct mg_connection *mg_add_sock_opt(struct mg_mgr *s, sock_t sock,$/;"	f
mg_add_to_set	mongoose.c	/^void mg_add_to_set(sock_t sock, fd_set *set, sock_t *max_fd) {$/;"	f
mg_addenv	mongoose.c	/^static char *mg_addenv(struct mg_cgi_env_block *block, const char *fmt, ...) {$/;"	f	file:
mg_addenv2	mongoose.c	/^static void mg_addenv2(struct mg_cgi_env_block *blk, const char *name) {$/;"	f	file:
mg_asprintf	mongoose.c	/^int mg_asprintf(char **buf, size_t size, const char *fmt, ...) {$/;"	f
mg_avprintf	mongoose.c	/^int mg_avprintf(char **buf, size_t size, const char *fmt, va_list ap) {$/;"	f
mg_base64_decode	mongoose.c	/^int mg_base64_decode(const unsigned char *s, int len, char *dst) {$/;"	f
mg_base64_encode	mongoose.c	/^void mg_base64_encode(const unsigned char *src, int src_len, char *dst) {$/;"	f
mg_basic_auth_header	mongoose.c	/^void mg_basic_auth_header(const char *user, const char *pass,$/;"	f
mg_bind	mongoose.c	/^struct mg_connection *mg_bind(struct mg_mgr *srv, const char *address,$/;"	f
mg_bind_opt	mongoose.c	/^struct mg_connection *mg_bind_opt(struct mg_mgr *mgr, const char *address,$/;"	f
mg_broadcast	mongoose.c	/^void mg_broadcast(struct mg_mgr *mgr, mg_event_handler_t cb, void *data,$/;"	f
mg_calculate_delay	mongoose.c	/^static uint64_t mg_calculate_delay(uint64_t t1, uint64_t t2, uint64_t t3) {$/;"	f	file:
mg_call	mongoose.c	/^MG_INTERNAL void mg_call(struct mg_connection *nc,$/;"	f
mg_casecmp	mongoose.c	/^int mg_casecmp(const char *s1, const char *s2) {$/;"	f
mg_cgi_env_block	mongoose.c	/^struct mg_cgi_env_block {$/;"	s	file:
mg_cgi_ev_handler	mongoose.c	/^static void mg_cgi_ev_handler(struct mg_connection *cgi_nc, int ev,$/;"	f	file:
mg_check_ip_acl	mongoose.c	/^int mg_check_ip_acl(const char *acl, uint32_t remote_ip) {$/;"	f
mg_check_nonce	mongoose.c	/^static int mg_check_nonce(const char *nonce) {$/;"	f	file:
mg_close_conn	mongoose.c	/^void mg_close_conn(struct mg_connection *conn) {$/;"	f
mg_coap_add_option	mongoose.c	/^struct mg_coap_option *mg_coap_add_option(struct mg_coap_message *cm,$/;"	f
mg_coap_compose	mongoose.c	/^uint32_t mg_coap_compose(struct mg_coap_message *cm, struct mbuf *io) {$/;"	f
mg_coap_free_options	mongoose.c	/^void mg_coap_free_options(struct mg_coap_message *cm) {$/;"	f
mg_coap_parse	mongoose.c	/^uint32_t mg_coap_parse(struct mbuf *io, struct mg_coap_message *cm) {$/;"	f
mg_coap_send_ack	mongoose.c	/^uint32_t mg_coap_send_ack(struct mg_connection *nc, uint16_t msg_id) {$/;"	f
mg_coap_send_message	mongoose.c	/^uint32_t mg_coap_send_message(struct mg_connection *nc,$/;"	f
mg_conn_addr_to_str	mongoose.c	/^void mg_conn_addr_to_str(struct mg_connection *nc, char *buf, size_t len,$/;"	f
mg_connect	mongoose.c	/^struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *address,$/;"	f
mg_connect_http	mongoose.c	/^struct mg_connection *mg_connect_http(struct mg_mgr *mgr,$/;"	f
mg_connect_http_base	mongoose.c	/^struct mg_connection *mg_connect_http_base($/;"	f
mg_connect_http_opt	mongoose.c	/^struct mg_connection *mg_connect_http_opt(struct mg_mgr *mgr,$/;"	f
mg_connect_opt	mongoose.c	/^struct mg_connection *mg_connect_opt(struct mg_mgr *mgr, const char *address,$/;"	f
mg_connect_ws	mongoose.c	/^struct mg_connection *mg_connect_ws(struct mg_mgr *mgr,$/;"	f
mg_connect_ws_opt	mongoose.c	/^struct mg_connection *mg_connect_ws_opt(struct mg_mgr *mgr,$/;"	f
mg_create_connection	mongoose.c	/^MG_INTERNAL struct mg_connection *mg_create_connection($/;"	f
mg_create_connection_base	mongoose.c	/^MG_INTERNAL struct mg_connection *mg_create_connection_base($/;"	f
mg_create_itermediate_directories	mongoose.c	/^static int mg_create_itermediate_directories(const char *path) {$/;"	f	file:
mg_default_dns_server	mongoose.c	/^static const char *mg_default_dns_server = "udp:\/\/" MG_DEFAULT_NAMESERVER ":53";$/;"	v	file:
mg_default_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_default_iface_vtable = MG_LWIP_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_default_iface_vtable = MG_PIC32_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_default_iface_vtable = MG_SL_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_default_iface_vtable = MG_SOCKET_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_deliver_websocket_data	mongoose.c	/^static int mg_deliver_websocket_data(struct mg_connection *nc) {$/;"	f	file:
mg_destroy_conn	mongoose.c	/^static void mg_destroy_conn(struct mg_connection *conn, int destroy_if) {$/;"	f	file:
mg_dns_copy_questions	mongoose.c	/^int mg_dns_copy_questions(struct mbuf *io, struct mg_dns_message *msg) {$/;"	f
mg_dns_create_reply	mongoose.c	/^struct mg_dns_reply mg_dns_create_reply(struct mbuf *io,$/;"	f
mg_dns_encode_name	mongoose.c	/^int mg_dns_encode_name(struct mbuf *io, const char *name, size_t len) {$/;"	f
mg_dns_encode_record	mongoose.c	/^int mg_dns_encode_record(struct mbuf *io, struct mg_dns_resource_record *rr,$/;"	f
mg_dns_header	mongoose.c	/^struct mg_dns_header {$/;"	s	file:
mg_dns_insert_header	mongoose.c	/^int mg_dns_insert_header(struct mbuf *io, size_t pos,$/;"	f
mg_dns_next_record	mongoose.c	/^struct mg_dns_resource_record *mg_dns_next_record($/;"	f
mg_dns_parse_record_data	mongoose.c	/^int mg_dns_parse_record_data(struct mg_dns_message *msg,$/;"	f
mg_dns_reply_record	mongoose.c	/^int mg_dns_reply_record(struct mg_dns_reply *reply,$/;"	f
mg_dns_send_reply	mongoose.c	/^void mg_dns_send_reply(struct mg_connection *nc, struct mg_dns_reply *r) {$/;"	f
mg_dns_server	mongoose.c	/^MG_INTERNAL char mg_dns_server[256];$/;"	v
mg_dns_tid	mongoose.c	/^static int mg_dns_tid = 0xa0;$/;"	v	file:
mg_dns_uncompress_name	mongoose.c	/^size_t mg_dns_uncompress_name(struct mg_dns_message *msg, struct mg_str *name,$/;"	f
mg_do_connect	mongoose.c	/^MG_INTERNAL struct mg_connection *mg_do_connect(struct mg_connection *nc,$/;"	f
mg_do_ssi_include	mongoose.c	/^static void mg_do_ssi_include(struct mg_connection *nc, struct http_message *hm,$/;"	f	file:
mg_enable_javascript	mongoose.c	/^enum v7_err mg_enable_javascript(struct mg_mgr *m, struct v7 *v7,$/;"	f
mg_escape	mongoose.c	/^static void mg_escape(const char *src, char *dst, size_t dst_len) {$/;"	f	file:
mg_ev_mgr_lwip_data	mongoose.c	/^struct mg_ev_mgr_lwip_data {$/;"	s	file:
mg_ev_mgr_lwip_process_signals	mongoose.c	/^void mg_ev_mgr_lwip_process_signals(struct mg_mgr *mgr) {$/;"	f
mg_ev_mgr_lwip_signal	mongoose.c	/^struct mg_ev_mgr_lwip_signal {$/;"	s	file:
mg_file_upload_handler	mongoose.c	/^void mg_file_upload_handler(struct mg_connection *nc, int ev, void *ev_data,$/;"	f
mg_find_iface	mongoose.c	/^struct mg_iface *mg_find_iface(struct mg_mgr *mgr,$/;"	f
mg_find_index_file	mongoose.c	/^MG_INTERNAL void mg_find_index_file(const char *path, const char *list,$/;"	f
mg_fopen	mongoose.c	/^FILE *mg_fopen(const char *path, const char *mode) {$/;"	f
mg_forward	mongoose.c	/^void mg_forward(struct mg_connection *from, struct mg_connection *to) {$/;"	f
mg_get_errno	mongoose.c	/^DO_NOT_WARN_UNUSED MG_INTERNAL int mg_get_errno(void) {$/;"	f
mg_get_http_basic_auth	mongoose.c	/^int mg_get_http_basic_auth(struct http_message *hm, char *user, size_t user_len,$/;"	f
mg_get_http_header	mongoose.c	/^struct mg_str *mg_get_http_header(struct http_message *hm, const char *name) {$/;"	f
mg_get_http_var	mongoose.c	/^int mg_get_http_var(const struct mg_str *buf, const char *name, char *dst,$/;"	f
mg_get_ip_address_of_nameserver	mongoose.c	/^static int mg_get_ip_address_of_nameserver(char *name, size_t name_len) {$/;"	f	file:
mg_get_line_len	mongoose.c	/^static size_t mg_get_line_len(const char *buf, size_t buf_len) {$/;"	f	file:
mg_get_mime_type	mongoose.c	/^static struct mg_str mg_get_mime_type(const char *path, const char *dflt,$/;"	f	file:
mg_get_month_index	mongoose.c	/^static int mg_get_month_index(const char *s) {$/;"	f	file:
mg_get_ntp_ts	mongoose.c	/^static void mg_get_ntp_ts(const char *ntp, uint64_t *val) {$/;"	f	file:
mg_get_sec	mongoose.c	/^static uint64_t mg_get_sec(uint64_t val) {$/;"	f	file:
mg_get_usec	mongoose.c	/^static uint64_t mg_get_usec(uint64_t val) {$/;"	f	file:
mg_gmt_time_string	mongoose.c	/^static void mg_gmt_time_string(char *buf, size_t buf_len, time_t *t) {$/;"	f	file:
mg_handle_cgi	mongoose.c	/^MG_INTERNAL void mg_handle_cgi(struct mg_connection *nc, const char *prog,$/;"	f
mg_handle_chunked	mongoose.c	/^MG_INTERNAL size_t mg_handle_chunked(struct mg_connection *nc,$/;"	f
mg_handle_delete	mongoose.c	/^MG_INTERNAL void mg_handle_delete(struct mg_connection *nc,$/;"	f
mg_handle_incoming_websocket_frame	mongoose.c	/^static void mg_handle_incoming_websocket_frame(struct mg_connection *nc,$/;"	f	file:
mg_handle_lock	mongoose.c	/^MG_INTERNAL void mg_handle_lock(struct mg_connection *nc, const char *path) {$/;"	f
mg_handle_mkcol	mongoose.c	/^MG_INTERNAL void mg_handle_mkcol(struct mg_connection *nc, const char *path,$/;"	f
mg_handle_move	mongoose.c	/^MG_INTERNAL void mg_handle_move(struct mg_connection *c,$/;"	f
mg_handle_propfind	mongoose.c	/^MG_INTERNAL void mg_handle_propfind(struct mg_connection *nc, const char *path,$/;"	f
mg_handle_put	mongoose.c	/^MG_INTERNAL void mg_handle_put(struct mg_connection *nc, const char *path,$/;"	f
mg_handle_recv	mongoose.c	/^static void mg_handle_recv(struct mg_connection *nc) {$/;"	f	file:
mg_handle_send	mongoose.c	/^static void mg_handle_send(struct mg_connection *nc) {$/;"	f	file:
mg_handle_ssi_request	mongoose.c	/^MG_INTERNAL void mg_handle_ssi_request(struct mg_connection *nc,$/;"	f
mg_handle_tcp_read	mongoose.c	/^static void mg_handle_tcp_read(struct mg_connection *conn) {$/;"	f	file:
mg_handle_udp_read	mongoose.c	/^static void mg_handle_udp_read(struct mg_connection *nc) {$/;"	f	file:
mg_hash_sha1_v	mongoose.c	/^static void mg_hash_sha1_v(size_t num_msgs, const uint8_t *msgs[],$/;"	f	file:
mg_hexdump	mongoose.c	/^int mg_hexdump(const void *buf, int len, char *dst, int dst_len) {$/;"	f
mg_hexdump_connection	mongoose.c	/^void mg_hexdump_connection(struct mg_connection *nc, const char *path,$/;"	f
mg_hexdump_n	mongoose.c	/^static int mg_hexdump_n(const void *buf, int len, char *dst, int dst_len,$/;"	f	file:
mg_hexdumpf	mongoose.c	/^void mg_hexdumpf(FILE *fp, const void *buf, int len) {$/;"	f
mg_http_call_endpoint_handler	mongoose.c	/^static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,$/;"	f	file:
mg_http_check_digest_auth	mongoose.c	/^int mg_http_check_digest_auth(struct http_message *hm, const char *auth_domain,$/;"	f
mg_http_common_url_parse	mongoose.c	/^MG_INTERNAL int mg_http_common_url_parse(const char *url, const char *schema,$/;"	f
mg_http_conn_destructor	mongoose.c	/^static void mg_http_conn_destructor(void *proto_data) {$/;"	f	file:
mg_http_construct_etag	mongoose.c	/^static void mg_http_construct_etag(char *buf, size_t buf_len,$/;"	f	file:
mg_http_create_digest_auth_header	mongoose.c	/^int mg_http_create_digest_auth_header(char *buf, size_t buf_len,$/;"	f
mg_http_endpoint	mongoose.c	/^struct mg_http_endpoint {$/;"	s	file:
mg_http_free_proto_data_cgi	mongoose.c	/^MG_INTERNAL void mg_http_free_proto_data_cgi(struct mg_http_proto_data_cgi *d) {$/;"	f
mg_http_free_proto_data_endpoints	mongoose.c	/^static void mg_http_free_proto_data_endpoints(struct mg_http_endpoint **ep) {$/;"	f	file:
mg_http_free_proto_data_file	mongoose.c	/^static void mg_http_free_proto_data_file(struct mg_http_proto_data_file *d) {$/;"	f	file:
mg_http_free_proto_data_mp_stream	mongoose.c	/^static void mg_http_free_proto_data_mp_stream($/;"	f	file:
mg_http_free_reverse_proxy_data	mongoose.c	/^static void mg_http_free_reverse_proxy_data(struct mg_reverse_proxy_data *rpd) {$/;"	f	file:
mg_http_get_endpoint_handler	mongoose.c	/^static mg_event_handler_t mg_http_get_endpoint_handler($/;"	f	file:
mg_http_get_proto_data	mongoose.c	/^static struct mg_http_proto_data *mg_http_get_proto_data($/;"	f	file:
mg_http_get_request_len	mongoose.c	/^static int mg_http_get_request_len(const char *s, int buf_len) {$/;"	f	file:
mg_http_handle_forwarding	mongoose.c	/^static int mg_http_handle_forwarding(struct mg_connection *nc,$/;"	f	file:
mg_http_handler	mongoose.c	/^void mg_http_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f
mg_http_handler2	mongoose.c	/^static void mg_http_handler2(struct mg_connection *nc, int ev, void *ev_data,$/;"	f	file:
mg_http_multipart_begin	mongoose.c	/^static void mg_http_multipart_begin(struct mg_connection *nc,$/;"	f	file:
mg_http_multipart_call_handler	mongoose.c	/^static void mg_http_multipart_call_handler(struct mg_connection *c, int ev,$/;"	f	file:
mg_http_multipart_continue	mongoose.c	/^static void mg_http_multipart_continue(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_continue_wait_for_chunk	mongoose.c	/^static int mg_http_multipart_continue_wait_for_chunk(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_finalize	mongoose.c	/^static int mg_http_multipart_finalize(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_got_chunk	mongoose.c	/^static int mg_http_multipart_got_chunk(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_process_boundary	mongoose.c	/^static int mg_http_multipart_process_boundary(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_stream	mongoose.c	/^struct mg_http_multipart_stream {$/;"	s	file:
mg_http_multipart_stream_state	mongoose.c	/^enum mg_http_multipart_stream_state {$/;"	g	file:
mg_http_multipart_wait_for_boundary	mongoose.c	/^static int mg_http_multipart_wait_for_boundary(struct mg_connection *c) {$/;"	f	file:
mg_http_parse_chunk	mongoose.c	/^static size_t mg_http_parse_chunk(char *buf, size_t len, char **chunk_data,$/;"	f	file:
mg_http_parse_header	mongoose.c	/^int mg_http_parse_header(struct mg_str *hdr, const char *var_name, char *buf,$/;"	f
mg_http_parse_headers	mongoose.c	/^static const char *mg_http_parse_headers(const char *s, const char *end,$/;"	f	file:
mg_http_parse_range_header	mongoose.c	/^static int mg_http_parse_range_header(const struct mg_str *header, int64_t *a,$/;"	f	file:
mg_http_proto_data	mongoose.c	/^struct mg_http_proto_data {$/;"	s	file:
mg_http_proto_data_cgi	mongoose.c	/^struct mg_http_proto_data_cgi {$/;"	s	file:
mg_http_proto_data_chuncked	mongoose.c	/^struct mg_http_proto_data_chuncked {$/;"	s	file:
mg_http_proto_data_file	mongoose.c	/^struct mg_http_proto_data_file {$/;"	s	file:
mg_http_proto_data_type	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	g	file:
mg_http_reverse_proxy	mongoose.c	/^void mg_http_reverse_proxy(struct mg_connection *nc,$/;"	f
mg_http_send_digest_auth_request	mongoose.c	/^static void mg_http_send_digest_auth_request(struct mg_connection *c,$/;"	f	file:
mg_http_send_error	mongoose.c	/^void mg_http_send_error(struct mg_connection *nc, int code,$/;"	f
mg_http_send_options	mongoose.c	/^static void mg_http_send_options(struct mg_connection *nc) {$/;"	f	file:
mg_http_send_port_based_redirect	mongoose.c	/^static int mg_http_send_port_based_redirect($/;"	f	file:
mg_http_send_redirect	mongoose.c	/^void mg_http_send_redirect(struct mg_connection *nc, int status_code,$/;"	f
mg_http_serve_file	mongoose.c	/^void mg_http_serve_file(struct mg_connection *nc, struct http_message *hm,$/;"	f
mg_http_serve_file2	mongoose.c	/^static void mg_http_serve_file2(struct mg_connection *nc, const char *path,$/;"	f	file:
mg_http_transfer_file_data	mongoose.c	/^static void mg_http_transfer_file_data(struct mg_connection *nc) {$/;"	f	file:
mg_if_accept_new_conn	mongoose.c	/^struct mg_connection *mg_if_accept_new_conn(struct mg_connection *lc) {$/;"	f
mg_if_accept_tcp_cb	mongoose.c	/^void mg_if_accept_tcp_cb(struct mg_connection *nc, union socket_address *sa,$/;"	f
mg_if_connect_cb	mongoose.c	/^void mg_if_connect_cb(struct mg_connection *nc, int err) {$/;"	f
mg_if_create_iface	mongoose.c	/^struct mg_iface *mg_if_create_iface(struct mg_iface_vtable *vtable,$/;"	f
mg_if_get_conn_addr	mongoose.c	/^void mg_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_if_poll	mongoose.c	/^void mg_if_poll(struct mg_connection *nc, time_t now) {$/;"	f
mg_if_recv_tcp_cb	mongoose.c	/^void mg_if_recv_tcp_cb(struct mg_connection *nc, void *buf, int len, int own) {$/;"	f
mg_if_recv_udp_cb	mongoose.c	/^void mg_if_recv_udp_cb(struct mg_connection *nc, void *buf, int len,$/;"	f
mg_if_sent_cb	mongoose.c	/^void mg_if_sent_cb(struct mg_connection *nc, int num_sent) {$/;"	f
mg_if_timer	mongoose.c	/^void mg_if_timer(struct mg_connection *c, double now) {$/;"	f
mg_ifaces	mongoose.c	/^struct mg_iface_vtable *mg_ifaces[] = {&mg_default_iface_vtable,$/;"	v	typeref:struct:mg_iface_vtable
mg_ifaces	mongoose.c	/^struct mg_iface_vtable *mg_ifaces[] = {&mg_default_iface_vtable};$/;"	v	typeref:struct:mg_iface_vtable
mg_is_authorized	mongoose.c	/^static int mg_is_authorized(struct http_message *hm, const char *path,$/;"	f	file:
mg_is_big_endian	mongoose.c	/^int mg_is_big_endian(void) {$/;"	f
mg_is_creation_request	mongoose.c	/^static int mg_is_creation_request(const struct http_message *hm) {$/;"	f	file:
mg_is_dav_request	mongoose.c	/^MG_INTERNAL int mg_is_dav_request(const struct mg_str *s) {$/;"	f
mg_is_error	mongoose.c	/^static int mg_is_error(int n) {$/;"	f	file:
mg_is_file_hidden	mongoose.c	/^static int mg_is_file_hidden(const char *path,$/;"	f	file:
mg_is_not_modified	mongoose.c	/^MG_INTERNAL int mg_is_not_modified(struct http_message *hm, cs_stat_t *st) {$/;"	f
mg_is_ws_first_fragment	mongoose.c	/^static int mg_is_ws_first_fragment(unsigned char flags) {$/;"	f	file:
mg_is_ws_fragment	mongoose.c	/^static int mg_is_ws_fragment(unsigned char flags) {$/;"	f	file:
mg_lwip_accept_cb	mongoose.c	/^static err_t mg_lwip_accept_cb(void *arg, struct tcp_pcb *newtpcb, err_t err) {$/;"	f	file:
mg_lwip_accept_conn	mongoose.c	/^void mg_lwip_accept_conn(struct mg_connection *nc, struct tcp_pcb *tpcb) {$/;"	f
mg_lwip_conn_state	mongoose.c	/^struct mg_lwip_conn_state {$/;"	s	file:
mg_lwip_get_poll_delay_ms	mongoose.c	/^uint32_t mg_lwip_get_poll_delay_ms(struct mg_mgr *mgr) {$/;"	f
mg_lwip_handle_accept	mongoose.c	/^void mg_lwip_handle_accept(struct mg_connection *nc) {$/;"	f
mg_lwip_handle_recv_tcp	mongoose.c	/^static void mg_lwip_handle_recv_tcp(struct mg_connection *nc) {$/;"	f	file:
mg_lwip_handle_recv_udp	mongoose.c	/^static void mg_lwip_handle_recv_udp(struct mg_connection *nc) {$/;"	f	file:
mg_lwip_if_add_conn	mongoose.c	/^void mg_lwip_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_connect_tcp	mongoose.c	/^void mg_lwip_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_lwip_if_connect_udp	mongoose.c	/^void mg_lwip_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_lwip_if_create_conn	mongoose.c	/^int mg_lwip_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_destroy_conn	mongoose.c	/^void mg_lwip_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_free	mongoose.c	/^void mg_lwip_if_free(struct mg_iface *iface) {$/;"	f
mg_lwip_if_get_conn_addr	mongoose.c	/^void mg_lwip_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_lwip_if_init	mongoose.c	/^void mg_lwip_if_init(struct mg_iface *iface) {$/;"	f
mg_lwip_if_listen_tcp	mongoose.c	/^int mg_lwip_if_listen_tcp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_lwip_if_listen_udp	mongoose.c	/^int mg_lwip_if_listen_udp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_lwip_if_poll	mongoose.c	/^time_t mg_lwip_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_lwip_if_recved	mongoose.c	/^void mg_lwip_if_recved(struct mg_connection *nc, size_t len) {$/;"	f
mg_lwip_if_remove_conn	mongoose.c	/^void mg_lwip_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_sock_set	mongoose.c	/^void mg_lwip_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_lwip_if_tcp_send	mongoose.c	/^void mg_lwip_if_tcp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_lwip_if_udp_send	mongoose.c	/^void mg_lwip_if_udp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_lwip_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_lwip_iface_vtable = MG_LWIP_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_lwip_post_signal	mongoose.c	/^void mg_lwip_post_signal(enum mg_sig_type sig, struct mg_connection *nc) {$/;"	f
mg_lwip_recv_common	mongoose.c	/^static void mg_lwip_recv_common(struct mg_connection *nc, struct pbuf *p) {$/;"	f	file:
mg_lwip_send_more	mongoose.c	/^static void mg_lwip_send_more(struct mg_connection *nc) {$/;"	f	file:
mg_lwip_set_keepalive_params	mongoose.c	/^void mg_lwip_set_keepalive_params(struct mg_connection *nc, int idle,$/;"	f
mg_lwip_ssl_do_hs	mongoose.c	/^void mg_lwip_ssl_do_hs(struct mg_connection *nc) {$/;"	f
mg_lwip_ssl_recv	mongoose.c	/^void mg_lwip_ssl_recv(struct mg_connection *nc) {$/;"	f
mg_lwip_ssl_send	mongoose.c	/^void mg_lwip_ssl_send(struct mg_connection *nc) {$/;"	f
mg_lwip_tcp_conn_cb	mongoose.c	/^static err_t mg_lwip_tcp_conn_cb(void *arg, struct tcp_pcb *tpcb, err_t err) {$/;"	f	file:
mg_lwip_tcp_error_cb	mongoose.c	/^static void mg_lwip_tcp_error_cb(void *arg, err_t err) {$/;"	f	file:
mg_lwip_tcp_recv_cb	mongoose.c	/^static err_t mg_lwip_tcp_recv_cb(void *arg, struct tcp_pcb *tpcb,$/;"	f	file:
mg_lwip_tcp_sent_cb	mongoose.c	/^static err_t mg_lwip_tcp_sent_cb(void *arg, struct tcp_pcb *tpcb,$/;"	f	file:
mg_lwip_tcp_write	mongoose.c	/^int mg_lwip_tcp_write(struct mg_connection *nc, const void *data,$/;"	f
mg_lwip_udp_recv_cb	mongoose.c	/^static void mg_lwip_udp_recv_cb(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	f	file:
mg_match_prefix	mongoose.c	/^int mg_match_prefix(const char *pattern, int pattern_len, const char *str) {$/;"	f
mg_match_prefix_n	mongoose.c	/^int mg_match_prefix_n(const struct mg_str pattern, const struct mg_str str) {$/;"	f
mg_mbuf_append_base64	mongoose.c	/^void mg_mbuf_append_base64(struct mbuf *mbuf, const void *data, size_t len) {$/;"	f
mg_mbuf_append_base64_putc	mongoose.c	/^void mg_mbuf_append_base64_putc(char ch, void *user_data) {$/;"	f
mg_mgr_free	mongoose.c	/^void mg_mgr_free(struct mg_mgr *m) {$/;"	f
mg_mgr_handle_conn	mongoose.c	/^void mg_mgr_handle_conn(struct mg_connection *nc, int fd_flags, double now) {$/;"	f
mg_mgr_handle_ctl_sock	mongoose.c	/^static void mg_mgr_handle_ctl_sock(struct mg_mgr *mgr) {$/;"	f	file:
mg_mgr_init	mongoose.c	/^void mg_mgr_init(struct mg_mgr *m, void *user_data) {$/;"	f
mg_mgr_init_opt	mongoose.c	/^void mg_mgr_init_opt(struct mg_mgr *m, void *user_data,$/;"	f
mg_mgr_poll	mongoose.c	/^time_t mg_mgr_poll(struct mg_mgr *m, int timeout_ms) {$/;"	f
mg_mk_str	mongoose.c	/^struct mg_str mg_mk_str(const char *s) {$/;"	f
mg_mk_str_n	mongoose.c	/^struct mg_str mg_mk_str_n(const char *s, size_t len) {$/;"	f
mg_mkdir	mongoose.c	/^static int mg_mkdir(const char *path, uint32_t mode) {$/;"	f	file:
mg_mkmd5resp	mongoose.c	/^static void mg_mkmd5resp(const char *method, size_t method_len, const char *uri,$/;"	f	file:
mg_mqtt_add_session	mongoose.c	/^static void mg_mqtt_add_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_broker	mongoose.c	/^void mg_mqtt_broker(struct mg_connection *nc, int ev, void *data) {$/;"	f
mg_mqtt_broker_handle_connect	mongoose.c	/^static void mg_mqtt_broker_handle_connect(struct mg_mqtt_broker *brk,$/;"	f	file:
mg_mqtt_broker_handle_publish	mongoose.c	/^static void mg_mqtt_broker_handle_publish(struct mg_mqtt_broker *brk,$/;"	f	file:
mg_mqtt_broker_handle_subscribe	mongoose.c	/^static void mg_mqtt_broker_handle_subscribe(struct mg_connection *nc,$/;"	f	file:
mg_mqtt_broker_init	mongoose.c	/^void mg_mqtt_broker_init(struct mg_mqtt_broker *brk, void *user_data) {$/;"	f
mg_mqtt_close_session	mongoose.c	/^static void mg_mqtt_close_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_connack	mongoose.c	/^void mg_mqtt_connack(struct mg_connection *nc, uint8_t return_code) {$/;"	f
mg_mqtt_destroy_session	mongoose.c	/^static void mg_mqtt_destroy_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_disconnect	mongoose.c	/^void mg_mqtt_disconnect(struct mg_connection *nc) {$/;"	f
mg_mqtt_match_topic_expression	mongoose.c	/^static int mg_mqtt_match_topic_expression(const char *exp,$/;"	f	file:
mg_mqtt_next	mongoose.c	/^struct mg_mqtt_session *mg_mqtt_next(struct mg_mqtt_broker *brk,$/;"	f
mg_mqtt_next_subscribe_topic	mongoose.c	/^int mg_mqtt_next_subscribe_topic(struct mg_mqtt_message *msg,$/;"	f
mg_mqtt_ping	mongoose.c	/^void mg_mqtt_ping(struct mg_connection *nc) {$/;"	f
mg_mqtt_pong	mongoose.c	/^void mg_mqtt_pong(struct mg_connection *nc) {$/;"	f
mg_mqtt_prepend_header	mongoose.c	/^static void mg_mqtt_prepend_header(struct mg_connection *nc, uint8_t cmd,$/;"	f	file:
mg_mqtt_proto_data_destructor	mongoose.c	/^static void mg_mqtt_proto_data_destructor(void *proto_data) {$/;"	f	file:
mg_mqtt_puback	mongoose.c	/^void mg_mqtt_puback(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_pubcomp	mongoose.c	/^void mg_mqtt_pubcomp(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_publish	mongoose.c	/^void mg_mqtt_publish(struct mg_connection *nc, const char *topic,$/;"	f
mg_mqtt_pubrec	mongoose.c	/^void mg_mqtt_pubrec(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_pubrel	mongoose.c	/^void mg_mqtt_pubrel(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_remove_session	mongoose.c	/^static void mg_mqtt_remove_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_session_init	mongoose.c	/^static void mg_mqtt_session_init(struct mg_mqtt_broker *brk,$/;"	f	file:
mg_mqtt_suback	mongoose.c	/^void mg_mqtt_suback(struct mg_connection *nc, uint8_t *qoss, size_t qoss_len,$/;"	f
mg_mqtt_subscribe	mongoose.c	/^void mg_mqtt_subscribe(struct mg_connection *nc,$/;"	f
mg_mqtt_unsuback	mongoose.c	/^void mg_mqtt_unsuback(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_unsubscribe	mongoose.c	/^void mg_mqtt_unsubscribe(struct mg_connection *nc, char **topics,$/;"	f
mg_ncasecmp	mongoose.c	/^int mg_ncasecmp(const char *s1, const char *s2, size_t len) {$/;"	f
mg_next	mongoose.c	/^struct mg_connection *mg_next(struct mg_mgr *s, struct mg_connection *conn) {$/;"	f
mg_next_comma_list_entry	mongoose.c	/^const char *mg_next_comma_list_entry(const char *list, struct mg_str *val,$/;"	f
mg_normalize_uri_path	mongoose.c	/^int mg_normalize_uri_path(const struct mg_str *in, struct mg_str *out) {$/;"	f
mg_ntp_to_tv	mongoose.c	/^static void mg_ntp_to_tv(uint64_t val, struct timeval *tv) {$/;"	f	file:
mg_num_ifaces	mongoose.c	/^int mg_num_ifaces = (int) (sizeof(mg_ifaces) \/ sizeof(mg_ifaces[0]));$/;"	v
mg_num_leap_years	mongoose.c	/^static int mg_num_leap_years(int year) {$/;"	f	file:
mg_open	mongoose.c	/^int mg_open(const char *path, int flag, int mode) { \/* LCOV_EXCL_LINE *\/$/;"	f
mg_open_listening_socket	mongoose.c	/^static sock_t mg_open_listening_socket(union socket_address *sa, int type,$/;"	f	file:
mg_parse_address	mongoose.c	/^MG_INTERNAL int mg_parse_address(const char *str, union socket_address *sa,$/;"	f
mg_parse_date_string	mongoose.c	/^MG_INTERNAL time_t mg_parse_date_string(const char *datetime) {$/;"	f
mg_parse_dns	mongoose.c	/^int mg_parse_dns(const char *buf, int len, struct mg_dns_message *msg) {$/;"	f
mg_parse_dns_resource_record	mongoose.c	/^static unsigned char *mg_parse_dns_resource_record($/;"	f	file:
mg_parse_http	mongoose.c	/^int mg_parse_http(const char *s, int n, struct http_message *hm, int is_req) {$/;"	f
mg_parse_http_basic_auth	mongoose.c	/^int mg_parse_http_basic_auth(struct mg_str *hdr, char *user, size_t user_len,$/;"	f
mg_parse_multipart	mongoose.c	/^size_t mg_parse_multipart(const char *buf, size_t buf_len, char *var_name,$/;"	f
mg_parse_uri	mongoose.c	/^int mg_parse_uri(struct mg_str uri, struct mg_str *scheme,$/;"	f
mg_pic32_if_add_conn	mongoose.c	/^void mg_pic32_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_connect_tcp	mongoose.c	/^void mg_pic32_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_pic32_if_connect_udp	mongoose.c	/^void mg_pic32_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_pic32_if_create_conn	mongoose.c	/^int mg_pic32_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_destroy_conn	mongoose.c	/^void mg_pic32_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_free	mongoose.c	/^void mg_pic32_if_free(struct mg_iface *iface) {$/;"	f
mg_pic32_if_get_conn_addr	mongoose.c	/^void mg_pic32_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_pic32_if_init	mongoose.c	/^void mg_pic32_if_init(struct mg_iface *iface) {$/;"	f
mg_pic32_if_listen_tcp	mongoose.c	/^int mg_pic32_if_listen_tcp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_pic32_if_listen_udp	mongoose.c	/^int mg_pic32_if_listen_udp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_pic32_if_poll	mongoose.c	/^time_t mg_pic32_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_pic32_if_recved	mongoose.c	/^void mg_pic32_if_recved(struct mg_connection *nc, size_t len) {$/;"	f
mg_pic32_if_remove_conn	mongoose.c	/^void mg_pic32_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_sock_set	mongoose.c	/^void mg_pic32_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_pic32_if_tcp_send	mongoose.c	/^void mg_pic32_if_tcp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_pic32_if_udp_send	mongoose.c	/^void mg_pic32_if_udp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_pic32_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_pic32_iface_vtable = MG_PIC32_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_prepare_cgi_environment	mongoose.c	/^static void mg_prepare_cgi_environment(struct mg_connection *nc,$/;"	f	file:
mg_print_dir_entry	mongoose.c	/^static void mg_print_dir_entry(struct mg_connection *nc, const char *file_name,$/;"	f	file:
mg_print_props	mongoose.c	/^static void mg_print_props(struct mg_connection *nc, const char *name,$/;"	f	file:
mg_printf	mongoose.c	/^int mg_printf(struct mg_connection *conn, const char *fmt, ...) {$/;"	f
mg_printf_html_escape	mongoose.c	/^void mg_printf_html_escape(struct mg_connection *nc, const char *fmt, ...) {$/;"	f
mg_printf_http_chunk	mongoose.c	/^void mg_printf_http_chunk(struct mg_connection *nc, const char *fmt, ...) {$/;"	f
mg_printf_websocket_frame	mongoose.c	/^void mg_printf_websocket_frame(struct mg_connection *nc, int op,$/;"	f
mg_pull_from_stdout	mongoose.c	/^static void *mg_pull_from_stdout(void *arg) {$/;"	f	file:
mg_push_to_stdin	mongoose.c	/^static void *mg_push_to_stdin(void *arg) {$/;"	f	file:
mg_q_msg	mongoose.c	/^struct mg_q_msg {$/;"	s	file:
mg_q_msg_type	mongoose.c	/^enum mg_q_msg_type {$/;"	g	file:
mg_recv_common	mongoose.c	/^MG_INTERNAL void mg_recv_common(struct mg_connection *nc, void *buf, int len,$/;"	f
mg_recvfrom	mongoose.c	/^static int mg_recvfrom(struct mg_connection *nc, union socket_address *sa,$/;"	f	file:
mg_register_http_endpoint	mongoose.c	/^void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,$/;"	f
mg_remove_conn	mongoose.c	/^MG_INTERNAL void mg_remove_conn(struct mg_connection *conn) {$/;"	f
mg_remove_directory	mongoose.c	/^static int mg_remove_directory(const struct mg_serve_http_opts *opts,$/;"	f	file:
mg_resolve	mongoose.c	/^int mg_resolve(const char *host, char *buf, size_t n) {$/;"	f
mg_resolve2	mongoose.c	/^static int mg_resolve2(const char *host, struct in_addr *ina) {$/;"	f	file:
mg_resolve_async	mongoose.c	/^int mg_resolve_async(struct mg_mgr *mgr, const char *name, int query,$/;"	f
mg_resolve_async_eh	mongoose.c	/^static void mg_resolve_async_eh(struct mg_connection *nc, int ev, void *data) {$/;"	f	file:
mg_resolve_async_opt	mongoose.c	/^int mg_resolve_async_opt(struct mg_mgr *mgr, const char *name, int query,$/;"	f
mg_resolve_async_request	mongoose.c	/^struct mg_resolve_async_request {$/;"	s	file:
mg_resolve_from_hosts_file	mongoose.c	/^int mg_resolve_from_hosts_file(const char *name, union socket_address *usa) {$/;"	f
mg_reverse_proxy_data	mongoose.c	/^struct mg_reverse_proxy_data {$/;"	s	file:
mg_reverse_proxy_handler	mongoose.c	/^static void mg_reverse_proxy_handler(struct mg_connection *nc, int ev,$/;"	f	file:
mg_run_in_task	mongoose.c	/^void mg_run_in_task(void (*cb)(struct mg_mgr *mgr, void *arg), void *cb_arg) {$/;"	f
mg_s_cipher_list	mongoose.c	/^static const char mg_s_cipher_list[] =$/;"	v	file:
mg_s_cipher_list	mongoose.c	/^static const int mg_s_cipher_list[] = {$/;"	v	file:
mg_s_default_dh_params	mongoose.c	/^static const char mg_s_default_dh_params[] =$/;"	v	file:
mg_scan_directory	mongoose.c	/^static void mg_scan_directory(struct mg_connection *nc, const char *dir,$/;"	f	file:
mg_send	mongoose.c	/^void mg_send(struct mg_connection *nc, const void *buf, int len) {$/;"	f
mg_send_directory_listing	mongoose.c	/^static void mg_send_directory_listing(struct mg_connection *nc, const char *dir,$/;"	f	file:
mg_send_dns_query	mongoose.c	/^void mg_send_dns_query(struct mg_connection *nc, const char *name,$/;"	f
mg_send_file_data	mongoose.c	/^static void mg_send_file_data(struct mg_connection *nc, FILE *fp) {$/;"	f	file:
mg_send_head	mongoose.c	/^void mg_send_head(struct mg_connection *c, int status_code,$/;"	f
mg_send_http_chunk	mongoose.c	/^void mg_send_http_chunk(struct mg_connection *nc, const char *buf, size_t len) {$/;"	f
mg_send_http_file	mongoose.c	/^MG_INTERNAL void mg_send_http_file(struct mg_connection *nc, char *path,$/;"	f
mg_send_js	mongoose.c	/^static enum v7_err mg_send_js(struct v7 *v7, v7_val_t *res) {$/;"	f	file:
mg_send_mqtt_handshake	mongoose.c	/^void mg_send_mqtt_handshake(struct mg_connection *nc, const char *client_id) {$/;"	f
mg_send_mqtt_handshake_opt	mongoose.c	/^void mg_send_mqtt_handshake_opt(struct mg_connection *nc, const char *client_id,$/;"	f
mg_send_mqtt_short_command	mongoose.c	/^static void mg_send_mqtt_short_command(struct mg_connection *nc, uint8_t cmd,$/;"	f	file:
mg_send_response_line	mongoose.c	/^void mg_send_response_line(struct mg_connection *nc, int status_code,$/;"	f
mg_send_response_line_s	mongoose.c	/^void mg_send_response_line_s(struct mg_connection *nc, int status_code,$/;"	f
mg_send_ssi_file	mongoose.c	/^static void mg_send_ssi_file(struct mg_connection *nc, struct http_message *hm,$/;"	f	file:
mg_send_websocket_frame	mongoose.c	/^void mg_send_websocket_frame(struct mg_connection *nc, int op, const void *data,$/;"	f
mg_send_websocket_framev	mongoose.c	/^void mg_send_websocket_framev(struct mg_connection *nc, int op,$/;"	f
mg_send_websocket_handshake	mongoose.c	/^void mg_send_websocket_handshake(struct mg_connection *nc, const char *path,$/;"	f
mg_send_websocket_handshake2	mongoose.c	/^void mg_send_websocket_handshake2(struct mg_connection *nc, const char *path,$/;"	f
mg_send_websocket_handshake3	mongoose.c	/^void mg_send_websocket_handshake3(struct mg_connection *nc, const char *path,$/;"	f
mg_send_ws_header	mongoose.c	/^static void mg_send_ws_header(struct mg_connection *nc, int op, size_t len,$/;"	f	file:
mg_serve_http	mongoose.c	/^void mg_serve_http(struct mg_connection *nc, struct http_message *hm,$/;"	f
mg_set_cipher_list	mongoose.c	/^static enum mg_ssl_if_result mg_set_cipher_list(SSL_CTX *ctx, const char *cl) {$/;"	f	file:
mg_set_cipher_list	mongoose.c	/^static enum mg_ssl_if_result mg_set_cipher_list(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_set_close_on_exec	mongoose.c	/^void mg_set_close_on_exec(sock_t sock) {$/;"	f
mg_set_non_blocking_mode	mongoose.c	/^void mg_set_non_blocking_mode(sock_t sock) {$/;"	f
mg_set_protocol_coap	mongoose.c	/^int mg_set_protocol_coap(struct mg_connection *nc) {$/;"	f
mg_set_protocol_dns	mongoose.c	/^void mg_set_protocol_dns(struct mg_connection *nc) {$/;"	f
mg_set_protocol_http_websocket	mongoose.c	/^void mg_set_protocol_http_websocket(struct mg_connection *nc) {$/;"	f
mg_set_protocol_mqtt	mongoose.c	/^void mg_set_protocol_mqtt(struct mg_connection *nc) {$/;"	f
mg_set_protocol_sntp	mongoose.c	/^int mg_set_protocol_sntp(struct mg_connection *c) {$/;"	f
mg_set_ssl	mongoose.c	/^const char *mg_set_ssl(struct mg_connection *nc, const char *cert,$/;"	f
mg_set_timer	mongoose.c	/^double mg_set_timer(struct mg_connection *c, double timestamp) {$/;"	f
mg_sig_type	mongoose.c	/^enum mg_sig_type {$/;"	g	file:
mg_simplelink_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_simplelink_iface_vtable = MG_SL_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_skip	mongoose.c	/^const char *mg_skip(const char *s, const char *end, const char *delims,$/;"	f
mg_sl_if_add_conn	mongoose.c	/^void mg_sl_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_connect_tcp	mongoose.c	/^void mg_sl_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_sl_if_connect_udp	mongoose.c	/^void mg_sl_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_sl_if_create_conn	mongoose.c	/^int mg_sl_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_destroy_conn	mongoose.c	/^void mg_sl_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_free	mongoose.c	/^void mg_sl_if_free(struct mg_iface *iface) {$/;"	f
mg_sl_if_get_conn_addr	mongoose.c	/^void mg_sl_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_sl_if_init	mongoose.c	/^void mg_sl_if_init(struct mg_iface *iface) {$/;"	f
mg_sl_if_listen_tcp	mongoose.c	/^int mg_sl_if_listen_tcp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_sl_if_listen_udp	mongoose.c	/^int mg_sl_if_listen_udp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_sl_if_poll	mongoose.c	/^time_t mg_sl_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_sl_if_recved	mongoose.c	/^void mg_sl_if_recved(struct mg_connection *nc, size_t len) {$/;"	f
mg_sl_if_remove_conn	mongoose.c	/^void mg_sl_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_sock_set	mongoose.c	/^void mg_sl_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_sl_if_tcp_send	mongoose.c	/^void mg_sl_if_tcp_send(struct mg_connection *nc, const void *buf, size_t len) {$/;"	f
mg_sl_if_udp_send	mongoose.c	/^void mg_sl_if_udp_send(struct mg_connection *nc, const void *buf, size_t len) {$/;"	f
mg_sntp_connect	mongoose.c	/^struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr,$/;"	f
mg_sntp_get_time	mongoose.c	/^struct mg_connection *mg_sntp_get_time(struct mg_mgr *mgr,$/;"	f
mg_sntp_handler	mongoose.c	/^static void mg_sntp_handler(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
mg_sntp_parse_reply	mongoose.c	/^MG_INTERNAL int mg_sntp_parse_reply(const char *buf, int len,$/;"	f
mg_sntp_send_request	mongoose.c	/^void mg_sntp_send_request(struct mg_connection *c) {$/;"	f
mg_sntp_util_ev_handler	mongoose.c	/^static void mg_sntp_util_ev_handler(struct mg_connection *c, int ev,$/;"	f	file:
mg_sock_addr_to_str	mongoose.c	/^void mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,$/;"	f
mg_sock_get_addr	mongoose.c	/^static void mg_sock_get_addr(sock_t sock, int remote,$/;"	f	file:
mg_sock_set	mongoose.c	/^void mg_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_sock_to_str	mongoose.c	/^void mg_sock_to_str(sock_t sock, char *buf, size_t len, int flags) {$/;"	f
mg_socket_if_add_conn	mongoose.c	/^void mg_socket_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_connect_tcp	mongoose.c	/^void mg_socket_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_socket_if_connect_udp	mongoose.c	/^void mg_socket_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_socket_if_create_conn	mongoose.c	/^int mg_socket_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_destroy_conn	mongoose.c	/^void mg_socket_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_free	mongoose.c	/^void mg_socket_if_free(struct mg_iface *iface) {$/;"	f
mg_socket_if_get_conn_addr	mongoose.c	/^void mg_socket_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_socket_if_init	mongoose.c	/^void mg_socket_if_init(struct mg_iface *iface) {$/;"	f
mg_socket_if_listen_tcp	mongoose.c	/^int mg_socket_if_listen_tcp(struct mg_connection *nc,$/;"	f
mg_socket_if_listen_udp	mongoose.c	/^int mg_socket_if_listen_udp(struct mg_connection *nc,$/;"	f
mg_socket_if_poll	mongoose.c	/^time_t mg_socket_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_socket_if_recved	mongoose.c	/^void mg_socket_if_recved(struct mg_connection *nc, size_t len) {$/;"	f
mg_socket_if_remove_conn	mongoose.c	/^void mg_socket_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_sock_set	mongoose.c	/^void mg_socket_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_socket_if_tcp_send	mongoose.c	/^void mg_socket_if_tcp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_socket_if_udp_send	mongoose.c	/^void mg_socket_if_udp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_socket_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_socket_iface_vtable = MG_SOCKET_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_socketpair	mongoose.c	/^int mg_socketpair(sock_t sp[2], int sock_type) {$/;"	f
mg_spawn_stdio_thread	mongoose.c	/^static void mg_spawn_stdio_thread(sock_t sock, HANDLE hPipe,$/;"	f	file:
mg_ssl_begin	mongoose.c	/^static void mg_ssl_begin(struct mg_connection *nc) {$/;"	f	file:
mg_ssl_if_conn_accept	mongoose.c	/^enum mg_ssl_if_result mg_ssl_if_conn_accept(struct mg_connection *nc,$/;"	f
mg_ssl_if_conn_free	mongoose.c	/^void mg_ssl_if_conn_free(struct mg_connection *nc) {$/;"	f
mg_ssl_if_conn_init	mongoose.c	/^enum mg_ssl_if_result mg_ssl_if_conn_init($/;"	f
mg_ssl_if_ctx	mongoose.c	/^struct mg_ssl_if_ctx {$/;"	s	file:
mg_ssl_if_handshake	mongoose.c	/^enum mg_ssl_if_result mg_ssl_if_handshake(struct mg_connection *nc) {$/;"	f
mg_ssl_if_init	mongoose.c	/^void mg_ssl_if_init() {$/;"	f
mg_ssl_if_mbed_err	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_mbed_err(struct mg_connection *nc,$/;"	f	file:
mg_ssl_if_mbed_free_certs_and_keys	mongoose.c	/^static void mg_ssl_if_mbed_free_certs_and_keys(struct mg_ssl_if_ctx *ctx) {$/;"	f	file:
mg_ssl_if_mbed_random	mongoose.c	/^int mg_ssl_if_mbed_random(void *ctx, unsigned char *buf, size_t len) {$/;"	f
mg_ssl_if_mbed_set_psk	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_mbed_set_psk(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_ssl_if_ossl_psk_cb	mongoose.c	/^static unsigned int mg_ssl_if_ossl_psk_cb(SSL *ssl, const char *hint,$/;"	f	file:
mg_ssl_if_ossl_set_psk	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_ossl_set_psk(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_ssl_if_read	mongoose.c	/^int mg_ssl_if_read(struct mg_connection *nc, void *buf, size_t buf_size) {$/;"	f
mg_ssl_if_ssl_err	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_ssl_err(struct mg_connection *nc,$/;"	f	file:
mg_ssl_if_write	mongoose.c	/^int mg_ssl_if_write(struct mg_connection *nc, const void *data, size_t len) {$/;"	f
mg_ssl_mbed_log	mongoose.c	/^static void mg_ssl_mbed_log(void *ctx, int level, const char *file, int line,$/;"	f	file:
mg_start_process	mongoose.c	/^static int mg_start_process(const char *interp, const char *cmd,$/;"	f	file:
mg_start_task	mongoose.c	/^bool mg_start_task(int priority, int stack_size, mg_init_cb mg_init) {$/;"	f
mg_start_thread	mongoose.c	/^void *mg_start_thread(void *(*f)(void *), void *p) {$/;"	f
mg_stat	mongoose.c	/^int mg_stat(const char *path, cs_stat_t *st) {$/;"	f
mg_static_builtin_mime_types	mongoose.c	/^} mg_static_builtin_mime_types[] = {$/;"	v	typeref:struct:__anon4	file:
mg_status_message	mongoose.c	/^const char *mg_status_message(int status_code) {$/;"	f
mg_strcmp	mongoose.c	/^int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {$/;"	f
mg_strdup	mongoose.c	/^struct mg_str mg_strdup(const struct mg_str s) {$/;"	f
mg_strncmp	mongoose.c	/^int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n) {$/;"	f
mg_task	mongoose.c	/^static void mg_task(void *arg) {$/;"	f	file:
mg_threadparam	mongoose.c	/^struct mg_threadparam {$/;"	s	file:
mg_time	mongoose.c	/^double mg_time(void) {$/;"	f
mg_tun_bind_opt	mongoose.c	/^struct mg_connection *mg_tun_bind_opt(struct mg_mgr *mgr,$/;"	f
mg_tun_client	mongoose.c	/^struct mg_tun_client {$/;"	s	file:
mg_tun_client_handler	mongoose.c	/^static void mg_tun_client_handler(struct mg_connection *nc, int ev,$/;"	f	file:
mg_tun_close_all	mongoose.c	/^static void mg_tun_close_all(struct mg_tun_client *client) {$/;"	f	file:
mg_tun_create_client	mongoose.c	/^static struct mg_tun_client *mg_tun_create_client(struct mg_mgr *mgr,$/;"	f	file:
mg_tun_destroy_client	mongoose.c	/^void mg_tun_destroy_client(struct mg_tun_client *client) {$/;"	f
mg_tun_do_bind	mongoose.c	/^static struct mg_connection *mg_tun_do_bind(struct mg_tun_client *client,$/;"	f	file:
mg_tun_do_reconnect	mongoose.c	/^static void mg_tun_do_reconnect(struct mg_tun_client *client) {$/;"	f	file:
mg_tun_frame	mongoose.c	/^struct mg_tun_frame {$/;"	s	file:
mg_tun_if_add_conn	mongoose.c	/^void mg_tun_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_tun_if_connect_tcp	mongoose.c	/^void mg_tun_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_tun_if_connect_udp	mongoose.c	/^void mg_tun_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_tun_if_create_conn	mongoose.c	/^int mg_tun_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_tun_if_destroy_conn	mongoose.c	/^void mg_tun_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_tun_if_find_conn	mongoose.c	/^struct mg_connection *mg_tun_if_find_conn(struct mg_tun_client *client,$/;"	f
mg_tun_if_free	mongoose.c	/^void mg_tun_if_free(struct mg_iface *iface) {$/;"	f
mg_tun_if_get_conn_addr	mongoose.c	/^void mg_tun_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_tun_if_init	mongoose.c	/^void mg_tun_if_init(struct mg_iface *iface) {$/;"	f
mg_tun_if_listen_tcp	mongoose.c	/^int mg_tun_if_listen_tcp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_tun_if_listen_udp	mongoose.c	/^int mg_tun_if_listen_udp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_tun_if_poll	mongoose.c	/^time_t mg_tun_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_tun_if_recved	mongoose.c	/^void mg_tun_if_recved(struct mg_connection *nc, size_t len) {$/;"	f
mg_tun_if_remove_conn	mongoose.c	/^void mg_tun_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_tun_if_sock_set	mongoose.c	/^void mg_tun_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_tun_if_tcp_send	mongoose.c	/^void mg_tun_if_tcp_send(struct mg_connection *nc, const void *buf, size_t len) {$/;"	f
mg_tun_if_udp_send	mongoose.c	/^void mg_tun_if_udp_send(struct mg_connection *nc, const void *buf, size_t len) {$/;"	f
mg_tun_iface_vtable	mongoose.c	/^struct mg_iface_vtable mg_tun_iface_vtable = MG_TUN_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_tun_init_client	mongoose.c	/^static void mg_tun_init_client(struct mg_tun_client *client, struct mg_mgr *mgr,$/;"	f	file:
mg_tun_log_frame	mongoose.c	/^void mg_tun_log_frame(struct mg_tun_frame *frame) {$/;"	f
mg_tun_parse_frame	mongoose.c	/^int mg_tun_parse_frame(void *data, size_t len, struct mg_tun_frame *frame) {$/;"	f
mg_tun_reconnect	mongoose.c	/^static void mg_tun_reconnect(struct mg_tun_client *client, int timeout) {$/;"	f	file:
mg_tun_reconnect_ev_handler	mongoose.c	/^void mg_tun_reconnect_ev_handler(struct mg_connection *nc, int ev,$/;"	f
mg_tun_send_frame	mongoose.c	/^void mg_tun_send_frame(struct mg_connection *ws, uint32_t stream_id,$/;"	f
mg_tun_ssl_opts	mongoose.c	/^struct mg_tun_ssl_opts {$/;"	s	file:
mg_uri_to_local_path	mongoose.c	/^MG_INTERNAL int mg_uri_to_local_path(struct http_message *hm,$/;"	f
mg_url_decode	mongoose.c	/^int mg_url_decode(const char *src, int src_len, char *dst, int dst_len,$/;"	f
mg_url_encode	mongoose.c	/^static size_t mg_url_encode(const char *src, size_t s_len, char *dst,$/;"	f	file:
mg_use_ca_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_ca_cert(SSL_CTX *ctx, const char *cert) {$/;"	f	file:
mg_use_ca_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_ca_cert(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_use_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_cert(SSL_CTX *ctx, const char *cert,$/;"	f	file:
mg_use_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_cert(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_vcasecmp	mongoose.c	/^int mg_vcasecmp(const struct mg_str *str1, const char *str2) {$/;"	f
mg_vcmp	mongoose.c	/^int mg_vcmp(const struct mg_str *str1, const char *str2) {$/;"	f
mg_version_header	mongoose.c	/^static const char *mg_version_header = "Mongoose\/" MG_VERSION;$/;"	v	file:
mg_vprintf	mongoose.c	/^int mg_vprintf(struct mg_connection *nc, const char *fmt, va_list ap) {$/;"	f
mg_wait_until_ready	mongoose.c	/^static int mg_wait_until_ready(sock_t sock, int for_read) {$/;"	f	file:
mg_write_to_socket	mongoose.c	/^static void mg_write_to_socket(struct mg_connection *nc) {$/;"	f	file:
mg_ws_handler	mongoose.c	/^MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev,$/;"	f
mg_ws_handshake	mongoose.c	/^MG_INTERNAL void mg_ws_handshake(struct mg_connection *nc,$/;"	f
mg_ws_mask_frame	mongoose.c	/^static void mg_ws_mask_frame(struct mbuf *mbuf, struct ws_mask_ctx *ctx) {$/;"	f	file:
mg_ws_random_mask	mongoose.c	/^static uint32_t mg_ws_random_mask(void) {$/;"	f	file:
mgos_lock	mongoose.c	13786;"	d	file:
mgos_unlock	mongoose.c	13787;"	d	file:
mgr	mongoose.c	/^  struct mg_mgr *mgr;$/;"	m	struct:mg_tun_client	typeref:struct:mg_tun_client::mg_mgr	file:
mime_type	mongoose.c	/^  const char *mime_type;$/;"	m	struct:__anon4	file:
mkdir	mongoose.c	/^int mkdir(const char *path, mode_t mode) {$/;"	f
mode_t	mongoose.h	/^typedef unsigned int mode_t;$/;"	t
mp_stream	mongoose.c	/^  struct mg_http_multipart_stream mp_stream;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_multipart_stream	file:
mqtt_handler	mongoose.c	/^static void mqtt_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
name	DPrint.cpp	/^    char const* name;$/;"	m	struct:__anon2	file:
name	alsa.c	/^        const char *name;$/;"	m	struct:transfer_method	file:
name	alsa.cpp	/^        const char *name;$/;"	m	struct:transfer_method	file:
name	mongoose.c	/^  char *name;$/;"	m	struct:sl_file_size_hint	file:
name	mongoose.c	/^  char name[1024];$/;"	m	struct:mg_resolve_async_request	file:
name	mongoose.c	/^  const char *name;$/;"	m	struct:mg_http_endpoint	file:
name	playAudio.cpp	/^        const char *name;$/;"	m	struct:transfer_method	file:
name_len	mongoose.c	/^  size_t name_len;$/;"	m	struct:mg_http_endpoint	file:
names	DPrint.cpp	/^} const names[] =$/;"	v	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_cgi_env_block	typeref:struct:mg_cgi_env_block::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_ev_mgr_lwip_signal	typeref:struct:mg_ev_mgr_lwip_signal::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_lwip_conn_state	typeref:struct:mg_lwip_conn_state::mg_connection	file:
next	mongoose.c	/^  struct mg_http_endpoint *next;$/;"	m	struct:mg_http_endpoint	typeref:struct:mg_http_endpoint::mg_http_endpoint	file:
notifyObserver	AlertsSystemClient.cpp	/^void CAlertsSystemClient :: notifyObserver ()$/;"	f	class:CAlertsSystemClient
num_answers	mongoose.c	/^  uint16_t num_answers;$/;"	m	struct:mg_dns_header	file:
num_authority_prs	mongoose.c	/^  uint16_t num_authority_prs;$/;"	m	struct:mg_dns_header	file:
num_other_prs	mongoose.c	/^  uint16_t num_other_prs;$/;"	m	struct:mg_dns_header	file:
num_questions	mongoose.c	/^  uint16_t num_questions;$/;"	m	struct:mg_dns_header	file:
num_recd	mongoose.c	/^  size_t num_recd;$/;"	m	struct:file_upload_state	file:
num_sent	mongoose.c	/^  size_t num_sent; \/* Number of acknowledged bytes to be reported to the core *\/$/;"	m	struct:mg_lwip_conn_state	file:
nvars	mongoose.c	/^  int nvars;                               \/* Number of variables in envp[] *\/$/;"	m	struct:mg_cgi_env_block	file:
onActiveAlert	AlsaAlertOutput.cpp	/^void CAlsaAlertOutput :: onActiveAlert ()$/;"	f	class:CAlsaAlertOutput
open	DPrint.cpp	/^bool SysLog::open()$/;"	f	class:__anon1::SysLog
open	mongoose.c	/^int open(const char *filename, int oflag, int pmode) {$/;"	f
open	mongoose.c	/^int open(const char *pathname, unsigned flags, int mode) {$/;"	f
opendir	mongoose.c	/^DIR *opendir(const char *dir_name) {$/;"	f
opendir	mongoose.c	/^DIR *opendir(const char *name) {$/;"	f
operator <<	DPrint.cpp	/^std::ostream& operator<<( std::ostream& os, DPrint::Limit const& s )$/;"	f
operator =	DPrint.cpp	/^DPrint& DPrint::operator=( const DPrint& that )$/;"	f	class:DPrint
output	alsa.c	/^static snd_output_t *output = NULL;$/;"	v	file:
output	alsa.cpp	/^static snd_output_t *output = NULL;$/;"	v	file:
output	playAudio.cpp	/^static snd_output_t *output = NULL;$/;"	v	file:
p_	DPrint_.h	/^        char const* p_;$/;"	m	struct:DPrint::Limit
parseMsg	main.cpp	/^int parseMsg(char *Msg)$/;"	f
parse_mqtt	mongoose.c	/^MG_INTERNAL int parse_mqtt(struct mbuf *io, struct mg_mqtt_message *mm) {$/;"	f
parse_net	mongoose.c	/^static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {$/;"	f	file:
parse_uri_component	mongoose.c	/^static void parse_uri_component(const char **p, const char *end, char sep,$/;"	f	file:
pcb	mongoose.c	/^  } pcb;$/;"	m	struct:mg_lwip_conn_state	typeref:union:mg_lwip_conn_state::__anon5	file:
pclose	mongoose.h	230;"	d
pem_to_der	mongoose.c	/^bool pem_to_der(const char *pem_file, const char *der_file) {$/;"	f
period_event	alsa.c	/^static int period_event = 0;                            \/* produce poll event after each period *\/$/;"	v	file:
period_event	alsa.cpp	/^static int period_event = 0;                            \/* produce poll event after each period *\/$/;"	v	file:
period_event	playAudio.cpp	/^static int period_event = 0;                            \/* produce poll event after each period *\/$/;"	v	file:
period_size	alsa.c	/^static snd_pcm_sframes_t period_size;$/;"	v	file:
period_size	alsa.cpp	/^static snd_pcm_sframes_t period_size;$/;"	v	file:
period_size	playAudio.cpp	/^static snd_pcm_sframes_t period_size;$/;"	v	file:
period_time	alsa.c	/^static unsigned int period_time = 100000;               \/* period time in us *\/$/;"	v	file:
period_time	alsa.cpp	/^static unsigned int period_time = 100000;               \/* period time in us *\/$/;"	v	file:
period_time	playAudio.cpp	/^static unsigned int period_time = 100000;               \/* period time in us *\/$/;"	v	file:
phase	alsa.c	/^        double phase;$/;"	m	struct:async_private_data	file:
phase	alsa.cpp	/^        double phase;$/;"	m	struct:async_private_data	file:
phase	playAudio.cpp	/^        double phase;$/;"	m	struct:async_private_data	file:
pid_t	mongoose.h	264;"	d
play	playAudio.cpp	/^static int play = 0;$/;"	v	file:
playAlert	playAudio.cpp	/^int playAlert()$/;"	f
popen	mongoose.h	229;"	d
pos	mongoose.c	/^  _off_t pos;$/;"	m	struct:sl_fd_info	file:
pos	mongoose.c	/^  size_t pos; \/* zero means unmasked *\/$/;"	m	struct:ws_mask_ctx	file:
prev_io_len	mongoose.c	/^  int prev_io_len;$/;"	m	struct:mg_http_multipart_stream	file:
priority	DPrint.cpp	/^int SysLog::priority( DPrint::Level level )$/;"	f	class:__anon1::SysLog
processing_part	mongoose.c	/^  int processing_part;$/;"	m	struct:mg_http_multipart_stream	file:
psk	mongoose.c	/^  struct mbuf psk;$/;"	m	struct:mg_ssl_if_ctx	typeref:struct:mg_ssl_if_ctx::mbuf	file:
query	mongoose.c	/^  int query;$/;"	m	struct:mg_resolve_async_request	file:
rate	alsa.c	/^static unsigned int rate = 44100;                       \/* stream rate *\/$/;"	v	file:
rate	alsa.cpp	/^static unsigned int rate = 44100;                       \/* stream rate *\/$/;"	v	file:
rate	playAudio.cpp	/^static unsigned int rate = 44100;                       \/* stream rate *\/$/;"	v	file:
read	mongoose.c	/^int read(int fd, char *buf, unsigned count) {$/;"	f
readdir	mongoose.c	/^struct dirent *readdir(DIR *d) {$/;"	f
readdir	mongoose.c	/^struct dirent *readdir(DIR *dir) {$/;"	f
reconnect	mongoose.c	/^  struct mg_connection *reconnect;$/;"	m	struct:mg_tun_client	typeref:struct:mg_tun_client::mg_connection	file:
recv_avail_size	mongoose.c	/^MG_INTERNAL size_t recv_avail_size(struct mg_connection *conn, size_t max) {$/;"	f
recv_pending	mongoose.c	/^  int recv_pending;$/;"	m	struct:mg_lwip_conn_state	file:
registerObserver	AlertsSystemClient.h	/^	void registerObserver (CAlertOutput *obs)$/;"	f	class:CAlertsSystemClient
rename	mongoose.c	/^int rename(const char *frompath, const char *topath) {$/;"	f
resample	alsa.c	/^static int resample = 1;                                \/* enable alsa-lib resampling *\/$/;"	v	file:
resample	alsa.cpp	/^static int resample = 1;                                \/* enable alsa-lib resampling *\/$/;"	v	file:
resample	playAudio.cpp	/^static int resample = 1;                                \/* enable alsa-lib resampling *\/$/;"	v	file:
resolve_cb	mongoose.c	/^static void resolve_cb(struct mg_dns_message *msg, void *data,$/;"	f	file:
result	mongoose.c	/^  struct dirent result;$/;"	m	struct:win32_dir	typeref:struct:win32_dir::dirent	file:
retries	mongoose.c	/^  int retries;$/;"	m	struct:mg_resolve_async_request	file:
reverse_proxy_data	mongoose.c	/^  struct mg_reverse_proxy_data reverse_proxy_data;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_reverse_proxy_data	file:
rmdir	mongoose.c	/^int rmdir(const char *path) {$/;"	f
rmdir	mongoose.h	232;"	d
rol	mongoose.c	1217;"	d	file:
rx_chain	mongoose.c	/^  struct pbuf *rx_chain; \/* Chain of incoming data segments. *\/$/;"	m	struct:mg_lwip_conn_state	typeref:struct:mg_lwip_conn_state::pbuf	file:
rx_offset	mongoose.c	/^  size_t rx_offset; \/* Offset within the first pbuf (if partially consumed) *\/$/;"	m	struct:mg_lwip_conn_state	file:
s	mongoose.c	/^  sock_t s;$/;"	m	struct:mg_threadparam	file:
s_done	websocket_chat_client.c	/^static int s_done = 0;$/;"	v	file:
s_http_port	main.cpp	/^static const char *s_http_port = "8000";$/;"	v	file:
s_http_port	websocket_chat.c	/^static const char *s_http_port = "8000";$/;"	v	file:
s_is_connected	websocket_chat_client.c	/^static int s_is_connected = 0;$/;"	v	file:
s_logDateTime	DPrint.cpp	/^static bool s_logDateTime = false;$/;"	v	file:
s_mg_q	mongoose.c	/^static OsiMsgQ_t s_mg_q;$/;"	v	file:
s_signal_received	main.cpp	/^static sig_atomic_t s_signal_received = 0;$/;"	v	file:
s_signal_received	websocket_chat.c	/^static sig_atomic_t s_signal_received = 0;$/;"	v	file:
s_sl_fds	mongoose.c	/^static struct sl_fd_info s_sl_fds[MAX_OPEN_SLFS_FILES];$/;"	v	typeref:struct:sl_fd_info	file:
s_sl_file_size_hints	mongoose.c	/^static struct sl_file_size_hint s_sl_file_size_hints[MAX_OPEN_SLFS_FILES];$/;"	v	typeref:struct:sl_file_size_hint	file:
s_testAutoLogHandler	DPrint.cpp	/^static std::atomic<DPrint::TestAutomationLogHandler*> s_testAutoLogHandler;$/;"	v	file:
samples	alsa.c	/^        signed short *samples;$/;"	m	struct:async_private_data	file:
samples	alsa.cpp	/^        signed short *samples;$/;"	m	struct:async_private_data	file:
samples	playAudio.cpp	/^        signed short *samples;$/;"	m	struct:async_private_data	file:
scanto	mongoose.c	/^static const char *scanto(const char *p, struct mg_str *s) {$/;"	f	file:
sch_time	AlertsMessage.h	/^	std::string sch_time;$/;"	m	class:CAlertsMessage
scheduled_time	Alerts.h	/^	struct tm scheduled_time;$/;"	m	class:CAlerts	typeref:struct:CAlerts::tm
sent	mongoose.c	/^  int64_t sent;  \/* How many bytes have been already sent. *\/$/;"	m	struct:mg_http_proto_data_file	file:
set_errno	mongoose.c	/^int set_errno(int e) {$/;"	f
set_hwparams	alsa.c	/^static int set_hwparams(snd_pcm_t *handle,$/;"	f	file:
set_hwparams	alsa.cpp	/^static int set_hwparams(snd_pcm_t *handle,$/;"	f	file:
set_hwparams	playAudio.cpp	/^static int set_hwparams(snd_pcm_t *handle,$/;"	f	file:
set_swparams	alsa.c	/^static int set_swparams(snd_pcm_t *handle, snd_pcm_sw_params_t *swparams)$/;"	f	file:
set_swparams	alsa.cpp	/^static int set_swparams(snd_pcm_t *handle, snd_pcm_sw_params_t *swparams)$/;"	f	file:
set_swparams	playAudio.cpp	/^static int set_swparams(snd_pcm_t *handle, snd_pcm_sw_params_t *swparams)$/;"	f	file:
setretVal	AlertsSystemClient.cpp	/^bool CAlertsSystemClient :: setretVal (bool retVal)$/;"	f	class:CAlertsSystemClient
sig	mongoose.c	/^  int sig;$/;"	m	struct:mg_ev_mgr_lwip_signal	file:
sig_queue	mongoose.c	/^  struct mg_ev_mgr_lwip_signal sig_queue[MG_SIG_QUEUE_LEN];$/;"	m	struct:mg_ev_mgr_lwip_data	typeref:struct:mg_ev_mgr_lwip_data::mg_ev_mgr_lwip_signal	file:
sig_queue_len	mongoose.c	/^  int sig_queue_len;$/;"	m	struct:mg_ev_mgr_lwip_data	file:
signal_handler	main.cpp	/^static void signal_handler(int sig_num) {$/;"	f	file:
signal_handler	websocket_chat.c	/^static void signal_handler(int sig_num) {$/;"	f	file:
size	mongoose.c	/^  size_t size;$/;"	m	struct:sl_fd_info	file:
size	mongoose.c	/^  size_t size;$/;"	m	struct:sl_file_size_hint	file:
sl_fd_info	mongoose.c	/^struct sl_fd_info {$/;"	s	file:
sl_file_size_hint	mongoose.c	/^struct sl_file_size_hint {$/;"	s	file:
sl_fs_init	mongoose.c	/^int sl_fs_init(void) {$/;"	f
sl_fs_to_errno	mongoose.c	/^static int sl_fs_to_errno(_i32 r) {$/;"	f	file:
sl_pem2der	mongoose.c	/^static char *sl_pem2der(const char *pem_file) {$/;"	f	file:
sl_restart_cb	mongoose.c	/^void sl_restart_cb(struct mg_mgr *mgr) {$/;"	f
sl_set_ssl_opts	mongoose.c	/^int sl_set_ssl_opts(struct mg_connection *nc) {$/;"	f
sleep	mongoose.h	226;"	d
snprintf	mongoose.h	223;"	d
sntp_data	mongoose.c	/^struct sntp_data {$/;"	s	file:
sock_t	mongoose.h	/^typedef SOCKET sock_t;$/;"	t
sock_t	mongoose.h	/^typedef int sock_t;$/;"	t
socklen_t	mongoose.h	/^typedef int socklen_t;$/;"	t
ssize_t	mongoose.h	/^typedef long ssize_t;$/;"	t
ssl	mongoose.c	/^  SSL *ssl;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl	mongoose.c	/^  mbedtls_ssl_context *ssl;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl	mongoose.c	/^  struct mg_tun_ssl_opts ssl;$/;"	m	struct:mg_tun_client	typeref:struct:mg_tun_client::mg_tun_ssl_opts	file:
ssl_ca_cert	mongoose.c	/^  char *ssl_ca_cert;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_ca_cert	mongoose.c	/^  const char *ssl_ca_cert;$/;"	m	struct:mg_tun_ssl_opts	file:
ssl_cert	mongoose.c	/^  char *ssl_cert;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_cert	mongoose.c	/^  const char *ssl_cert;$/;"	m	struct:mg_tun_ssl_opts	file:
ssl_ctx	mongoose.c	/^  SSL_CTX *ssl_ctx;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_key	mongoose.c	/^  char *ssl_key;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_key	mongoose.c	/^  const char *ssl_key;$/;"	m	struct:mg_tun_ssl_opts	file:
ssl_server_name	mongoose.c	/^  char *ssl_server_name;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_socket_recv	mongoose.c	/^int ssl_socket_recv(void *ctx, unsigned char *buf, size_t len) {$/;"	f
ssl_socket_recv	mongoose.c	/^static int ssl_socket_recv(void *ctx, unsigned char *buf, size_t len) {$/;"	f	file:
ssl_socket_send	mongoose.c	/^int ssl_socket_send(void *ctx, const unsigned char *buf, size_t len) {$/;"	f
ssl_socket_send	mongoose.c	/^static int ssl_socket_send(void *ctx, const unsigned char *buf, size_t len) {$/;"	f	file:
st_ino	mongoose.h	/^  int st_ino;$/;"	m	struct:stat
st_mode	mongoose.h	/^  mode_t st_mode;$/;"	m	struct:stat
st_mtime	mongoose.h	/^  time_t st_mtime;$/;"	m	struct:stat
st_nlink	mongoose.h	/^  int st_nlink;$/;"	m	struct:stat
st_size	mongoose.h	/^  off_t st_size;$/;"	m	struct:stat
start_index	mongoose.c	/^  int start_index;$/;"	m	struct:mg_ev_mgr_lwip_data	file:
stat	mongoose.h	/^struct stat {$/;"	s
stat	mongoose.h	693;"	d
stat	mongoose.h	806;"	d
state	mongoose.c	/^  enum mg_http_multipart_stream_state state;$/;"	m	struct:mg_http_multipart_stream	typeref:enum:mg_http_multipart_stream::mg_http_multipart_stream_state	file:
stopAlert	playAudio.cpp	/^int stopAlert ()$/;"	f
str_util_lowercase	mongoose.c	/^static int str_util_lowercase(const char *s) {$/;"	f	file:
strdup	mongoose.c	/^char *strdup(const char *src) {$/;"	f
strdup	mongoose.h	209;"	d
stream_id	mongoose.c	/^  uint32_t stream_id; \/* opaque stream identifier *\/$/;"	m	struct:mg_tun_frame	file:
strerror	mongoose.c	/^const char *strerror(int err) {$/;"	f
t_time	Alerts.h	/^	int t_time;$/;"	m	class:CAlerts
t_time	main.cpp	/^static 	struct tm *t_time = nullptr;$/;"	v	typeref:struct:tm	file:
tcp	mongoose.c	/^    struct tcp_pcb *tcp;$/;"	m	union:mg_lwip_conn_state::__anon5	typeref:struct:mg_lwip_conn_state::__anon5::tcp_pcb	file:
test	test.cpp	/^int test ()$/;"	f
test_cbk	main.cpp	/^void test_cbk (std::string alert_id)$/;"	f
timeout	mongoose.c	/^  time_t timeout;$/;"	m	struct:mg_resolve_async_request	file:
timerCbk	main_old.cpp	/^void timerCbk ()$/;"	f
timerCbk1	main_old.cpp	/^void timerCbk1 ()$/;"	f
timeval	mongoose.h	595;"	d
timeval	mongoose.h	668;"	d
timeval	mongoose.h	784;"	d
to64	mongoose.h	227;"	d
to64	mongoose.h	408;"	d
to64	mongoose.h	490;"	d
to64	mongoose.h	534;"	d
to64	mongoose.h	600;"	d
to64	mongoose.h	653;"	d
to64	mongoose.h	769;"	d
to64	mongoose.h	869;"	d
to_wchar	mongoose.c	/^int to_wchar(const char *path, wchar_t *wbuf, size_t wbuf_len) {$/;"	f
transaction_id	mongoose.c	/^  uint16_t transaction_id;$/;"	m	struct:mg_dns_header	file:
transfer_loop	alsa.c	/^        int (*transfer_loop)(snd_pcm_t *handle,$/;"	m	struct:transfer_method	file:
transfer_loop	alsa.cpp	/^        int (*transfer_loop)(snd_pcm_t *handle,$/;"	m	struct:transfer_method	file:
transfer_loop	playAudio.cpp	/^        int (*transfer_loop)(snd_pcm_t *handle,$/;"	m	struct:transfer_method	file:
transfer_method	alsa.c	/^struct transfer_method {$/;"	s	file:
transfer_method	alsa.cpp	/^struct transfer_method {$/;"	s	file:
transfer_method	playAudio.cpp	/^struct transfer_method {$/;"	s	file:
transfer_methods	alsa.c	/^static struct transfer_method transfer_methods[] = {$/;"	v	typeref:struct:transfer_method	file:
transfer_methods	alsa.cpp	/^static struct transfer_method transfer_methods[] = {$/;"	v	typeref:struct:transfer_method	file:
transfer_methods	playAudio.cpp	/^static struct transfer_method transfer_methods[] = {$/;"	v	typeref:struct:transfer_method	file:
type	mongoose.c	/^  enum mg_http_proto_data_type type;$/;"	m	struct:mg_http_proto_data_file	typeref:enum:mg_http_proto_data_file::mg_http_proto_data_type	file:
type	mongoose.c	/^  enum mg_q_msg_type type;$/;"	m	struct:mg_q_msg	typeref:enum:mg_q_msg::mg_q_msg_type	file:
type	mongoose.c	/^  uint8_t type;$/;"	m	struct:mg_tun_frame	file:
udp	mongoose.c	/^    struct udp_pcb *udp;$/;"	m	union:mg_lwip_conn_state::__anon5	typeref:struct:mg_lwip_conn_state::__anon5::udp_pcb	file:
uint16_t	mongoose.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	mongoose.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	mongoose.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	mongoose.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	mongoose.h	/^typedef unsigned long uintptr_t;$/;"	t
unlink	mongoose.c	/^int unlink(const char *pathname) {$/;"	f
user_data	mongoose.c	/^  void *user_data;$/;"	m	struct:mg_http_multipart_stream	file:
va_copy	mongoose.h	281;"	d
va_copy	mongoose.h	283;"	d
va_copy	mongoose.h	418;"	d
va_copy	mongoose.h	420;"	d
va_copy	mongoose.h	710;"	d
va_copy	mongoose.h	823;"	d
va_copy	mongoose.h	892;"	d
var_name	mongoose.c	/^  const char *var_name;$/;"	m	struct:mg_http_multipart_stream	file:
vars	mongoose.c	/^  const char *vars[MG_MAX_CGI_ENVIR_VARS]; \/* char *envp[] *\/$/;"	m	struct:mg_cgi_env_block	file:
verbose	alsa.c	/^static int verbose = 0;                                 \/* verbose flag *\/$/;"	v	file:
verbose	alsa.cpp	/^static int verbose = 0;                                 \/* verbose flag *\/$/;"	v	file:
verbose	playAudio.cpp	/^static int verbose = 0;                                 \/* verbose flag *\/$/;"	v	file:
vprintf	DPrint.cpp	/^void SysLog::vprintf( DPrint::Level level, const char* facilityName,$/;"	f	class:__anon1::SysLog
vsnprintf	mongoose.h	225;"	d
wait_for_poll	alsa.c	/^static int wait_for_poll(snd_pcm_t *handle, struct pollfd *ufds, unsigned int count)$/;"	f	file:
wait_for_poll	alsa.cpp	/^static int wait_for_poll(snd_pcm_t *handle, struct pollfd *ufds, unsigned int count)$/;"	f	file:
wait_for_poll	playAudio.cpp	/^static int wait_for_poll(snd_pcm_t *handle, struct pollfd *ufds, unsigned int count)$/;"	f	file:
win32_dir	mongoose.c	/^struct win32_dir {$/;"	s	file:
write	mongoose.c	/^int write(int fd, const char *buf, unsigned count) {$/;"	f
write_and_poll_loop	alsa.c	/^static int write_and_poll_loop(snd_pcm_t *handle,$/;"	f	file:
write_and_poll_loop	alsa.cpp	/^static int write_and_poll_loop(snd_pcm_t *handle,$/;"	f	file:
write_and_poll_loop	playAudio.cpp	/^static int write_and_poll_loop(snd_pcm_t *handle,$/;"	f	file:
write_loop	alsa.c	/^static int write_loop(snd_pcm_t *handle,$/;"	f	file:
write_loop	alsa.cpp	/^static int write_loop(snd_pcm_t *handle,$/;"	f	file:
write_loop	playAudio.cpp	/^static int write_loop(snd_pcm_t *handle,$/;"	f	file:
ws_mask_ctx	mongoose.c	/^struct ws_mask_ctx {$/;"	s	file:
xrun_recovery	alsa.c	/^static int xrun_recovery(snd_pcm_t *handle, int err)$/;"	f	file:
xrun_recovery	alsa.cpp	/^static int xrun_recovery(snd_pcm_t *handle, int err)$/;"	f	file:
xrun_recovery	playAudio.cpp	/^static int xrun_recovery(snd_pcm_t *handle, int err)$/;"	f	file:
~CAlerts	Alerts.cpp	/^CAlerts:: ~CAlerts() {$/;"	f	class:CAlerts
~CAlertsManager	AlertsManager.cpp	/^CAlertsManager :: ~CAlertsManager ()$/;"	f	class:CAlertsManager
~CAlertsMessage	AlertsMessage.h	/^	~CAlertsMessage () {};$/;"	f	class:CAlertsMessage
~CAlertsScheduler	AlertsScheduler.h	/^	~CAlertsScheduler () {};$/;"	f	class:CAlertsScheduler
~CAlertsSystemClient	AlertsSystemClient.cpp	/^CAlertsSystemClient :: ~CAlertsSystemClient (){$/;"	f	class:CAlertsSystemClient
~DPrint	DPrint.cpp	/^DPrint::~DPrint()$/;"	f	class:DPrint
~DPrintImpl	DPrint.cpp	/^DPrintImpl::~DPrintImpl()$/;"	f	class:DPrintImpl
