////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      ProductEdidInterface.h
///
/// @brief     This header file contains declarations to handle communication with a A4VVideoManager
///            service.
///
/// @author    Manoranjani Malisetti
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
///
/// The following compiler directive prevents this header file from being included more than once,
/// which may cause multiple declaration compiler errors.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Included Header Files
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "A4VVideoManagerClientFactory.h"
//#include "ProfessorProductController.h"
#include "ProductFrontDoorUtility.h"
//#include "SoundTouchInterface/ContentSelectionService.pb.h"
#include "SoundTouchInterface/PlayerService.pb.h"
#include "SoundTouchInterface/AudioService.pb.h"
#include "ProductMessage.pb.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
///                          Start of the Product Application Namespace                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Forward Class Declarations
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProfessorProductController;
class CustomProductHardwareInterface;

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @class ProductEdidInterface
///
/// @brief This class is used to handle communication with a A4VVideoManager service.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProductEdidInterface
{
public:

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @name   ProductEdidInterface Constructor
    ///
    /// @param  ProfessorProductController& ProductController
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    ProductEdidInterface( ProfessorProductController& ProductController );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following public methods are used to run and stop instances of the
    ///        ProductEdidInterface class, respectively.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool Run( );
    void Stop( );

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// The following methods are used to inform the video manager that either power has been
    /// enabled or that it should prepare for power to be disabled
    //////////////////////////////////////////////////////////////////////////////////////////////
    void PowerOff( );
    void PowerOn( );

private:

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following declarations are used to interface with the product controller and
    ///        the lower level LPM hardware, as well as the A4VVideoManager service.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    NotifyTargetTaskIF*                          m_ProductTask;
    Callback< ProductMessage >                   m_ProductNotify;
    std::shared_ptr < CustomProductHardwareInterface > m_ProductHardwareInterface;
    A4VVideoManager::A4VVideoManagerClientIF::A4VVideoManagerClientPtr m_EdidClient;

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief This member determines whether a connections to the LPM server connection is
    ///        established.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool m_connected = false;

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief This method is called when an A4VVM server connection is established.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void Connected( bool  connected );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following method is used to register for and receive key events from the
    ///        A4VVideoManager interface.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void HandleHpdEvent( A4VVideoManagerServiceMessages::EventHDMIMsg_t hpdEvent );
    void HandleRawEDIDResponse( const A4VVideoManagerServiceMessages::EDIDRawMsg_t rawEdid );
    void HandlePhyAddrResponse( const A4VVideoManagerServiceMessages::CECPhysicalAddrMsg_t cecPhysicalAddress );
    void HandleNowPlaying( const SoundTouchInterface::NowPlayingJson& nowPlayingStatus );
    void HandleFrontDoorVolume( SoundTouchInterface::volume const& volume );
    std::shared_ptr< FrontDoorClientIF >    m_FrontDoorClient;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
