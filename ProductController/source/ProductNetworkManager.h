////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      ProductNetworkManager.h
///
/// @brief     This header file contains functionality for network management.
///
/// @author    Stuart J. Lumby
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// The following compiler directive prevents this header file from being included more than
/// once, which will cause multiple declaration compiler errors, in any file that includes it.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Included Header Files
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "Utilities.h"
#include "FrontDoorClientIF.h"
#include "NetManager.pb.h"
#include "ProductMessage.pb.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
///                          Start of the Product Application Namespace                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Forward Class Declarations
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProfessorProductController;

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @class ProductNetworkManager
///
/// @brief This class provides functionality for sending and receiving network information through
///        a FrontDoor process, which handles connections and communications between various Bose
///        processes.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProductNetworkManager
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @name   ProductNetworkManager Constructor
    ///
    /// @param  ProfessorProductController& ProductController
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ProductNetworkManager( ProfessorProductController& ProductController );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief  The following public methods are used to run and stop instances of the
    ///         ProductNetworkManager class, respectively.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool Run( );
    void Stop( );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief  The following public method handles the sending of status messages to the product
    ///         controller.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void HandleMessage( ProductMessage& message );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief  The following public methods handle WiFi profile functionality.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t GetWifiProfileCount( ) const
    {
        return m_WifiProfileCount;
    }

    void ClearWifiProfileCount( )
    {
        m_WifiProfileCount = 0;
    }

    void PerformRequestforWiFiProfiles( );

private:

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following declarations are used to interface with the product controller and
    ///        the Front Door router process.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    NotifyTargetTaskIF*                m_ProductTask;
    Callback< ProductMessage >         m_ProductNotify;
    std::shared_ptr<FrontDoorClientIF> m_FrontDoorClient;
    uint32_t                           m_WifiProfileCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following methods are used to handle the network status.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterForNetworkStatus( );
    void RegisterForWiFiStatus( );
    void RegisterForWiFiProfiles( );
    void HandleNetworkStatus( const NetManager::Protobuf::NetworkStatus& networkStatus );
    void HandleWiFiStatus( const NetManager::Protobuf::WiFiStatus&       wirelessStatus );
    void HandleWiFiProfiles( const NetManager::Protobuf::WiFiProfiles&   wirelessProfiles );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief  The following method handles the queuing and sending of status messages to the
    ///         product controller through the product task.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void SendMessage( ProductMessage& message );
};

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
