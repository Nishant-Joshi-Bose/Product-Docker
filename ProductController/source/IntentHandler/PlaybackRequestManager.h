////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      PlaybackRequestManager.h
///
/// @brief     This header file declares an intent manager class for implementing playbacks for
///            Professor product specific source selection key actions, typically based on remote
///            key actions.
///
/// @author    Stuart J. Lumby
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// The following compiler directive prevents this header file from being included more than once,
/// which may cause multiple declaration compiler errors.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Included Header Files
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "IntentManager.h"
#include "SoundTouchInterface/PlayerService.pb.h"
#include "SoundTouchInterface/ContentSelectionService.pb.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
///                          Start of the Product Application Namespace                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Forward Class Declarations
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProductController;

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @brief The PlaybackRequestManager Class
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class PlaybackRequestManager: public IntentManager
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief Constructor for the PlaybackRequestManager Class
    ///
    /// @param NotifyTargetTaskIF&        task
    ///
    /// @param const CliClientMT&         commandLineClient
    ///
    /// @param const FrontDoorClientIF_t& frontDoorClient
    ///
    /// @param ProductController&         productController
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    PlaybackRequestManager( NotifyTargetTaskIF&         task,
                            const CliClientMT&          commandLineClient,
                            const FrontDoorClientIF_t&  frontDoorClient,
                            ProductController&          productController );

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief Destructor for the PlaybackRequestManager Class
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ~PlaybackRequestManager( ) override
    {

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @name  Handle
    ///
    /// @brief This method is used to handle playback action intents.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    bool Handle( KeyHandlerUtil::ActionType_t& arg ) override;

private:

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following member variable stores the Professor product controller instance.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ProductController&                      m_ProductController;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following member variables store the PlaybackRequests associated with user
    ///        configurable Game, DVD, Cable/Sat activation key on BLE remote
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    SoundTouchInterface::PlaybackRequest    m_gameSourcePlaybackRq;
    SoundTouchInterface::PlaybackRequest    m_dvdSourcePlaybackRq;
    SoundTouchInterface::PlaybackRequest    m_cablesatSourcePlaybackRq;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief These methods are callbacks that are invoked from a playback request.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void PostPlaybackRequestResponse( const SoundTouchInterface::NowPlaying& response );
    void PostPlaybackRequestError( const FrontDoor::Error& error );


    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief This is called from ProductSourceInfo as a callback to deliver updates to the source list
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateSources( const SoundTouchInterface::Sources& sources );
};

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
