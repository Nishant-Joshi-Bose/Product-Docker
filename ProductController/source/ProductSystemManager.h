////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      ProductSystemManager.h
///
/// @brief     This header file contains declarations for sending and receiving system information
///            through a FrontDoor routing process.
///
/// @author    Stuart J. Lumby
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// The following compiler directive prevents this header file from being included more than
/// once, which will cause multiple declaration compiler errors, in any file that includes it.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Included Header Files
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "Utilities.h"
#include "ProtoPersistenceIF.h"
#include "FrontDoorClientIF.h"
#include "ProductMessage.pb.h"
#include "Language.pb.h"
#include "ConfigurationStatus.pb.h"
#include "SystemInfo.pb.h"
#include "CapsInitializationStatus.pb.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
///                          Start of the Product Application Namespace                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Forward Class Declarations
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProfessorProductController;

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @class ProductSystemManager
///
/// @brief This class provides functionality for sending and receiving information through a
///        Front Door process, which handles connections and communications between various Bose
///        processes.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProductSystemManager
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @name   ProductSystemManager Constructor
    ///
    /// @param ProfessorProductController& ProductController
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ProductSystemManager( ProfessorProductController& ProductController );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief  The following public methods are used to run and stop instances of the
    ///         ProductSystemManager class, respectively.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool Run( );
    void Stop( );

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// These public declarations are primarily to be used by the Product Controller to
    /// set the network configuration status.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void SetNetworkAccoutConfigurationStatus( bool network, bool account );

private:

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following declarations are used to interface with the product controller and
    ///        the Front Door router.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    ProfessorProductController&        m_ProductController;
    NotifyTargetTaskIF*                m_ProductTask;
    Callback< ProductMessage >         m_ProductNotify;
    std::shared_ptr<FrontDoorClientIF> m_FrontDoorClient;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following member variables and methods are used to store the
    ///        configuration status.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ProductPb::ConfigurationStatus          m_ConfigurationStatus;
    ProtoPersistenceIF::ProtoPersistencePtr m_ConfigurationStatusPersistentStorage;

    void ReadConfigurationStatusFromPersistentStorage( );
    void WriteConfigurationStatusToPersistentStorage( );

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following methods are used to handle the CAPS Content Audio Playback Service
    ///        status.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void HandleCapsStatus( const SoundTouchInterface::CapsInitializationStatus& status );
    void HandleCapsStatusFailed( const FRONT_DOOR_CLIENT_ERRORS error );

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following method is used to handle the configuration status.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void HandleGetConfigurationStatusRequest( const Callback< ProductPb::ConfigurationStatus >&
                                              response ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following method is used to send information concernign the Product Controller
    ///        state.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void HandleGetSystemStateRequest( const Callback< ProductPb::SystemState >& response ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following method is used to send information to the Product Controller state
    ///        machine.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void SendMessage( const ProductMessage& message ) const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
