////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      ProductVolumeManager.h
///
/// @brief     This file contains declarations to implement audio volume management.
///
/// @author    Chris Houston
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
///
/// The following compiler directive prevents this header file from being included more than once,
/// which may cause multiple declaration compiler errors.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Included Header Files
///
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "Utilities.h"
#include "FrontDoorClientIF.h"
#include "AudioVolume.h"
#include "ProductMessage.pb.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
///                          Start of the Product Application Namespace                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{

////////////////////////////////////////////////////////////////////////////////////////////////////
///
///            Forward Class Declarations
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProductHardwareInterface;
class ProfessorProductController;

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @class ProductVolumeManager
///
/// @brief This class provides functionality to implement audio volume management.
///
////////////////////////////////////////////////////////////////////////////////////////////////////
class ProductVolumeManager
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief ProductVolumeManager Constructor
    ///
    /// @param  ProfessorProductController& ProductController
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ProductVolumeManager( ProfessorProductController& ProductController );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief  The following public methods are used to run and stop instances of the
    ///         ProductVolumeManager class, respectively.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool Run( );
    void Stop( );

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following methods allow for manipulation of system volume
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void Increment( );
    void Decrement( );
    void ToggleMute( );

private:

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// These declarations store the main task for processing LPM hardware events and requests. It
    /// is passed by the ProductController instance.
    //////////////////////////////////////////////////////////////////////////////////////////////
    NotifyTargetTaskIF*        m_ProductTask    = nullptr;
    Callback< ProductMessage > m_ProductNotify  = nullptr;

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following subclass instances are used to manage the lower level hardware and
    ///        the device.
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<ProductHardwareInterface> m_ProductHardwareInterface;

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following method provides for one-time initialization after the constructor
    ///        has completed
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void Initialize();

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following methods communicate with the FrontDoor to set and receive volume
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrontDoorVolume( int32_t volume );
    void ReceiveFrontDoorVolume( SoundTouchInterface::volume const& volume );

    std::shared_ptr< FrontDoorClientIF >    m_FrontDoorClient;
    CallbackConnection                      m_NotifierCallback;

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// @brief The following member tracks mute status
    ///
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool m_muted = false;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
