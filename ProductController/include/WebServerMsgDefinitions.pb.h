// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebServerMsgDefinitions.proto

#ifndef PROTOBUF_WebServerMsgDefinitions_2eproto__INCLUDED
#define PROTOBUF_WebServerMsgDefinitions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WebServerMsgDefinitions_2eproto();
void protobuf_AssignDesc_WebServerMsgDefinitions_2eproto();
void protobuf_ShutdownFile_WebServerMsgDefinitions_2eproto();

class WebServerMsgRegister;
class WebServerMsgMessage;

// ===================================================================

class WebServerMsgRegister : public ::google::protobuf::Message {
 public:
  WebServerMsgRegister();
  virtual ~WebServerMsgRegister();
  
  WebServerMsgRegister(const WebServerMsgRegister& from);
  
  inline WebServerMsgRegister& operator=(const WebServerMsgRegister& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebServerMsgRegister& default_instance();
  
  void Swap(WebServerMsgRegister* other);
  
  // implements Message ----------------------------------------------
  
  WebServerMsgRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebServerMsgRegister& from);
  void MergeFrom(const WebServerMsgRegister& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool connect = 1 [default = true];
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 1;
  inline bool connect() const;
  inline void set_connect(bool value);
  
  // optional string service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  
  // @@protoc_insertion_point(class_scope:WebServerMsgRegister)
 private:
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_service();
  inline void clear_has_service();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_;
  bool connect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_WebServerMsgDefinitions_2eproto();
  friend void protobuf_AssignDesc_WebServerMsgDefinitions_2eproto();
  friend void protobuf_ShutdownFile_WebServerMsgDefinitions_2eproto();
  
  void InitAsDefaultInstance();
  static WebServerMsgRegister* default_instance_;
};
// -------------------------------------------------------------------

class WebServerMsgMessage : public ::google::protobuf::Message {
 public:
  WebServerMsgMessage();
  virtual ~WebServerMsgMessage();
  
  WebServerMsgMessage(const WebServerMsgMessage& from);
  
  inline WebServerMsgMessage& operator=(const WebServerMsgMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebServerMsgMessage& default_instance();
  
  void Swap(WebServerMsgMessage* other);
  
  // implements Message ----------------------------------------------
  
  WebServerMsgMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebServerMsgMessage& from);
  void MergeFrom(const WebServerMsgMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const char* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  
  // optional string response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // optional string mimetype = 3;
  inline bool has_mimetype() const;
  inline void clear_mimetype();
  static const int kMimetypeFieldNumber = 3;
  inline const ::std::string& mimetype() const;
  inline void set_mimetype(const ::std::string& value);
  inline void set_mimetype(const char* value);
  inline void set_mimetype(const char* value, size_t size);
  inline ::std::string* mutable_mimetype();
  inline ::std::string* release_mimetype();
  
  // optional string method = 4;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 4;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // optional string body = 5;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 5;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // @@protoc_insertion_point(class_scope:WebServerMsgMessage)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_mimetype();
  inline void clear_has_mimetype();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_body();
  inline void clear_has_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* request_;
  ::std::string* response_;
  ::std::string* mimetype_;
  ::std::string* method_;
  ::std::string* body_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_WebServerMsgDefinitions_2eproto();
  friend void protobuf_AssignDesc_WebServerMsgDefinitions_2eproto();
  friend void protobuf_ShutdownFile_WebServerMsgDefinitions_2eproto();
  
  void InitAsDefaultInstance();
  static WebServerMsgMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// WebServerMsgRegister

// optional bool connect = 1 [default = true];
inline bool WebServerMsgRegister::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebServerMsgRegister::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebServerMsgRegister::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebServerMsgRegister::clear_connect() {
  connect_ = true;
  clear_has_connect();
}
inline bool WebServerMsgRegister::connect() const {
  return connect_;
}
inline void WebServerMsgRegister::set_connect(bool value) {
  set_has_connect();
  connect_ = value;
}

// optional string service = 2;
inline bool WebServerMsgRegister::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebServerMsgRegister::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebServerMsgRegister::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebServerMsgRegister::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& WebServerMsgRegister::service() const {
  return *service_;
}
inline void WebServerMsgRegister::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void WebServerMsgRegister::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void WebServerMsgRegister::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebServerMsgRegister::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* WebServerMsgRegister::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WebServerMsgMessage

// optional string request = 1;
inline bool WebServerMsgMessage::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebServerMsgMessage::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebServerMsgMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebServerMsgMessage::clear_request() {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& WebServerMsgMessage::request() const {
  return *request_;
}
inline void WebServerMsgMessage::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void WebServerMsgMessage::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void WebServerMsgMessage::set_request(const char* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebServerMsgMessage::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  return request_;
}
inline ::std::string* WebServerMsgMessage::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string response = 2;
inline bool WebServerMsgMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebServerMsgMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebServerMsgMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebServerMsgMessage::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& WebServerMsgMessage::response() const {
  return *response_;
}
inline void WebServerMsgMessage::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void WebServerMsgMessage::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void WebServerMsgMessage::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebServerMsgMessage::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* WebServerMsgMessage::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mimetype = 3;
inline bool WebServerMsgMessage::has_mimetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebServerMsgMessage::set_has_mimetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebServerMsgMessage::clear_has_mimetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebServerMsgMessage::clear_mimetype() {
  if (mimetype_ != &::google::protobuf::internal::kEmptyString) {
    mimetype_->clear();
  }
  clear_has_mimetype();
}
inline const ::std::string& WebServerMsgMessage::mimetype() const {
  return *mimetype_;
}
inline void WebServerMsgMessage::set_mimetype(const ::std::string& value) {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  mimetype_->assign(value);
}
inline void WebServerMsgMessage::set_mimetype(const char* value) {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  mimetype_->assign(value);
}
inline void WebServerMsgMessage::set_mimetype(const char* value, size_t size) {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  mimetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebServerMsgMessage::mutable_mimetype() {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  return mimetype_;
}
inline ::std::string* WebServerMsgMessage::release_mimetype() {
  clear_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mimetype_;
    mimetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string method = 4;
inline bool WebServerMsgMessage::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebServerMsgMessage::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebServerMsgMessage::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebServerMsgMessage::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& WebServerMsgMessage::method() const {
  return *method_;
}
inline void WebServerMsgMessage::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void WebServerMsgMessage::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void WebServerMsgMessage::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebServerMsgMessage::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* WebServerMsgMessage::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string body = 5;
inline bool WebServerMsgMessage::has_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WebServerMsgMessage::set_has_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WebServerMsgMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WebServerMsgMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& WebServerMsgMessage::body() const {
  return *body_;
}
inline void WebServerMsgMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void WebServerMsgMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void WebServerMsgMessage::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebServerMsgMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* WebServerMsgMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WebServerMsgDefinitions_2eproto__INCLUDED
