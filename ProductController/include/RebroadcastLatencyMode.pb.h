// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RebroadcastLatencyMode.proto

#ifndef PROTOBUF_RebroadcastLatencyMode_2eproto__INCLUDED
#define PROTOBUF_RebroadcastLatencyMode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RebroadcastLatencyMode_2eproto();
void protobuf_AssignDesc_RebroadcastLatencyMode_2eproto();
void protobuf_ShutdownFile_RebroadcastLatencyMode_2eproto();

class rebroadcastlatencymode;

enum REBROADCAST_LATENCY_MODE {
  SYNC_TO_ROOM = 0,
  SYNC_TO_ZONE = 1
};
bool REBROADCAST_LATENCY_MODE_IsValid(int value);
const REBROADCAST_LATENCY_MODE REBROADCAST_LATENCY_MODE_MIN = SYNC_TO_ROOM;
const REBROADCAST_LATENCY_MODE REBROADCAST_LATENCY_MODE_MAX = SYNC_TO_ZONE;
const int REBROADCAST_LATENCY_MODE_ARRAYSIZE = REBROADCAST_LATENCY_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REBROADCAST_LATENCY_MODE_descriptor();
inline const ::std::string& REBROADCAST_LATENCY_MODE_Name(REBROADCAST_LATENCY_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REBROADCAST_LATENCY_MODE_descriptor(), value);
}
inline bool REBROADCAST_LATENCY_MODE_Parse(
    const ::std::string& name, REBROADCAST_LATENCY_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REBROADCAST_LATENCY_MODE>(
    REBROADCAST_LATENCY_MODE_descriptor(), name, value);
}
// ===================================================================

class rebroadcastlatencymode : public ::google::protobuf::Message {
 public:
  rebroadcastlatencymode();
  virtual ~rebroadcastlatencymode();
  
  rebroadcastlatencymode(const rebroadcastlatencymode& from);
  
  inline rebroadcastlatencymode& operator=(const rebroadcastlatencymode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const rebroadcastlatencymode& default_instance();
  
  void Swap(rebroadcastlatencymode* other);
  
  // implements Message ----------------------------------------------
  
  rebroadcastlatencymode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rebroadcastlatencymode& from);
  void MergeFrom(const rebroadcastlatencymode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .REBROADCAST_LATENCY_MODE mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline REBROADCAST_LATENCY_MODE mode() const;
  inline void set_mode(REBROADCAST_LATENCY_MODE value);
  
  // optional bool controllable = 2;
  inline bool has_controllable() const;
  inline void clear_controllable();
  static const int kControllableFieldNumber = 2;
  inline bool controllable() const;
  inline void set_controllable(bool value);
  
  // @@protoc_insertion_point(class_scope:rebroadcastlatencymode)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_controllable();
  inline void clear_has_controllable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int mode_;
  bool controllable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RebroadcastLatencyMode_2eproto();
  friend void protobuf_AssignDesc_RebroadcastLatencyMode_2eproto();
  friend void protobuf_ShutdownFile_RebroadcastLatencyMode_2eproto();
  
  void InitAsDefaultInstance();
  static rebroadcastlatencymode* default_instance_;
};
// ===================================================================


// ===================================================================

// rebroadcastlatencymode

// optional .REBROADCAST_LATENCY_MODE mode = 1;
inline bool rebroadcastlatencymode::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rebroadcastlatencymode::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rebroadcastlatencymode::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rebroadcastlatencymode::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline REBROADCAST_LATENCY_MODE rebroadcastlatencymode::mode() const {
  return static_cast< REBROADCAST_LATENCY_MODE >(mode_);
}
inline void rebroadcastlatencymode::set_mode(REBROADCAST_LATENCY_MODE value) {
  GOOGLE_DCHECK(REBROADCAST_LATENCY_MODE_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// optional bool controllable = 2;
inline bool rebroadcastlatencymode::has_controllable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rebroadcastlatencymode::set_has_controllable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rebroadcastlatencymode::clear_has_controllable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rebroadcastlatencymode::clear_controllable() {
  controllable_ = false;
  clear_has_controllable();
}
inline bool rebroadcastlatencymode::controllable() const {
  return controllable_;
}
inline void rebroadcastlatencymode::set_controllable(bool value) {
  set_has_controllable();
  controllable_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< REBROADCAST_LATENCY_MODE>() {
  return REBROADCAST_LATENCY_MODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RebroadcastLatencyMode_2eproto__INCLUDED
