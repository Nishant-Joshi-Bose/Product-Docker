// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioControls.proto

#ifndef PROTOBUF_AudioControls_2eproto__INCLUDED
#define PROTOBUF_AudioControls_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AudioControls_2eproto();
void protobuf_AssignDesc_AudioControls_2eproto();
void protobuf_ShutdownFile_AudioControls_2eproto();

class GenericAudioControl;
class SpeakerAttributeAndSetting;
class audioproducttonecontrols;
class audioproductlevelcontrols;
class audiodspcontrols;
class audiospeakerattributeandsetting;

enum IPC_AUDIO_MODE {
  AUDIO_MODE_UNSPECIFIED = 0,
  AUDIO_MODE_DIRECT = 1,
  AUDIO_MODE_NORMAL = 2,
  AUDIO_MODE_DIALOG = 3,
  AUDIO_MODE_NIGHT = 4
};
bool IPC_AUDIO_MODE_IsValid(int value);
const IPC_AUDIO_MODE IPC_AUDIO_MODE_MIN = AUDIO_MODE_UNSPECIFIED;
const IPC_AUDIO_MODE IPC_AUDIO_MODE_MAX = AUDIO_MODE_NIGHT;
const int IPC_AUDIO_MODE_ARRAYSIZE = IPC_AUDIO_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* IPC_AUDIO_MODE_descriptor();
inline const ::std::string& IPC_AUDIO_MODE_Name(IPC_AUDIO_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    IPC_AUDIO_MODE_descriptor(), value);
}
inline bool IPC_AUDIO_MODE_Parse(
    const ::std::string& name, IPC_AUDIO_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IPC_AUDIO_MODE>(
    IPC_AUDIO_MODE_descriptor(), name, value);
}
// ===================================================================

class GenericAudioControl : public ::google::protobuf::Message {
 public:
  GenericAudioControl();
  virtual ~GenericAudioControl();
  
  GenericAudioControl(const GenericAudioControl& from);
  
  inline GenericAudioControl& operator=(const GenericAudioControl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericAudioControl& default_instance();
  
  void Swap(GenericAudioControl* other);
  
  // implements Message ----------------------------------------------
  
  GenericAudioControl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericAudioControl& from);
  void MergeFrom(const GenericAudioControl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 value = 1 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional sint32 minValue = 2 [default = 0];
  inline bool has_minvalue() const;
  inline void clear_minvalue();
  static const int kMinValueFieldNumber = 2;
  inline ::google::protobuf::int32 minvalue() const;
  inline void set_minvalue(::google::protobuf::int32 value);
  
  // optional sint32 maxValue = 3 [default = 0];
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxValueFieldNumber = 3;
  inline ::google::protobuf::int32 maxvalue() const;
  inline void set_maxvalue(::google::protobuf::int32 value);
  
  // optional sint32 step = 4 [default = 1];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:GenericAudioControl)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_minvalue();
  inline void clear_has_minvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();
  inline void set_has_step();
  inline void clear_has_step();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 minvalue_;
  ::google::protobuf::int32 maxvalue_;
  ::google::protobuf::int32 step_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AudioControls_2eproto();
  friend void protobuf_AssignDesc_AudioControls_2eproto();
  friend void protobuf_ShutdownFile_AudioControls_2eproto();
  
  void InitAsDefaultInstance();
  static GenericAudioControl* default_instance_;
};
// -------------------------------------------------------------------

class SpeakerAttributeAndSetting : public ::google::protobuf::Message {
 public:
  SpeakerAttributeAndSetting();
  virtual ~SpeakerAttributeAndSetting();
  
  SpeakerAttributeAndSetting(const SpeakerAttributeAndSetting& from);
  
  inline SpeakerAttributeAndSetting& operator=(const SpeakerAttributeAndSetting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeakerAttributeAndSetting& default_instance();
  
  void Swap(SpeakerAttributeAndSetting* other);
  
  // implements Message ----------------------------------------------
  
  SpeakerAttributeAndSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeakerAttributeAndSetting& from);
  void MergeFrom(const SpeakerAttributeAndSetting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool available = 1;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 1;
  inline bool available() const;
  inline void set_available(bool value);
  
  // optional bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);
  
  // optional bool wireless = 3;
  inline bool has_wireless() const;
  inline void clear_wireless();
  static const int kWirelessFieldNumber = 3;
  inline bool wireless() const;
  inline void set_wireless(bool value);
  
  // optional bool controllable = 4 [default = true];
  inline bool has_controllable() const;
  inline void clear_controllable();
  static const int kControllableFieldNumber = 4;
  inline bool controllable() const;
  inline void set_controllable(bool value);
  
  // @@protoc_insertion_point(class_scope:SpeakerAttributeAndSetting)
 private:
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_wireless();
  inline void clear_has_wireless();
  inline void set_has_controllable();
  inline void clear_has_controllable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool available_;
  bool active_;
  bool wireless_;
  bool controllable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AudioControls_2eproto();
  friend void protobuf_AssignDesc_AudioControls_2eproto();
  friend void protobuf_ShutdownFile_AudioControls_2eproto();
  
  void InitAsDefaultInstance();
  static SpeakerAttributeAndSetting* default_instance_;
};
// -------------------------------------------------------------------

class audioproducttonecontrols : public ::google::protobuf::Message {
 public:
  audioproducttonecontrols();
  virtual ~audioproducttonecontrols();
  
  audioproducttonecontrols(const audioproducttonecontrols& from);
  
  inline audioproducttonecontrols& operator=(const audioproducttonecontrols& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const audioproducttonecontrols& default_instance();
  
  void Swap(audioproducttonecontrols* other);
  
  // implements Message ----------------------------------------------
  
  audioproducttonecontrols* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const audioproducttonecontrols& from);
  void MergeFrom(const audioproducttonecontrols& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .GenericAudioControl bass = 1;
  inline bool has_bass() const;
  inline void clear_bass();
  static const int kBassFieldNumber = 1;
  inline const ::GenericAudioControl& bass() const;
  inline ::GenericAudioControl* mutable_bass();
  inline ::GenericAudioControl* release_bass();
  
  // optional .GenericAudioControl treble = 2;
  inline bool has_treble() const;
  inline void clear_treble();
  static const int kTrebleFieldNumber = 2;
  inline const ::GenericAudioControl& treble() const;
  inline ::GenericAudioControl* mutable_treble();
  inline ::GenericAudioControl* release_treble();
  
  // @@protoc_insertion_point(class_scope:audioproducttonecontrols)
 private:
  inline void set_has_bass();
  inline void clear_has_bass();
  inline void set_has_treble();
  inline void clear_has_treble();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::GenericAudioControl* bass_;
  ::GenericAudioControl* treble_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AudioControls_2eproto();
  friend void protobuf_AssignDesc_AudioControls_2eproto();
  friend void protobuf_ShutdownFile_AudioControls_2eproto();
  
  void InitAsDefaultInstance();
  static audioproducttonecontrols* default_instance_;
};
// -------------------------------------------------------------------

class audioproductlevelcontrols : public ::google::protobuf::Message {
 public:
  audioproductlevelcontrols();
  virtual ~audioproductlevelcontrols();
  
  audioproductlevelcontrols(const audioproductlevelcontrols& from);
  
  inline audioproductlevelcontrols& operator=(const audioproductlevelcontrols& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const audioproductlevelcontrols& default_instance();
  
  void Swap(audioproductlevelcontrols* other);
  
  // implements Message ----------------------------------------------
  
  audioproductlevelcontrols* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const audioproductlevelcontrols& from);
  void MergeFrom(const audioproductlevelcontrols& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .GenericAudioControl frontCenterSpeakerLevel = 1;
  inline bool has_frontcenterspeakerlevel() const;
  inline void clear_frontcenterspeakerlevel();
  static const int kFrontCenterSpeakerLevelFieldNumber = 1;
  inline const ::GenericAudioControl& frontcenterspeakerlevel() const;
  inline ::GenericAudioControl* mutable_frontcenterspeakerlevel();
  inline ::GenericAudioControl* release_frontcenterspeakerlevel();
  
  // optional .GenericAudioControl rearSurroundSpeakersLevel = 2;
  inline bool has_rearsurroundspeakerslevel() const;
  inline void clear_rearsurroundspeakerslevel();
  static const int kRearSurroundSpeakersLevelFieldNumber = 2;
  inline const ::GenericAudioControl& rearsurroundspeakerslevel() const;
  inline ::GenericAudioControl* mutable_rearsurroundspeakerslevel();
  inline ::GenericAudioControl* release_rearsurroundspeakerslevel();
  
  // @@protoc_insertion_point(class_scope:audioproductlevelcontrols)
 private:
  inline void set_has_frontcenterspeakerlevel();
  inline void clear_has_frontcenterspeakerlevel();
  inline void set_has_rearsurroundspeakerslevel();
  inline void clear_has_rearsurroundspeakerslevel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::GenericAudioControl* frontcenterspeakerlevel_;
  ::GenericAudioControl* rearsurroundspeakerslevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AudioControls_2eproto();
  friend void protobuf_AssignDesc_AudioControls_2eproto();
  friend void protobuf_ShutdownFile_AudioControls_2eproto();
  
  void InitAsDefaultInstance();
  static audioproductlevelcontrols* default_instance_;
};
// -------------------------------------------------------------------

class audiodspcontrols : public ::google::protobuf::Message {
 public:
  audiodspcontrols();
  virtual ~audiodspcontrols();
  
  audiodspcontrols(const audiodspcontrols& from);
  
  inline audiodspcontrols& operator=(const audiodspcontrols& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const audiodspcontrols& default_instance();
  
  void Swap(audiodspcontrols* other);
  
  // implements Message ----------------------------------------------
  
  audiodspcontrols* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const audiodspcontrols& from);
  void MergeFrom(const audiodspcontrols& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .IPC_AUDIO_MODE audiomode = 1 [default = AUDIO_MODE_UNSPECIFIED];
  inline bool has_audiomode() const;
  inline void clear_audiomode();
  static const int kAudiomodeFieldNumber = 1;
  inline IPC_AUDIO_MODE audiomode() const;
  inline void set_audiomode(IPC_AUDIO_MODE value);
  
  // optional int32 videosyncaudiodelay = 2 [default = 0];
  inline bool has_videosyncaudiodelay() const;
  inline void clear_videosyncaudiodelay();
  static const int kVideosyncaudiodelayFieldNumber = 2;
  inline ::google::protobuf::int32 videosyncaudiodelay() const;
  inline void set_videosyncaudiodelay(::google::protobuf::int32 value);
  
  // optional string supportedaudiomodes = 3;
  inline bool has_supportedaudiomodes() const;
  inline void clear_supportedaudiomodes();
  static const int kSupportedaudiomodesFieldNumber = 3;
  inline const ::std::string& supportedaudiomodes() const;
  inline void set_supportedaudiomodes(const ::std::string& value);
  inline void set_supportedaudiomodes(const char* value);
  inline void set_supportedaudiomodes(const char* value, size_t size);
  inline ::std::string* mutable_supportedaudiomodes();
  inline ::std::string* release_supportedaudiomodes();
  
  // @@protoc_insertion_point(class_scope:audiodspcontrols)
 private:
  inline void set_has_audiomode();
  inline void clear_has_audiomode();
  inline void set_has_videosyncaudiodelay();
  inline void clear_has_videosyncaudiodelay();
  inline void set_has_supportedaudiomodes();
  inline void clear_has_supportedaudiomodes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int audiomode_;
  ::google::protobuf::int32 videosyncaudiodelay_;
  ::std::string* supportedaudiomodes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AudioControls_2eproto();
  friend void protobuf_AssignDesc_AudioControls_2eproto();
  friend void protobuf_ShutdownFile_AudioControls_2eproto();
  
  void InitAsDefaultInstance();
  static audiodspcontrols* default_instance_;
};
// -------------------------------------------------------------------

class audiospeakerattributeandsetting : public ::google::protobuf::Message {
 public:
  audiospeakerattributeandsetting();
  virtual ~audiospeakerattributeandsetting();
  
  audiospeakerattributeandsetting(const audiospeakerattributeandsetting& from);
  
  inline audiospeakerattributeandsetting& operator=(const audiospeakerattributeandsetting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const audiospeakerattributeandsetting& default_instance();
  
  void Swap(audiospeakerattributeandsetting* other);
  
  // implements Message ----------------------------------------------
  
  audiospeakerattributeandsetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const audiospeakerattributeandsetting& from);
  void MergeFrom(const audiospeakerattributeandsetting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .SpeakerAttributeAndSetting rear = 1;
  inline bool has_rear() const;
  inline void clear_rear();
  static const int kRearFieldNumber = 1;
  inline const ::SpeakerAttributeAndSetting& rear() const;
  inline ::SpeakerAttributeAndSetting* mutable_rear();
  inline ::SpeakerAttributeAndSetting* release_rear();
  
  // optional .SpeakerAttributeAndSetting subwoofer01 = 2;
  inline bool has_subwoofer01() const;
  inline void clear_subwoofer01();
  static const int kSubwoofer01FieldNumber = 2;
  inline const ::SpeakerAttributeAndSetting& subwoofer01() const;
  inline ::SpeakerAttributeAndSetting* mutable_subwoofer01();
  inline ::SpeakerAttributeAndSetting* release_subwoofer01();
  
  // optional .SpeakerAttributeAndSetting subwoofer02 = 3;
  inline bool has_subwoofer02() const;
  inline void clear_subwoofer02();
  static const int kSubwoofer02FieldNumber = 3;
  inline const ::SpeakerAttributeAndSetting& subwoofer02() const;
  inline ::SpeakerAttributeAndSetting* mutable_subwoofer02();
  inline ::SpeakerAttributeAndSetting* release_subwoofer02();
  
  // @@protoc_insertion_point(class_scope:audiospeakerattributeandsetting)
 private:
  inline void set_has_rear();
  inline void clear_has_rear();
  inline void set_has_subwoofer01();
  inline void clear_has_subwoofer01();
  inline void set_has_subwoofer02();
  inline void clear_has_subwoofer02();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::SpeakerAttributeAndSetting* rear_;
  ::SpeakerAttributeAndSetting* subwoofer01_;
  ::SpeakerAttributeAndSetting* subwoofer02_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AudioControls_2eproto();
  friend void protobuf_AssignDesc_AudioControls_2eproto();
  friend void protobuf_ShutdownFile_AudioControls_2eproto();
  
  void InitAsDefaultInstance();
  static audiospeakerattributeandsetting* default_instance_;
};
// ===================================================================


// ===================================================================

// GenericAudioControl

// optional sint32 value = 1 [default = 0];
inline bool GenericAudioControl::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericAudioControl::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericAudioControl::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericAudioControl::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 GenericAudioControl::value() const {
  return value_;
}
inline void GenericAudioControl::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional sint32 minValue = 2 [default = 0];
inline bool GenericAudioControl::has_minvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericAudioControl::set_has_minvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericAudioControl::clear_has_minvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericAudioControl::clear_minvalue() {
  minvalue_ = 0;
  clear_has_minvalue();
}
inline ::google::protobuf::int32 GenericAudioControl::minvalue() const {
  return minvalue_;
}
inline void GenericAudioControl::set_minvalue(::google::protobuf::int32 value) {
  set_has_minvalue();
  minvalue_ = value;
}

// optional sint32 maxValue = 3 [default = 0];
inline bool GenericAudioControl::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericAudioControl::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenericAudioControl::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenericAudioControl::clear_maxvalue() {
  maxvalue_ = 0;
  clear_has_maxvalue();
}
inline ::google::protobuf::int32 GenericAudioControl::maxvalue() const {
  return maxvalue_;
}
inline void GenericAudioControl::set_maxvalue(::google::protobuf::int32 value) {
  set_has_maxvalue();
  maxvalue_ = value;
}

// optional sint32 step = 4 [default = 1];
inline bool GenericAudioControl::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericAudioControl::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GenericAudioControl::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GenericAudioControl::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::google::protobuf::int32 GenericAudioControl::step() const {
  return step_;
}
inline void GenericAudioControl::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// -------------------------------------------------------------------

// SpeakerAttributeAndSetting

// optional bool available = 1;
inline bool SpeakerAttributeAndSetting::has_available() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeakerAttributeAndSetting::set_has_available() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeakerAttributeAndSetting::clear_has_available() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeakerAttributeAndSetting::clear_available() {
  available_ = false;
  clear_has_available();
}
inline bool SpeakerAttributeAndSetting::available() const {
  return available_;
}
inline void SpeakerAttributeAndSetting::set_available(bool value) {
  set_has_available();
  available_ = value;
}

// optional bool active = 2;
inline bool SpeakerAttributeAndSetting::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeakerAttributeAndSetting::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeakerAttributeAndSetting::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeakerAttributeAndSetting::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool SpeakerAttributeAndSetting::active() const {
  return active_;
}
inline void SpeakerAttributeAndSetting::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional bool wireless = 3;
inline bool SpeakerAttributeAndSetting::has_wireless() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeakerAttributeAndSetting::set_has_wireless() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeakerAttributeAndSetting::clear_has_wireless() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeakerAttributeAndSetting::clear_wireless() {
  wireless_ = false;
  clear_has_wireless();
}
inline bool SpeakerAttributeAndSetting::wireless() const {
  return wireless_;
}
inline void SpeakerAttributeAndSetting::set_wireless(bool value) {
  set_has_wireless();
  wireless_ = value;
}

// optional bool controllable = 4 [default = true];
inline bool SpeakerAttributeAndSetting::has_controllable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeakerAttributeAndSetting::set_has_controllable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeakerAttributeAndSetting::clear_has_controllable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeakerAttributeAndSetting::clear_controllable() {
  controllable_ = true;
  clear_has_controllable();
}
inline bool SpeakerAttributeAndSetting::controllable() const {
  return controllable_;
}
inline void SpeakerAttributeAndSetting::set_controllable(bool value) {
  set_has_controllable();
  controllable_ = value;
}

// -------------------------------------------------------------------

// audioproducttonecontrols

// optional .GenericAudioControl bass = 1;
inline bool audioproducttonecontrols::has_bass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void audioproducttonecontrols::set_has_bass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void audioproducttonecontrols::clear_has_bass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void audioproducttonecontrols::clear_bass() {
  if (bass_ != NULL) bass_->::GenericAudioControl::Clear();
  clear_has_bass();
}
inline const ::GenericAudioControl& audioproducttonecontrols::bass() const {
  return bass_ != NULL ? *bass_ : *default_instance_->bass_;
}
inline ::GenericAudioControl* audioproducttonecontrols::mutable_bass() {
  set_has_bass();
  if (bass_ == NULL) bass_ = new ::GenericAudioControl;
  return bass_;
}
inline ::GenericAudioControl* audioproducttonecontrols::release_bass() {
  clear_has_bass();
  ::GenericAudioControl* temp = bass_;
  bass_ = NULL;
  return temp;
}

// optional .GenericAudioControl treble = 2;
inline bool audioproducttonecontrols::has_treble() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void audioproducttonecontrols::set_has_treble() {
  _has_bits_[0] |= 0x00000002u;
}
inline void audioproducttonecontrols::clear_has_treble() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void audioproducttonecontrols::clear_treble() {
  if (treble_ != NULL) treble_->::GenericAudioControl::Clear();
  clear_has_treble();
}
inline const ::GenericAudioControl& audioproducttonecontrols::treble() const {
  return treble_ != NULL ? *treble_ : *default_instance_->treble_;
}
inline ::GenericAudioControl* audioproducttonecontrols::mutable_treble() {
  set_has_treble();
  if (treble_ == NULL) treble_ = new ::GenericAudioControl;
  return treble_;
}
inline ::GenericAudioControl* audioproducttonecontrols::release_treble() {
  clear_has_treble();
  ::GenericAudioControl* temp = treble_;
  treble_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// audioproductlevelcontrols

// optional .GenericAudioControl frontCenterSpeakerLevel = 1;
inline bool audioproductlevelcontrols::has_frontcenterspeakerlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void audioproductlevelcontrols::set_has_frontcenterspeakerlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void audioproductlevelcontrols::clear_has_frontcenterspeakerlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void audioproductlevelcontrols::clear_frontcenterspeakerlevel() {
  if (frontcenterspeakerlevel_ != NULL) frontcenterspeakerlevel_->::GenericAudioControl::Clear();
  clear_has_frontcenterspeakerlevel();
}
inline const ::GenericAudioControl& audioproductlevelcontrols::frontcenterspeakerlevel() const {
  return frontcenterspeakerlevel_ != NULL ? *frontcenterspeakerlevel_ : *default_instance_->frontcenterspeakerlevel_;
}
inline ::GenericAudioControl* audioproductlevelcontrols::mutable_frontcenterspeakerlevel() {
  set_has_frontcenterspeakerlevel();
  if (frontcenterspeakerlevel_ == NULL) frontcenterspeakerlevel_ = new ::GenericAudioControl;
  return frontcenterspeakerlevel_;
}
inline ::GenericAudioControl* audioproductlevelcontrols::release_frontcenterspeakerlevel() {
  clear_has_frontcenterspeakerlevel();
  ::GenericAudioControl* temp = frontcenterspeakerlevel_;
  frontcenterspeakerlevel_ = NULL;
  return temp;
}

// optional .GenericAudioControl rearSurroundSpeakersLevel = 2;
inline bool audioproductlevelcontrols::has_rearsurroundspeakerslevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void audioproductlevelcontrols::set_has_rearsurroundspeakerslevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void audioproductlevelcontrols::clear_has_rearsurroundspeakerslevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void audioproductlevelcontrols::clear_rearsurroundspeakerslevel() {
  if (rearsurroundspeakerslevel_ != NULL) rearsurroundspeakerslevel_->::GenericAudioControl::Clear();
  clear_has_rearsurroundspeakerslevel();
}
inline const ::GenericAudioControl& audioproductlevelcontrols::rearsurroundspeakerslevel() const {
  return rearsurroundspeakerslevel_ != NULL ? *rearsurroundspeakerslevel_ : *default_instance_->rearsurroundspeakerslevel_;
}
inline ::GenericAudioControl* audioproductlevelcontrols::mutable_rearsurroundspeakerslevel() {
  set_has_rearsurroundspeakerslevel();
  if (rearsurroundspeakerslevel_ == NULL) rearsurroundspeakerslevel_ = new ::GenericAudioControl;
  return rearsurroundspeakerslevel_;
}
inline ::GenericAudioControl* audioproductlevelcontrols::release_rearsurroundspeakerslevel() {
  clear_has_rearsurroundspeakerslevel();
  ::GenericAudioControl* temp = rearsurroundspeakerslevel_;
  rearsurroundspeakerslevel_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// audiodspcontrols

// optional .IPC_AUDIO_MODE audiomode = 1 [default = AUDIO_MODE_UNSPECIFIED];
inline bool audiodspcontrols::has_audiomode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void audiodspcontrols::set_has_audiomode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void audiodspcontrols::clear_has_audiomode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void audiodspcontrols::clear_audiomode() {
  audiomode_ = 0;
  clear_has_audiomode();
}
inline IPC_AUDIO_MODE audiodspcontrols::audiomode() const {
  return static_cast< IPC_AUDIO_MODE >(audiomode_);
}
inline void audiodspcontrols::set_audiomode(IPC_AUDIO_MODE value) {
  GOOGLE_DCHECK(IPC_AUDIO_MODE_IsValid(value));
  set_has_audiomode();
  audiomode_ = value;
}

// optional int32 videosyncaudiodelay = 2 [default = 0];
inline bool audiodspcontrols::has_videosyncaudiodelay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void audiodspcontrols::set_has_videosyncaudiodelay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void audiodspcontrols::clear_has_videosyncaudiodelay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void audiodspcontrols::clear_videosyncaudiodelay() {
  videosyncaudiodelay_ = 0;
  clear_has_videosyncaudiodelay();
}
inline ::google::protobuf::int32 audiodspcontrols::videosyncaudiodelay() const {
  return videosyncaudiodelay_;
}
inline void audiodspcontrols::set_videosyncaudiodelay(::google::protobuf::int32 value) {
  set_has_videosyncaudiodelay();
  videosyncaudiodelay_ = value;
}

// optional string supportedaudiomodes = 3;
inline bool audiodspcontrols::has_supportedaudiomodes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void audiodspcontrols::set_has_supportedaudiomodes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void audiodspcontrols::clear_has_supportedaudiomodes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void audiodspcontrols::clear_supportedaudiomodes() {
  if (supportedaudiomodes_ != &::google::protobuf::internal::kEmptyString) {
    supportedaudiomodes_->clear();
  }
  clear_has_supportedaudiomodes();
}
inline const ::std::string& audiodspcontrols::supportedaudiomodes() const {
  return *supportedaudiomodes_;
}
inline void audiodspcontrols::set_supportedaudiomodes(const ::std::string& value) {
  set_has_supportedaudiomodes();
  if (supportedaudiomodes_ == &::google::protobuf::internal::kEmptyString) {
    supportedaudiomodes_ = new ::std::string;
  }
  supportedaudiomodes_->assign(value);
}
inline void audiodspcontrols::set_supportedaudiomodes(const char* value) {
  set_has_supportedaudiomodes();
  if (supportedaudiomodes_ == &::google::protobuf::internal::kEmptyString) {
    supportedaudiomodes_ = new ::std::string;
  }
  supportedaudiomodes_->assign(value);
}
inline void audiodspcontrols::set_supportedaudiomodes(const char* value, size_t size) {
  set_has_supportedaudiomodes();
  if (supportedaudiomodes_ == &::google::protobuf::internal::kEmptyString) {
    supportedaudiomodes_ = new ::std::string;
  }
  supportedaudiomodes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* audiodspcontrols::mutable_supportedaudiomodes() {
  set_has_supportedaudiomodes();
  if (supportedaudiomodes_ == &::google::protobuf::internal::kEmptyString) {
    supportedaudiomodes_ = new ::std::string;
  }
  return supportedaudiomodes_;
}
inline ::std::string* audiodspcontrols::release_supportedaudiomodes() {
  clear_has_supportedaudiomodes();
  if (supportedaudiomodes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = supportedaudiomodes_;
    supportedaudiomodes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// audiospeakerattributeandsetting

// optional .SpeakerAttributeAndSetting rear = 1;
inline bool audiospeakerattributeandsetting::has_rear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void audiospeakerattributeandsetting::set_has_rear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void audiospeakerattributeandsetting::clear_has_rear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void audiospeakerattributeandsetting::clear_rear() {
  if (rear_ != NULL) rear_->::SpeakerAttributeAndSetting::Clear();
  clear_has_rear();
}
inline const ::SpeakerAttributeAndSetting& audiospeakerattributeandsetting::rear() const {
  return rear_ != NULL ? *rear_ : *default_instance_->rear_;
}
inline ::SpeakerAttributeAndSetting* audiospeakerattributeandsetting::mutable_rear() {
  set_has_rear();
  if (rear_ == NULL) rear_ = new ::SpeakerAttributeAndSetting;
  return rear_;
}
inline ::SpeakerAttributeAndSetting* audiospeakerattributeandsetting::release_rear() {
  clear_has_rear();
  ::SpeakerAttributeAndSetting* temp = rear_;
  rear_ = NULL;
  return temp;
}

// optional .SpeakerAttributeAndSetting subwoofer01 = 2;
inline bool audiospeakerattributeandsetting::has_subwoofer01() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void audiospeakerattributeandsetting::set_has_subwoofer01() {
  _has_bits_[0] |= 0x00000002u;
}
inline void audiospeakerattributeandsetting::clear_has_subwoofer01() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void audiospeakerattributeandsetting::clear_subwoofer01() {
  if (subwoofer01_ != NULL) subwoofer01_->::SpeakerAttributeAndSetting::Clear();
  clear_has_subwoofer01();
}
inline const ::SpeakerAttributeAndSetting& audiospeakerattributeandsetting::subwoofer01() const {
  return subwoofer01_ != NULL ? *subwoofer01_ : *default_instance_->subwoofer01_;
}
inline ::SpeakerAttributeAndSetting* audiospeakerattributeandsetting::mutable_subwoofer01() {
  set_has_subwoofer01();
  if (subwoofer01_ == NULL) subwoofer01_ = new ::SpeakerAttributeAndSetting;
  return subwoofer01_;
}
inline ::SpeakerAttributeAndSetting* audiospeakerattributeandsetting::release_subwoofer01() {
  clear_has_subwoofer01();
  ::SpeakerAttributeAndSetting* temp = subwoofer01_;
  subwoofer01_ = NULL;
  return temp;
}

// optional .SpeakerAttributeAndSetting subwoofer02 = 3;
inline bool audiospeakerattributeandsetting::has_subwoofer02() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void audiospeakerattributeandsetting::set_has_subwoofer02() {
  _has_bits_[0] |= 0x00000004u;
}
inline void audiospeakerattributeandsetting::clear_has_subwoofer02() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void audiospeakerattributeandsetting::clear_subwoofer02() {
  if (subwoofer02_ != NULL) subwoofer02_->::SpeakerAttributeAndSetting::Clear();
  clear_has_subwoofer02();
}
inline const ::SpeakerAttributeAndSetting& audiospeakerattributeandsetting::subwoofer02() const {
  return subwoofer02_ != NULL ? *subwoofer02_ : *default_instance_->subwoofer02_;
}
inline ::SpeakerAttributeAndSetting* audiospeakerattributeandsetting::mutable_subwoofer02() {
  set_has_subwoofer02();
  if (subwoofer02_ == NULL) subwoofer02_ = new ::SpeakerAttributeAndSetting;
  return subwoofer02_;
}
inline ::SpeakerAttributeAndSetting* audiospeakerattributeandsetting::release_subwoofer02() {
  clear_has_subwoofer02();
  ::SpeakerAttributeAndSetting* temp = subwoofer02_;
  subwoofer02_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< IPC_AUDIO_MODE>() {
  return IPC_AUDIO_MODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AudioControls_2eproto__INCLUDED
