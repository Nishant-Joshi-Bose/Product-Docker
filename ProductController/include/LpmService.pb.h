// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LpmService.proto

#ifndef PROTOBUF_LpmService_2eproto__INCLUDED
#define PROTOBUF_LpmService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace lpmservice {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LpmService_2eproto();
void protobuf_AssignDesc_LpmService_2eproto();
void protobuf_ShutdownFile_LpmService_2eproto();

class A4VIpcServicePacket;
class EmptyData;
class AccessoryDescription_t;
class BulkClosed_t;
class BulkClose_t;
class BulkNotify_t;
class BulkResponse_t;
class BulkStatus_t;
class DeviceStatusReq_t;
class F0_PowerStatus_t;
class IpcAccessoryList_t;
class IpcAsocHealthStatusPayload_t;
class IpcAudioMute_t;
class IpcAudioSetVolume_t;
class IpcAudioStatus_t;
class IpcBTInfo_t;
class IpcBT_Control_t;
class IpcContentControl_t;
class IpcDspHealthStatusPayload_t;
class IpcDspPlayTonePayload_t;
class IpcDspProfilePayload_t;
class IpcDSPAudioMetaDataPayload_t;
class IpcDSPVolumePayload;
class IpcEcho_t;
class IpcF0HealthStatusPayload_t;
class IpcKey_t;
class IpcLipSyncDelay_t;
class IpcLpmHealthStatusPayload_t;
class IpcOperationCompletePayload_t;
class IpcRadioStatus_t;
class IpcResponseCECData_t;
class IpcResponseCECMode_t;
class IpcResponseHDMIInputSelection_t;
class IpcResponseSPDInfoFrame_t;
class IpcSetDSPAudioMode_t;
class IpcSetNewLangPayload_t;
class IpcStHealthStatusPayload_t;
class IpcSystemTemperatureData_t;
class IpcThermistorData_t;
class IpcToneControl_t;
class IpcVersionResponse_t;
class Ipc_TimeoutControl_t;
class IPCSourceListMessage;
class IPCSourceStruct;
class IPCSource_t;
class RfRemoteHealthStatus_t;
class UpdateEnter_t;
class UpdateIncProg_t;
class UpdateStatus_t;
class UpdateUnifiedProg_t;

enum Ipc_Device_t {
  IPC_DEVICE_INVALID = 0,
  IPC_DEVICE_DSP = 1,
  IPC_DEVICE_LPM = 2,
  IPC_DEVICE_AP = 3,
  IPC_DEVICE_REMOTE = 4,
  IPC_DEVICE_F0 = 5,
  IPC_DEVICE_SOUNDTOUCH = 6,
  IPC_NUM_DEVICES = 7
};
bool Ipc_Device_t_IsValid(int value);
const Ipc_Device_t Ipc_Device_t_MIN = IPC_DEVICE_INVALID;
const Ipc_Device_t Ipc_Device_t_MAX = IPC_NUM_DEVICES;
const int Ipc_Device_t_ARRAYSIZE = Ipc_Device_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipc_Device_t_descriptor();
inline const ::std::string& Ipc_Device_t_Name(Ipc_Device_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipc_Device_t_descriptor(), value);
}
inline bool Ipc_Device_t_Parse(
    const ::std::string& name, Ipc_Device_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipc_Device_t>(
    Ipc_Device_t_descriptor(), name, value);
}
enum IpcOpcodes_t {
  IPC_ECHO = 1,
  IPC_ECHO_RESPONSE = 2,
  IPC_ERROR = 3,
  IPC_LOG_MESSAGE = 4,
  IPC_KEY = 5,
  IPC_KEY_HOOK = 6,
  IPC_LOG_EVT = 7,
  IPC_REBOOT_PLEASE = 8,
  IPC_PASSTHROUGH_SEND = 9,
  IPC_PASSTHROUGH_RESPONSE = 10,
  IPC_HAMMER = 11,
  IPC_FACTORY_DEFAULT = 12,
  IPC_SHUTDOWN = 13,
  IPC_OPERATION_COMPLETE = 15,
  IPC_HOLD_OFF = 16,
  IPC_STAT_REQ = 17,
  IPC_DSP_H_S = 18,
  IPC_ST_H_S = 19,
  IPC_LPM_H_S = 20,
  IPC_RMT_H_S = 21,
  IPC_ASOC_H_S = 22,
  IPC_LLW_H_S = 23,
  IPC_F0_H_S = 24,
  IPC_SYS_TEMP = 25,
  IPC_OUT_OF_BOX_DONE = 26,
  IPC_SET_NEW_LANGUAGE = 27,
  IPC_BULK_NOTIFY = 32,
  IPC_BULK_RESPONSE = 33,
  IPC_BULK_DATA = 34,
  IPC_BULK_STATUS = 35,
  IPC_BULK_QUERY = 36,
  IPC_BULK_CLOSE = 37,
  IPC_BULK_CLOSED = 38,
  IPC_UPDATE_AVAILABLE = 48,
  IPC_UPDATE_ENTER = 49,
  IPC_UPDATE_COMPLETE = 50,
  IPC_UPDATE_DOWNLOAD = 51,
  IPC_UPDATE_START_FLASH = 52,
  IPC_UPDATE_AUTHENTICATE = 53,
  IPC_UPDATE_INC_PROG = 54,
  IPC_UPDATE_UNIFIED_PROG = 55,
  IPC_UPDATE_STATUS = 56,
  IPC_UPDATE_GET_STATUS = 57,
  IPC_RMT_LL_CTRL = 64,
  IPC_RMT_DEL_BLASTER_RECORD = 65,
  IPC_SOURCE_ACTIVATE = 80,
  IPC_SOURCE_ACTIVATION_STATUS = 81,
  IPC_SOURCE_LIST = 82,
  IPC_SOURCE_META = 83,
  IPC_SOURCE_UPDATED = 86,
  IPC_HOSP_GET = 87,
  IPC_HOSP_RESP = 88,
  IPC_DSP_REBOOT_TO_IMAGE = 96,
  IPC_DSP_AIQ_CONTROL = 97,
  IPC_AIQ_COEF = 98,
  IPC_DSP_VOL_MUTE = 99,
  IPC_DSP_PROFILE = 100,
  IPC_DSP_PROFILE_RESP = 101,
  IPC_DSP_AUDIO_INFO = 102,
  IPC_DSP_PLAY_TONE = 103,
  IPC_ST_CONTROL_SET_LOW_POWER = 128,
  IPC_ST_CONTROL_LED_CONTROL = 129,
  IPC_ST_CONTROL_BT = 130,
  IPC_ST_CONTROL_UPDATE = 131,
  IPC_ST_CONTROL_WIFI_RADIO = 132,
  IPC_ST_CONTROL_CONTENT_CONTROL = 133,
  IPC_ST_CONTROL_RADIO_STATUS = 134,
  IPC_ST_CONTROL_SET_DSP_LIPSYNC_DELAY = 136,
  IPC_ST_CONTROL_AUDIO_PATH_PRESENTATION_LATENCY = 137,
  IPC_ST_CONTROL_SEND_TONE_CONTROL = 138,
  IPC_ST_CONTROL_GET_TONE_CONTROL = 139,
  IPC_ST_CONTROL_SET_DSP_MODE = 141,
  IPC_ST_CONTROL_SPEAKER_PAIRING_COMMAND = 142,
  IPC_ST_CONTROL_RECOVERY_UPDATE_STATUS = 143,
  IPC_CEC_MSG = 160,
  IPC_CEC_LOGICAL_ADDRESS = 161,
  IPC_POWER_STATE_SET = 162,
  IPC_POWER_STATE_GET = 163,
  IPC_POWER_STATE_STATUS = 164,
  IPC_CEC_BULK_MSG = 165,
  IPC_ASOC_BOOT_SELECT = 166,
  IPC_HDMI_MON_STATE_SET = 167,
  IPC_HDMI_MON_STATE_GET = 168,
  IPC_HDMI_MON_STATE_STATUS = 169,
  IPC_AUDIO_STATUS = 176,
  IPC_AUDIO_MUTE = 177,
  IPC_AUDIO_SET_VOL = 178,
  IPC_AUDIO_GET_SPEAKER_LIST = 179,
  IPC_AUDIO_RSP_SPEAKER_LIST = 180,
  IPC_AUDIO_SET_SPEAKER_LIST = 181,
  IPC_AUDIO_OPEN_SPEAKER_PAIRING = 182,
  IPC_GET_CEC_DATA = 208,
  IPC_RSP_CEC_DATA = 209,
  IPC_GET_SPD_DATA = 210,
  IPC_RSP_SPD_DATA = 211,
  IPC_GET_EDID_DATA = 212,
  IPC_RSP_EDID_DATA = 213,
  IPC_GET_CEC_MODE = 214,
  IPC_RSP_CEC_MODE = 215,
  IPC_SET_CEC_MODE = 216,
  IPC_GET_HDMI_ASSIGN = 217,
  IPC_RSP_HDMI_ASSIGN = 218,
  IPC_SET_HDMI_ASSIGN = 219,
  IPC_ASOC_EXEC_COMMAND = 224,
  IPC_ASOC_EXEC_RESPONSE = 225,
  IPC_ASOC_SM2_NEEDS_RECOVERY = 226,
  IPC_ASOC_PERFORM_PENDING_UPDATE = 227,
  IPC_ASOC_ADAPTIQ_SETTINGS = 228,
  IPC_ASOC_SCREENSAVER_CMD = 229,
  IPC_ASOC_APP_VERSION = 230,
  IPC_ASOC_VERSION_REQ = 231,
  IPC_ASOC_VERSION_RESP = 232
};
bool IpcOpcodes_t_IsValid(int value);
const IpcOpcodes_t IpcOpcodes_t_MIN = IPC_ECHO;
const IpcOpcodes_t IpcOpcodes_t_MAX = IPC_ASOC_VERSION_RESP;
const int IpcOpcodes_t_ARRAYSIZE = IpcOpcodes_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcOpcodes_t_descriptor();
inline const ::std::string& IpcOpcodes_t_Name(IpcOpcodes_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcOpcodes_t_descriptor(), value);
}
inline bool IpcOpcodes_t_Parse(
    const ::std::string& name, IpcOpcodes_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcOpcodes_t>(
    IpcOpcodes_t_descriptor(), name, value);
}
enum IpcTapPassthrough_t {
  IPC_TAP_PASSTHROUGH_NOT_FINAL = 0,
  IPC_TAP_PASSTHROUGH_FINAL = 1
};
bool IpcTapPassthrough_t_IsValid(int value);
const IpcTapPassthrough_t IpcTapPassthrough_t_MIN = IPC_TAP_PASSTHROUGH_NOT_FINAL;
const IpcTapPassthrough_t IpcTapPassthrough_t_MAX = IPC_TAP_PASSTHROUGH_FINAL;
const int IpcTapPassthrough_t_ARRAYSIZE = IpcTapPassthrough_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcTapPassthrough_t_descriptor();
inline const ::std::string& IpcTapPassthrough_t_Name(IpcTapPassthrough_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcTapPassthrough_t_descriptor(), value);
}
inline bool IpcTapPassthrough_t_Parse(
    const ::std::string& name, IpcTapPassthrough_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcTapPassthrough_t>(
    IpcTapPassthrough_t_descriptor(), name, value);
}
enum IpcOpCompleteID_t {
  IPC_COMPLETE_SET_LANGUAGE = 0,
  IPC_COMPLETE_UPDATE_SRC_LIST = 1,
  IPC_COMPLETE_SET_CODESET = 2,
  IPC_COMPLETE_DEL_CODESET = 3,
  IPC_COMPLETE_FACTORY_DEFAULT = 4,
  IPC_COMPLETE_SPEAKER_PAIRING = 5
};
bool IpcOpCompleteID_t_IsValid(int value);
const IpcOpCompleteID_t IpcOpCompleteID_t_MIN = IPC_COMPLETE_SET_LANGUAGE;
const IpcOpCompleteID_t IpcOpCompleteID_t_MAX = IPC_COMPLETE_SPEAKER_PAIRING;
const int IpcOpCompleteID_t_ARRAYSIZE = IpcOpCompleteID_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcOpCompleteID_t_descriptor();
inline const ::std::string& IpcOpCompleteID_t_Name(IpcOpCompleteID_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcOpCompleteID_t_descriptor(), value);
}
inline bool IpcOpCompleteID_t_Parse(
    const ::std::string& name, IpcOpCompleteID_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcOpCompleteID_t>(
    IpcOpCompleteID_t_descriptor(), name, value);
}
enum IpcCompleteStatus_t {
  IPC_COMPLETE_STAT_OK = 0,
  IPC_COMPLETE_STAT_ERROR = 1,
  IPC_COMPLETE_OUT_OF_MEMORY = 2,
  IPC_COMPLETE_STAT_NOT_EXISTS = 3,
  IPC_COMPLETE_STAT_EXISTS = 4,
  IPC_COMPLETE_STAT_WRITE_ERROR = 5,
  IPC_COMPLETE_STAT_INV_ARGS = 6,
  IPC_COMPLETE_STAT_TIMEOUT = 7
};
bool IpcCompleteStatus_t_IsValid(int value);
const IpcCompleteStatus_t IpcCompleteStatus_t_MIN = IPC_COMPLETE_STAT_OK;
const IpcCompleteStatus_t IpcCompleteStatus_t_MAX = IPC_COMPLETE_STAT_TIMEOUT;
const int IpcCompleteStatus_t_ARRAYSIZE = IpcCompleteStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcCompleteStatus_t_descriptor();
inline const ::std::string& IpcCompleteStatus_t_Name(IpcCompleteStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcCompleteStatus_t_descriptor(), value);
}
inline bool IpcCompleteStatus_t_Parse(
    const ::std::string& name, IpcCompleteStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcCompleteStatus_t>(
    IpcCompleteStatus_t_descriptor(), name, value);
}
enum COUNTRY_VARIANT {
  COUNTRY_UNDEFINED = 0,
  COUNTRY_US = 1,
  COUNTRY_GB = 2,
  COUNTRY_CN = 3,
  COUNTRY_JP = 4,
  COUNTRY_TW = 5,
  COUNTRY_NUM = 6
};
bool COUNTRY_VARIANT_IsValid(int value);
const COUNTRY_VARIANT COUNTRY_VARIANT_MIN = COUNTRY_UNDEFINED;
const COUNTRY_VARIANT COUNTRY_VARIANT_MAX = COUNTRY_NUM;
const int COUNTRY_VARIANT_ARRAYSIZE = COUNTRY_VARIANT_MAX + 1;

const ::google::protobuf::EnumDescriptor* COUNTRY_VARIANT_descriptor();
inline const ::std::string& COUNTRY_VARIANT_Name(COUNTRY_VARIANT value) {
  return ::google::protobuf::internal::NameOfEnum(
    COUNTRY_VARIANT_descriptor(), value);
}
inline bool COUNTRY_VARIANT_Parse(
    const ::std::string& name, COUNTRY_VARIANT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<COUNTRY_VARIANT>(
    COUNTRY_VARIANT_descriptor(), name, value);
}
enum REGION_VARIANT {
  REGION_UNDEFINED = 0,
  REGION_US = 1,
  REGION_GB = 2,
  REGION_RESERVED_CN = 3,
  REGION_JP = 4,
  REGION_NUM = 5
};
bool REGION_VARIANT_IsValid(int value);
const REGION_VARIANT REGION_VARIANT_MIN = REGION_UNDEFINED;
const REGION_VARIANT REGION_VARIANT_MAX = REGION_NUM;
const int REGION_VARIANT_ARRAYSIZE = REGION_VARIANT_MAX + 1;

const ::google::protobuf::EnumDescriptor* REGION_VARIANT_descriptor();
inline const ::std::string& REGION_VARIANT_Name(REGION_VARIANT value) {
  return ::google::protobuf::internal::NameOfEnum(
    REGION_VARIANT_descriptor(), value);
}
inline bool REGION_VARIANT_Parse(
    const ::std::string& name, REGION_VARIANT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REGION_VARIANT>(
    REGION_VARIANT_descriptor(), name, value);
}
enum SYSTEM_COLOR {
  SYSTEM_COLOR_WHITE = 0,
  SYSTEM_COLOR_BLACK = 1,
  SYSTEM_COLOR_NUM = 2
};
bool SYSTEM_COLOR_IsValid(int value);
const SYSTEM_COLOR SYSTEM_COLOR_MIN = SYSTEM_COLOR_WHITE;
const SYSTEM_COLOR SYSTEM_COLOR_MAX = SYSTEM_COLOR_NUM;
const int SYSTEM_COLOR_ARRAYSIZE = SYSTEM_COLOR_MAX + 1;

const ::google::protobuf::EnumDescriptor* SYSTEM_COLOR_descriptor();
inline const ::std::string& SYSTEM_COLOR_Name(SYSTEM_COLOR value) {
  return ::google::protobuf::internal::NameOfEnum(
    SYSTEM_COLOR_descriptor(), value);
}
inline bool SYSTEM_COLOR_Parse(
    const ::std::string& name, SYSTEM_COLOR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SYSTEM_COLOR>(
    SYSTEM_COLOR_descriptor(), name, value);
}
enum NominalSampleRate_t {
  SAMPLE_RATE_UNSPECIFIED = 0,
  SAMPLE_RATE_8000_HZ = 1,
  SAMPLE_RATE_11025_HZ = 2,
  SAMPLE_RATE_12000_HZ = 3,
  SAMPLE_RATE_16000_HZ = 4,
  SAMPLE_RATE_22050_HZ = 5,
  SAMPLE_RATE_24000_HZ = 6,
  SAMPLE_RATE_32000_HZ = 7,
  SAMPLE_RATE_44100_HZ = 8,
  SAMPLE_RATE_48000_HZ = 9,
  SAMPLE_RATE_64000_HZ = 10,
  SAMPLE_RATE_88200_HZ = 11,
  SAMPLE_RATE_96000_HZ = 12,
  SAMPLE_RATE_128000_HZ = 13,
  SAMPLE_RATE_176400_HZ = 14,
  SAMPLE_RATE_192000_HZ = 15
};
bool NominalSampleRate_t_IsValid(int value);
const NominalSampleRate_t NominalSampleRate_t_MIN = SAMPLE_RATE_UNSPECIFIED;
const NominalSampleRate_t NominalSampleRate_t_MAX = SAMPLE_RATE_192000_HZ;
const int NominalSampleRate_t_ARRAYSIZE = NominalSampleRate_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* NominalSampleRate_t_descriptor();
inline const ::std::string& NominalSampleRate_t_Name(NominalSampleRate_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    NominalSampleRate_t_descriptor(), value);
}
inline bool NominalSampleRate_t_Parse(
    const ::std::string& name, NominalSampleRate_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NominalSampleRate_t>(
    NominalSampleRate_t_descriptor(), name, value);
}
enum InputAudioFormat_t {
  AUDIO_FORMAT_UNKNOWN = 0,
  AUDIO_FORMAT_PCM = 1,
  AUDIO_FORMAT_AC3 = 2,
  AUDIO_FORMAT_DTS = 3,
  AUDIO_FORMAT_AAC = 4,
  AUDIO_FORMAT_MLP = 5,
  AUDIO_FORMAT_EAC3 = 6
};
bool InputAudioFormat_t_IsValid(int value);
const InputAudioFormat_t InputAudioFormat_t_MIN = AUDIO_FORMAT_UNKNOWN;
const InputAudioFormat_t InputAudioFormat_t_MAX = AUDIO_FORMAT_EAC3;
const int InputAudioFormat_t_ARRAYSIZE = InputAudioFormat_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* InputAudioFormat_t_descriptor();
inline const ::std::string& InputAudioFormat_t_Name(InputAudioFormat_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    InputAudioFormat_t_descriptor(), value);
}
inline bool InputAudioFormat_t_Parse(
    const ::std::string& name, InputAudioFormat_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InputAudioFormat_t>(
    InputAudioFormat_t_descriptor(), name, value);
}
enum RemoteImage_t {
  REMOTE_IMAGE_A = 0,
  REMOTE_IMAGE_B = 1
};
bool RemoteImage_t_IsValid(int value);
const RemoteImage_t RemoteImage_t_MIN = REMOTE_IMAGE_A;
const RemoteImage_t RemoteImage_t_MAX = REMOTE_IMAGE_B;
const int RemoteImage_t_ARRAYSIZE = RemoteImage_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoteImage_t_descriptor();
inline const ::std::string& RemoteImage_t_Name(RemoteImage_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteImage_t_descriptor(), value);
}
inline bool RemoteImage_t_Parse(
    const ::std::string& name, RemoteImage_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteImage_t>(
    RemoteImage_t_descriptor(), name, value);
}
enum PairingMode_t {
  PAIRING_DISABLED = 0,
  PAIRING_ENABLED = 1
};
bool PairingMode_t_IsValid(int value);
const PairingMode_t PairingMode_t_MIN = PAIRING_DISABLED;
const PairingMode_t PairingMode_t_MAX = PAIRING_ENABLED;
const int PairingMode_t_ARRAYSIZE = PairingMode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* PairingMode_t_descriptor();
inline const ::std::string& PairingMode_t_Name(PairingMode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    PairingMode_t_descriptor(), value);
}
inline bool PairingMode_t_Parse(
    const ::std::string& name, PairingMode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PairingMode_t>(
    PairingMode_t_descriptor(), name, value);
}
enum PairingStatus_t {
  PAIRING_NOT_PAIRED = 0,
  PAIRING_PAIRED = 1
};
bool PairingStatus_t_IsValid(int value);
const PairingStatus_t PairingStatus_t_MIN = PAIRING_NOT_PAIRED;
const PairingStatus_t PairingStatus_t_MAX = PAIRING_PAIRED;
const int PairingStatus_t_ARRAYSIZE = PairingStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* PairingStatus_t_descriptor();
inline const ::std::string& PairingStatus_t_Name(PairingStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    PairingStatus_t_descriptor(), value);
}
inline bool PairingStatus_t_Parse(
    const ::std::string& name, PairingStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PairingStatus_t>(
    PairingStatus_t_descriptor(), name, value);
}
enum ASOCImage_t {
  ASOC_NORMAL = 1,
  ASOC_RECOVERY = 2,
  ASOC_FACTORY_TEST = 3
};
bool ASOCImage_t_IsValid(int value);
const ASOCImage_t ASOCImage_t_MIN = ASOC_NORMAL;
const ASOCImage_t ASOCImage_t_MAX = ASOC_FACTORY_TEST;
const int ASOCImage_t_ARRAYSIZE = ASOCImage_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* ASOCImage_t_descriptor();
inline const ::std::string& ASOCImage_t_Name(ASOCImage_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    ASOCImage_t_descriptor(), value);
}
inline bool ASOCImage_t_Parse(
    const ::std::string& name, ASOCImage_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ASOCImage_t>(
    ASOCImage_t_descriptor(), name, value);
}
enum ASOCMode_t {
  ASOC_MODE_PROD = 0,
  ASOC_MODE_DEV = 1
};
bool ASOCMode_t_IsValid(int value);
const ASOCMode_t ASOCMode_t_MIN = ASOC_MODE_PROD;
const ASOCMode_t ASOCMode_t_MAX = ASOC_MODE_DEV;
const int ASOCMode_t_ARRAYSIZE = ASOCMode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* ASOCMode_t_descriptor();
inline const ::std::string& ASOCMode_t_Name(ASOCMode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    ASOCMode_t_descriptor(), value);
}
inline bool ASOCMode_t_Parse(
    const ::std::string& name, ASOCMode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ASOCMode_t>(
    ASOCMode_t_descriptor(), name, value);
}
enum StatusRequest_t {
  GENERAL_STATUS = 0,
  RF_REMOTE_STATUS = 1,
  BLASTER_STATUS = 2,
  ASOC_STATUS = 3,
  LPM_STATUS = 4,
  DSP_STATUS = 5,
  LLW_STATUS = 6,
  ST_STATUS = 7,
  F0_STATUS = 8
};
bool StatusRequest_t_IsValid(int value);
const StatusRequest_t StatusRequest_t_MIN = GENERAL_STATUS;
const StatusRequest_t StatusRequest_t_MAX = F0_STATUS;
const int StatusRequest_t_ARRAYSIZE = StatusRequest_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusRequest_t_descriptor();
inline const ::std::string& StatusRequest_t_Name(StatusRequest_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusRequest_t_descriptor(), value);
}
inline bool StatusRequest_t_Parse(
    const ::std::string& name, StatusRequest_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusRequest_t>(
    StatusRequest_t_descriptor(), name, value);
}
enum LPMImage_t {
  LPM_APP = 0,
  LPM_RECOVERY = 1
};
bool LPMImage_t_IsValid(int value);
const LPMImage_t LPMImage_t_MIN = LPM_APP;
const LPMImage_t LPMImage_t_MAX = LPM_RECOVERY;
const int LPMImage_t_ARRAYSIZE = LPMImage_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LPMImage_t_descriptor();
inline const ::std::string& LPMImage_t_Name(LPMImage_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LPMImage_t_descriptor(), value);
}
inline bool LPMImage_t_Parse(
    const ::std::string& name, LPMImage_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LPMImage_t>(
    LPMImage_t_descriptor(), name, value);
}
enum IpcPowerState_t {
  IPC_POWER_STATE_UNKNOWN = 0,
  IPC_POWER_STATE_BOOTING = 1,
  IPC_POWER_STATE_AUTO_WAKE = 2,
  IPC_POWER_STATE_FULL_POWER = 3,
  IPC_POWER_STATE_SHUTTING_DOWN = 4,
  IPC_POWER_STATE_OFF = 5
};
bool IpcPowerState_t_IsValid(int value);
const IpcPowerState_t IpcPowerState_t_MIN = IPC_POWER_STATE_UNKNOWN;
const IpcPowerState_t IpcPowerState_t_MAX = IPC_POWER_STATE_OFF;
const int IpcPowerState_t_ARRAYSIZE = IpcPowerState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcPowerState_t_descriptor();
inline const ::std::string& IpcPowerState_t_Name(IpcPowerState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcPowerState_t_descriptor(), value);
}
inline bool IpcPowerState_t_Parse(
    const ::std::string& name, IpcPowerState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcPowerState_t>(
    IpcPowerState_t_descriptor(), name, value);
}
enum IpcLPMPowerState_t {
  POWER_STATE_COLD_BOOTED = 0,
  POWER_STATE_LOW_POWER = 1,
  POWER_STATE_NETWORK_STANDBY = 2,
  POWER_STATE_AUTO_WAKE_STANDBY = 3,
  POWER_STATE_FULL_POWER = 4,
  POWER_STATE_NUM = 5
};
bool IpcLPMPowerState_t_IsValid(int value);
const IpcLPMPowerState_t IpcLPMPowerState_t_MIN = POWER_STATE_COLD_BOOTED;
const IpcLPMPowerState_t IpcLPMPowerState_t_MAX = POWER_STATE_NUM;
const int IpcLPMPowerState_t_ARRAYSIZE = IpcLPMPowerState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcLPMPowerState_t_descriptor();
inline const ::std::string& IpcLPMPowerState_t_Name(IpcLPMPowerState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcLPMPowerState_t_descriptor(), value);
}
inline bool IpcLPMPowerState_t_Parse(
    const ::std::string& name, IpcLPMPowerState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcLPMPowerState_t>(
    IpcLPMPowerState_t_descriptor(), name, value);
}
enum IpcMuteState_t {
  IPC_NOT_MUTED = 0,
  IPC_MUTED = 1
};
bool IpcMuteState_t_IsValid(int value);
const IpcMuteState_t IpcMuteState_t_MIN = IPC_NOT_MUTED;
const IpcMuteState_t IpcMuteState_t_MAX = IPC_MUTED;
const int IpcMuteState_t_ARRAYSIZE = IpcMuteState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcMuteState_t_descriptor();
inline const ::std::string& IpcMuteState_t_Name(IpcMuteState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcMuteState_t_descriptor(), value);
}
inline bool IpcMuteState_t_Parse(
    const ::std::string& name, IpcMuteState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcMuteState_t>(
    IpcMuteState_t_descriptor(), name, value);
}
enum IpcEnergyPresent_t {
  IPC_ENERGY_NOT_PRESENT = 0,
  IPC_ENERGY_PRESENT = 1
};
bool IpcEnergyPresent_t_IsValid(int value);
const IpcEnergyPresent_t IpcEnergyPresent_t_MIN = IPC_ENERGY_NOT_PRESENT;
const IpcEnergyPresent_t IpcEnergyPresent_t_MAX = IPC_ENERGY_PRESENT;
const int IpcEnergyPresent_t_ARRAYSIZE = IpcEnergyPresent_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcEnergyPresent_t_descriptor();
inline const ::std::string& IpcEnergyPresent_t_Name(IpcEnergyPresent_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcEnergyPresent_t_descriptor(), value);
}
inline bool IpcEnergyPresent_t_Parse(
    const ::std::string& name, IpcEnergyPresent_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcEnergyPresent_t>(
    IpcEnergyPresent_t_descriptor(), name, value);
}
enum IpcAiqCompletion_t {
  IPC_AIQ_COMPLETION_NOT_RUN = 0,
  IPC_AIQ_COMPLETION_SUCCESSFUL = 1,
  IPC_AIQ_COMPLETION_INCOMPLETE = 2,
  IPC_AIQ_COMPLETION_UNSUCCESSFUL = 3
};
bool IpcAiqCompletion_t_IsValid(int value);
const IpcAiqCompletion_t IpcAiqCompletion_t_MIN = IPC_AIQ_COMPLETION_NOT_RUN;
const IpcAiqCompletion_t IpcAiqCompletion_t_MAX = IPC_AIQ_COMPLETION_UNSUCCESSFUL;
const int IpcAiqCompletion_t_ARRAYSIZE = IpcAiqCompletion_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAiqCompletion_t_descriptor();
inline const ::std::string& IpcAiqCompletion_t_Name(IpcAiqCompletion_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAiqCompletion_t_descriptor(), value);
}
inline bool IpcAiqCompletion_t_Parse(
    const ::std::string& name, IpcAiqCompletion_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAiqCompletion_t>(
    IpcAiqCompletion_t_descriptor(), name, value);
}
enum IpcAiqInstalled_t {
  IPC_AIQ_NOT_INSTALLED = 0,
  IPC_AIQ_INSTALLED = 1,
  IPC_AIQ_ENABLED = 2
};
bool IpcAiqInstalled_t_IsValid(int value);
const IpcAiqInstalled_t IpcAiqInstalled_t_MIN = IPC_AIQ_NOT_INSTALLED;
const IpcAiqInstalled_t IpcAiqInstalled_t_MAX = IPC_AIQ_ENABLED;
const int IpcAiqInstalled_t_ARRAYSIZE = IpcAiqInstalled_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAiqInstalled_t_descriptor();
inline const ::std::string& IpcAiqInstalled_t_Name(IpcAiqInstalled_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAiqInstalled_t_descriptor(), value);
}
inline bool IpcAiqInstalled_t_Parse(
    const ::std::string& name, IpcAiqInstalled_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAiqInstalled_t>(
    IpcAiqInstalled_t_descriptor(), name, value);
}
enum DSPImage_t {
  END_USER_IMAGE = 0,
  ERC_IMAGE = 1,
  INSTALLER_IMAGE = 2,
  DSP_NUM_IMAGES = 3
};
bool DSPImage_t_IsValid(int value);
const DSPImage_t DSPImage_t_MIN = END_USER_IMAGE;
const DSPImage_t DSPImage_t_MAX = DSP_NUM_IMAGES;
const int DSPImage_t_ARRAYSIZE = DSPImage_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DSPImage_t_descriptor();
inline const ::std::string& DSPImage_t_Name(DSPImage_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DSPImage_t_descriptor(), value);
}
inline bool DSPImage_t_Parse(
    const ::std::string& name, DSPImage_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DSPImage_t>(
    DSPImage_t_descriptor(), name, value);
}
enum IpcThermistorLocation_t {
  IPC_THERM_CONSOLE_INTERNAL_AMP = 0,
  IPC_THERM_CONSOLE_INTERNAL_PS = 1,
  IPC_THERM_CENTER = 2,
  IPC_THERM_FRONT_SURROUND = 3,
  IPC_THERM_MID_SURROUND_L = 4,
  IPC_THERM_MID_SURROUND_R = 5,
  IPC_THERM_REAR_SURROUND_L = 6,
  IPC_THERM_REAR_SURROUND_R = 7,
  IPC_THERM_BASS = 8,
  IPC_THERM_LOCATION_TYPES = 9
};
bool IpcThermistorLocation_t_IsValid(int value);
const IpcThermistorLocation_t IpcThermistorLocation_t_MIN = IPC_THERM_CONSOLE_INTERNAL_AMP;
const IpcThermistorLocation_t IpcThermistorLocation_t_MAX = IPC_THERM_LOCATION_TYPES;
const int IpcThermistorLocation_t_ARRAYSIZE = IpcThermistorLocation_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcThermistorLocation_t_descriptor();
inline const ::std::string& IpcThermistorLocation_t_Name(IpcThermistorLocation_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcThermistorLocation_t_descriptor(), value);
}
inline bool IpcThermistorLocation_t_Parse(
    const ::std::string& name, IpcThermistorLocation_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcThermistorLocation_t>(
    IpcThermistorLocation_t_descriptor(), name, value);
}
enum IpcBulkFileTypes_t {
  BULK_TYPE_INVALID = 0,
  BULK_TYPE_SOFTWARE_UPDATE = 1,
  BULK_TYPE_BLASTER_RECORD = 2,
  BULK_TYPE_AIQ_COEFFICIENTS = 3,
  BULK_TYPE_TEST = 4,
  BULK_TYPE_SOURCE_LIST = 5,
  BULK_TYPE_EDID = 6,
  BULK_TYPE_ST_BT_DATA = 7,
  BULK_TYPE_HOSPITALITY_FILE = 8,
  BULK_NUM_TYPES = 9
};
bool IpcBulkFileTypes_t_IsValid(int value);
const IpcBulkFileTypes_t IpcBulkFileTypes_t_MIN = BULK_TYPE_INVALID;
const IpcBulkFileTypes_t IpcBulkFileTypes_t_MAX = BULK_NUM_TYPES;
const int IpcBulkFileTypes_t_ARRAYSIZE = IpcBulkFileTypes_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcBulkFileTypes_t_descriptor();
inline const ::std::string& IpcBulkFileTypes_t_Name(IpcBulkFileTypes_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcBulkFileTypes_t_descriptor(), value);
}
inline bool IpcBulkFileTypes_t_Parse(
    const ::std::string& name, IpcBulkFileTypes_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcBulkFileTypes_t>(
    IpcBulkFileTypes_t_descriptor(), name, value);
}
enum IpcBulkResponse_t {
  BULK_RESPONSE_ACCEPT = 1,
  BULK_RESPONSE_DECLINE = 2
};
bool IpcBulkResponse_t_IsValid(int value);
const IpcBulkResponse_t IpcBulkResponse_t_MIN = BULK_RESPONSE_ACCEPT;
const IpcBulkResponse_t IpcBulkResponse_t_MAX = BULK_RESPONSE_DECLINE;
const int IpcBulkResponse_t_ARRAYSIZE = IpcBulkResponse_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcBulkResponse_t_descriptor();
inline const ::std::string& IpcBulkResponse_t_Name(IpcBulkResponse_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcBulkResponse_t_descriptor(), value);
}
inline bool IpcBulkResponse_t_Parse(
    const ::std::string& name, IpcBulkResponse_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcBulkResponse_t>(
    IpcBulkResponse_t_descriptor(), name, value);
}
enum IpcBulkStatus_t {
  BULK_STATUS_CONTINUE = 1,
  BULK_STATUS_ERROR = 2
};
bool IpcBulkStatus_t_IsValid(int value);
const IpcBulkStatus_t IpcBulkStatus_t_MIN = BULK_STATUS_CONTINUE;
const IpcBulkStatus_t IpcBulkStatus_t_MAX = BULK_STATUS_ERROR;
const int IpcBulkStatus_t_ARRAYSIZE = IpcBulkStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcBulkStatus_t_descriptor();
inline const ::std::string& IpcBulkStatus_t_Name(IpcBulkStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcBulkStatus_t_descriptor(), value);
}
inline bool IpcBulkStatus_t_Parse(
    const ::std::string& name, IpcBulkStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcBulkStatus_t>(
    IpcBulkStatus_t_descriptor(), name, value);
}
enum IpcBulkResult_t {
  BULK_CLOSE_OK = 1,
  BULK_CLOSE_ERROR = 2
};
bool IpcBulkResult_t_IsValid(int value);
const IpcBulkResult_t IpcBulkResult_t_MIN = BULK_CLOSE_OK;
const IpcBulkResult_t IpcBulkResult_t_MAX = BULK_CLOSE_ERROR;
const int IpcBulkResult_t_ARRAYSIZE = IpcBulkResult_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcBulkResult_t_descriptor();
inline const ::std::string& IpcBulkResult_t_Name(IpcBulkResult_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcBulkResult_t_descriptor(), value);
}
inline bool IpcBulkResult_t_Parse(
    const ::std::string& name, IpcBulkResult_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcBulkResult_t>(
    IpcBulkResult_t_descriptor(), name, value);
}
enum IpcUpdateStatus_t {
  UPDATE_STATUS_NOT_IN_UPDATE = 0,
  UPDATE_STATUS_READY_OK = 1,
  UPDATE_STATUS_BUSY = 2,
  UPDATE_STATUS_READY_FAIL = 3,
  UPDATE_STATUS_AUTH_OK = 4,
  UPDATE_STATUS_AUTH_FAIL = 5,
  UPDATE_VERIFICATION_OK = 6,
  UPDATE_VERIFICATION_FAIL = 7,
  UPDATE_NUM_STATUSES = 8
};
bool IpcUpdateStatus_t_IsValid(int value);
const IpcUpdateStatus_t IpcUpdateStatus_t_MIN = UPDATE_STATUS_NOT_IN_UPDATE;
const IpcUpdateStatus_t IpcUpdateStatus_t_MAX = UPDATE_NUM_STATUSES;
const int IpcUpdateStatus_t_ARRAYSIZE = IpcUpdateStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcUpdateStatus_t_descriptor();
inline const ::std::string& IpcUpdateStatus_t_Name(IpcUpdateStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcUpdateStatus_t_descriptor(), value);
}
inline bool IpcUpdateStatus_t_Parse(
    const ::std::string& name, IpcUpdateStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcUpdateStatus_t>(
    IpcUpdateStatus_t_descriptor(), name, value);
}
enum RemoteCmd_t {
  RMT_CMD_INVALID = 0,
  SET_PAIRING_MODE = 1
};
bool RemoteCmd_t_IsValid(int value);
const RemoteCmd_t RemoteCmd_t_MIN = RMT_CMD_INVALID;
const RemoteCmd_t RemoteCmd_t_MAX = SET_PAIRING_MODE;
const int RemoteCmd_t_ARRAYSIZE = RemoteCmd_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoteCmd_t_descriptor();
inline const ::std::string& RemoteCmd_t_Name(RemoteCmd_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteCmd_t_descriptor(), value);
}
inline bool RemoteCmd_t_Parse(
    const ::std::string& name, RemoteCmd_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteCmd_t>(
    RemoteCmd_t_descriptor(), name, value);
}
enum PairingModeOpcode_t {
  PAIRING_DISABLE = 0,
  PAIRING_ENABLE = 1
};
bool PairingModeOpcode_t_IsValid(int value);
const PairingModeOpcode_t PairingModeOpcode_t_MIN = PAIRING_DISABLE;
const PairingModeOpcode_t PairingModeOpcode_t_MAX = PAIRING_ENABLE;
const int PairingModeOpcode_t_ARRAYSIZE = PairingModeOpcode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* PairingModeOpcode_t_descriptor();
inline const ::std::string& PairingModeOpcode_t_Name(PairingModeOpcode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    PairingModeOpcode_t_descriptor(), value);
}
inline bool PairingModeOpcode_t_Parse(
    const ::std::string& name, PairingModeOpcode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PairingModeOpcode_t>(
    PairingModeOpcode_t_descriptor(), name, value);
}
enum A4V_IPC_SOURCE_ID {
  A4V_IPC_SOURCE_STANDBY = 0,
  A4V_IPC_SOURCE_HDMI_1 = 1,
  A4V_IPC_SOURCE_HDMI_2 = 2,
  A4V_IPC_SOURCE_HDMI_3 = 3,
  A4V_IPC_SOURCE_HDMI_4 = 4,
  A4V_IPC_SOURCE_HDMI_5 = 5,
  A4V_IPC_SOURCE_HDMI_6 = 6,
  A4V_IPC_SOURCE_SIDE_AUX = 7,
  A4V_IPC_SOURCE_TV = 8,
  A4V_IPC_SOURCE_SHELBY = 9,
  A4V_IPC_SOURCE_BLUETOOTH = 10,
  A4V_IPC_SOURCE_ADPAPTIQ = 11,
  A4V_IPC_SOURCE_RESERVED1 = 12,
  A4V_IPC_SOURCE_PTS = 13,
  A4V_IPC_SOURCE_UPDATE = 14,
  A4V_IPC_SOURCE_ANALOG_FRONT = 15,
  A4V_IPC_SOURCE_ANALOG1 = 16,
  A4V_IPC_SOURCE_ANALOG2 = 17,
  A4V_IPC_SOURCE_COAX1 = 18,
  A4V_IPC_SOURCE_COAX2 = 19,
  A4V_IPC_SOURCE_OPTICAL1 = 20,
  A4V_IPC_SOURCE_OPTICAL2 = 21,
  A4V_IPC_SOURCE_UNIFY = 22,
  A4V_IPC_SOURCE_ASOC_INTERNAL = 23,
  A4V_IPC_SOURCE_RESERVED2 = 24,
  A4V_IPC_SOURCE_RESERVED3 = 25,
  A4V_IPC_SOURCE_RESERVED4 = 26,
  A4V_IPC_SOURCE_RESERVED5 = 27,
  A4V_IPC_SOURCE_FACTORY_DEFAULT = 28,
  A4V_IPC_NUM_SOURCES = 29,
  A4V_IPC_INVALID_SOURCE = 29
};
bool A4V_IPC_SOURCE_ID_IsValid(int value);
const A4V_IPC_SOURCE_ID A4V_IPC_SOURCE_ID_MIN = A4V_IPC_SOURCE_STANDBY;
const A4V_IPC_SOURCE_ID A4V_IPC_SOURCE_ID_MAX = A4V_IPC_NUM_SOURCES;
const int A4V_IPC_SOURCE_ID_ARRAYSIZE = A4V_IPC_SOURCE_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* A4V_IPC_SOURCE_ID_descriptor();
inline const ::std::string& A4V_IPC_SOURCE_ID_Name(A4V_IPC_SOURCE_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    A4V_IPC_SOURCE_ID_descriptor(), value);
}
inline bool A4V_IPC_SOURCE_ID_Parse(
    const ::std::string& name, A4V_IPC_SOURCE_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<A4V_IPC_SOURCE_ID>(
    A4V_IPC_SOURCE_ID_descriptor(), name, value);
}
enum IPCSourceAckStatus_t {
  IPC_SOURCE_ACTIVATION_STATUS_NACK = 0,
  IPC_SOURCE_ACTIVATION_STATUS_ACK = 1,
  IPC_SOURCE_ACTIVATION_STATUS_FAIL = 2,
  IPC_SOURCE_ACTIVATION_STATUS_DONE = 3
};
bool IPCSourceAckStatus_t_IsValid(int value);
const IPCSourceAckStatus_t IPCSourceAckStatus_t_MIN = IPC_SOURCE_ACTIVATION_STATUS_NACK;
const IPCSourceAckStatus_t IPCSourceAckStatus_t_MAX = IPC_SOURCE_ACTIVATION_STATUS_DONE;
const int IPCSourceAckStatus_t_ARRAYSIZE = IPCSourceAckStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IPCSourceAckStatus_t_descriptor();
inline const ::std::string& IPCSourceAckStatus_t_Name(IPCSourceAckStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IPCSourceAckStatus_t_descriptor(), value);
}
inline bool IPCSourceAckStatus_t_Parse(
    const ::std::string& name, IPCSourceAckStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IPCSourceAckStatus_t>(
    IPCSourceAckStatus_t_descriptor(), name, value);
}
enum A4V_IPCSrcType_t {
  A4V_IPC_SRCTYPE_CABLE_BOX = 0,
  A4V_IPC_SRCTYPE_SAT_BOX = 1,
  A4V_IPC_SRCTYPE_HDTV_TUNER = 2,
  A4V_IPC_SRCTYPE_DIG_TV_TUNER = 3,
  A4V_IPC_SRCTYPE_VCR = 4,
  A4V_IPC_SRCTYPE_DVR = 5,
  A4V_IPC_SRCTYPE_TIVO = 6,
  A4V_IPC_SRCTYPE_SET_TOP_BOX = 7,
  A4V_IPC_SRCTYPE_APPLE_TV = 8,
  A4V_IPC_SRCTYPE_VUDO = 9,
  A4V_IPC_SRCTYPE_DVD_PLAYER = 10,
  A4V_IPC_SRCTYPE_BLURAY_PLAYER = 11,
  A4V_IPC_SRCTYPE_DVD_RECORDER = 12,
  A4V_IPC_SRCTYPE_BLURAY_RECORDER = 13,
  A4V_IPC_SRCTYPE_DVD_VCR = 14,
  A4V_IPC_SRCTYPE_CD_PLAYER = 15,
  A4V_IPC_SRCTYPE_DIG_MEDIA_PLAYER = 16,
  A4V_IPC_SRCTYPE_PLAYSTATION = 17,
  A4V_IPC_SRCTYPE_XBOX = 18,
  A4V_IPC_SRCTYPE_WII = 19,
  A4V_IPC_SRCTYPE_GAME_CONSOLE = 20,
  A4V_IPC_SRCTYPE_ROKU = 21,
  A4V_IPC_SRCTYPE_COMPUTER = 22,
  A4V_IPC_SRCTYPE_IPOD = 23,
  A4V_IPC_SRCTYPE_RADIO_TUNER = 24,
  A4V_IPC_SRCTYPE_XBOX_ONE = 25,
  A4V_IPC_SRCTYPE_XBOX_360 = 26,
  A4V_IPC_SRCTYPE_AMAZON_FIRE_TV = 27,
  A4V_IPC_SRCTYPE_CHROMECAST = 28,
  A4V_IPC_SRCTYPE_BOSE_INTERNAL = 29,
  A4V_IPC_SRCTYPE_UNDEFINED = 30
};
bool A4V_IPCSrcType_t_IsValid(int value);
const A4V_IPCSrcType_t A4V_IPCSrcType_t_MIN = A4V_IPC_SRCTYPE_CABLE_BOX;
const A4V_IPCSrcType_t A4V_IPCSrcType_t_MAX = A4V_IPC_SRCTYPE_UNDEFINED;
const int A4V_IPCSrcType_t_ARRAYSIZE = A4V_IPCSrcType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* A4V_IPCSrcType_t_descriptor();
inline const ::std::string& A4V_IPCSrcType_t_Name(A4V_IPCSrcType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    A4V_IPCSrcType_t_descriptor(), value);
}
inline bool A4V_IPCSrcType_t_Parse(
    const ::std::string& name, A4V_IPCSrcType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<A4V_IPCSrcType_t>(
    A4V_IPCSrcType_t_descriptor(), name, value);
}
enum A4V_IPCContent_t {
  A4V_IPC_CONTENT_UNSPECIFIED = 0,
  A4V_IPC_CONTENT_VIDEO = 1,
  A4V_IPC_CONTENT_AUDIO = 2
};
bool A4V_IPCContent_t_IsValid(int value);
const A4V_IPCContent_t A4V_IPCContent_t_MIN = A4V_IPC_CONTENT_UNSPECIFIED;
const A4V_IPCContent_t A4V_IPCContent_t_MAX = A4V_IPC_CONTENT_AUDIO;
const int A4V_IPCContent_t_ARRAYSIZE = A4V_IPCContent_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* A4V_IPCContent_t_descriptor();
inline const ::std::string& A4V_IPCContent_t_Name(A4V_IPCContent_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    A4V_IPCContent_t_descriptor(), value);
}
inline bool A4V_IPCContent_t_Parse(
    const ::std::string& name, A4V_IPCContent_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<A4V_IPCContent_t>(
    A4V_IPCContent_t_descriptor(), name, value);
}
enum IPCAudioInputSelection_t {
  A4V_IPC_AUDIO_INPUT_HDMI = 0,
  A4V_IPC_AUDIO_INPUT_ANALOG_AUD_1 = 1,
  A4V_IPC_AUDIO_INPUT_ANALOG_AUD_2 = 2,
  A4V_IPC_AUDIO_INPUT_ANALOG_FRONT = 3,
  A4V_IPC_AUDIO_INPUT_MIC = 4,
  A4V_IPC_AUDIO_INPUT_SPDIF_OPTICAL_1 = 5,
  A4V_IPC_AUDIO_INPUT_SPDIF_OPTICAL_2 = 6,
  A4V_IPC_AUDIO_INPUT_SPDIF_COAX_1 = 7,
  A4V_IPC_AUDIO_INPUT_SPDIF_COAX_2 = 8,
  A4V_IPC_AUDIO_INPUT_SPDIF_ARC = 9,
  A4V_IPC_AUDIO_INPUT_SPDIF_NETWORK = 10,
  A4V_IPC_AUDIO_INPUT_SPDIF_AP = 11,
  A4V_IPC_AUDIO_INPUT_MAX_NUM = 12,
  A4V_IPC_AUDIO_INPUT_DEFAULT = 255
};
bool IPCAudioInputSelection_t_IsValid(int value);
const IPCAudioInputSelection_t IPCAudioInputSelection_t_MIN = A4V_IPC_AUDIO_INPUT_HDMI;
const IPCAudioInputSelection_t IPCAudioInputSelection_t_MAX = A4V_IPC_AUDIO_INPUT_DEFAULT;
const int IPCAudioInputSelection_t_ARRAYSIZE = IPCAudioInputSelection_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IPCAudioInputSelection_t_descriptor();
inline const ::std::string& IPCAudioInputSelection_t_Name(IPCAudioInputSelection_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IPCAudioInputSelection_t_descriptor(), value);
}
inline bool IPCAudioInputSelection_t_Parse(
    const ::std::string& name, IPCAudioInputSelection_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IPCAudioInputSelection_t>(
    IPCAudioInputSelection_t_descriptor(), name, value);
}
enum IpcAiqCurveSelect_t {
  IPC_AIQ_CURVE_A = 0,
  IPC_AIQ_CURVE_B = 1,
  IPC_AIQ_CURVE_RETAIL = 2
};
bool IpcAiqCurveSelect_t_IsValid(int value);
const IpcAiqCurveSelect_t IpcAiqCurveSelect_t_MIN = IPC_AIQ_CURVE_A;
const IpcAiqCurveSelect_t IpcAiqCurveSelect_t_MAX = IPC_AIQ_CURVE_RETAIL;
const int IpcAiqCurveSelect_t_ARRAYSIZE = IpcAiqCurveSelect_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAiqCurveSelect_t_descriptor();
inline const ::std::string& IpcAiqCurveSelect_t_Name(IpcAiqCurveSelect_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAiqCurveSelect_t_descriptor(), value);
}
inline bool IpcAiqCurveSelect_t_Parse(
    const ::std::string& name, IpcAiqCurveSelect_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAiqCurveSelect_t>(
    IpcAiqCurveSelect_t_descriptor(), name, value);
}
enum IpcAmpFaultState_t {
  IPC_AMP_NO_FAULT = 0,
  IPC_AMP_MINOR_FAULT = 1,
  IPC_AMP_MAJOR_FAULT = 2
};
bool IpcAmpFaultState_t_IsValid(int value);
const IpcAmpFaultState_t IpcAmpFaultState_t_MIN = IPC_AMP_NO_FAULT;
const IpcAmpFaultState_t IpcAmpFaultState_t_MAX = IPC_AMP_MAJOR_FAULT;
const int IpcAmpFaultState_t_ARRAYSIZE = IpcAmpFaultState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAmpFaultState_t_descriptor();
inline const ::std::string& IpcAmpFaultState_t_Name(IpcAmpFaultState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAmpFaultState_t_descriptor(), value);
}
inline bool IpcAmpFaultState_t_Parse(
    const ::std::string& name, IpcAmpFaultState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAmpFaultState_t>(
    IpcAmpFaultState_t_descriptor(), name, value);
}
enum IpcDualMonoMode_t {
  IPC_DUAL_MONO_BOTH = 0,
  IPC_DUAL_MONO_LEFT = 1,
  IPC_DUAL_MONO_RIGHT = 2
};
bool IpcDualMonoMode_t_IsValid(int value);
const IpcDualMonoMode_t IpcDualMonoMode_t_MIN = IPC_DUAL_MONO_BOTH;
const IpcDualMonoMode_t IpcDualMonoMode_t_MAX = IPC_DUAL_MONO_RIGHT;
const int IpcDualMonoMode_t_ARRAYSIZE = IpcDualMonoMode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcDualMonoMode_t_descriptor();
inline const ::std::string& IpcDualMonoMode_t_Name(IpcDualMonoMode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcDualMonoMode_t_descriptor(), value);
}
inline bool IpcDualMonoMode_t_Parse(
    const ::std::string& name, IpcDualMonoMode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcDualMonoMode_t>(
    IpcDualMonoMode_t_descriptor(), name, value);
}
enum IpcFrontConnectorMode_t {
  IPC_FRONT_CONNECTOR_UNSPECIFIED = 0,
  IPC_FRONT_CONNECTOR_INPUT = 1,
  IPC_FRONT_CONNECTOR_HEADPHONE = 2
};
bool IpcFrontConnectorMode_t_IsValid(int value);
const IpcFrontConnectorMode_t IpcFrontConnectorMode_t_MIN = IPC_FRONT_CONNECTOR_UNSPECIFIED;
const IpcFrontConnectorMode_t IpcFrontConnectorMode_t_MAX = IPC_FRONT_CONNECTOR_HEADPHONE;
const int IpcFrontConnectorMode_t_ARRAYSIZE = IpcFrontConnectorMode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcFrontConnectorMode_t_descriptor();
inline const ::std::string& IpcFrontConnectorMode_t_Name(IpcFrontConnectorMode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcFrontConnectorMode_t_descriptor(), value);
}
inline bool IpcFrontConnectorMode_t_Parse(
    const ::std::string& name, IpcFrontConnectorMode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcFrontConnectorMode_t>(
    IpcFrontConnectorMode_t_descriptor(), name, value);
}
enum IpcDSPMuteProfile_t {
  DSP_MUTEPROFILE_NONE = 0,
  DSP_MUTEPROFILE_INTERNAL = 1,
  DSP_MUTEPROFILE_SOURCE = 2,
  DSP_MUTEPROFILE_TV = 3,
  DSP_MUTEPROFILE_USER = 4
};
bool IpcDSPMuteProfile_t_IsValid(int value);
const IpcDSPMuteProfile_t IpcDSPMuteProfile_t_MIN = DSP_MUTEPROFILE_NONE;
const IpcDSPMuteProfile_t IpcDSPMuteProfile_t_MAX = DSP_MUTEPROFILE_USER;
const int IpcDSPMuteProfile_t_ARRAYSIZE = IpcDSPMuteProfile_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcDSPMuteProfile_t_descriptor();
inline const ::std::string& IpcDSPMuteProfile_t_Name(IpcDSPMuteProfile_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcDSPMuteProfile_t_descriptor(), value);
}
inline bool IpcDSPMuteProfile_t_Parse(
    const ::std::string& name, IpcDSPMuteProfile_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcDSPMuteProfile_t>(
    IpcDSPMuteProfile_t_descriptor(), name, value);
}
enum IpcAudioMode_t {
  IPC_AUDIO_MODE_UNSPECIFIED = 0,
  IPC_AUDIO_MODE_DIRECT = 1,
  IPC_AUDIO_MODE_NORMAL = 2,
  IPC_AUDIO_MODE_DIALOG = 3,
  IPC_AUDIO_MODE_NIGHT = 4
};
bool IpcAudioMode_t_IsValid(int value);
const IpcAudioMode_t IpcAudioMode_t_MIN = IPC_AUDIO_MODE_UNSPECIFIED;
const IpcAudioMode_t IpcAudioMode_t_MAX = IPC_AUDIO_MODE_NIGHT;
const int IpcAudioMode_t_ARRAYSIZE = IpcAudioMode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAudioMode_t_descriptor();
inline const ::std::string& IpcAudioMode_t_Name(IpcAudioMode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAudioMode_t_descriptor(), value);
}
inline bool IpcAudioMode_t_Parse(
    const ::std::string& name, IpcAudioMode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAudioMode_t>(
    IpcAudioMode_t_descriptor(), name, value);
}
enum IpcSpeakerPackage_t {
  IPC_SPEAKER_PACKAGE_BARDEEN_OMNIVO = 80,
  IPC_SPEAKER_PACKAGE_BARDEEN_JEWELCUBES = 81,
  IPC_SPEAKER_PACKAGE_GINGER = 82,
  IPC_SPEAKER_PACKAGE_GINGERSKIPPER = 83,
  IPC_SPEAKER_PACKAGE_GINGERMAXWELL = 84,
  IPC_SPEAKER_PACKAGE_GINGERSKIPPERMAXWELL = 85,
  IPC_FIRST_VALID_SPEAKER_PACKAGE = 80,
  IPC_LAST_VALID_SPEAKER_PACKAGE = 85
};
bool IpcSpeakerPackage_t_IsValid(int value);
const IpcSpeakerPackage_t IpcSpeakerPackage_t_MIN = IPC_SPEAKER_PACKAGE_BARDEEN_OMNIVO;
const IpcSpeakerPackage_t IpcSpeakerPackage_t_MAX = IPC_SPEAKER_PACKAGE_GINGERSKIPPERMAXWELL;
const int IpcSpeakerPackage_t_ARRAYSIZE = IpcSpeakerPackage_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcSpeakerPackage_t_descriptor();
inline const ::std::string& IpcSpeakerPackage_t_Name(IpcSpeakerPackage_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcSpeakerPackage_t_descriptor(), value);
}
inline bool IpcSpeakerPackage_t_Parse(
    const ::std::string& name, IpcSpeakerPackage_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcSpeakerPackage_t>(
    IpcSpeakerPackage_t_descriptor(), name, value);
}
enum IpcAccessoryFlags_t {
  IPC_NO_ACCESSORY = 0,
  IPC_BASSBOX_WIRED = 1,
  IPC_REAR_SPEAKERS_WIRED = 2
};
bool IpcAccessoryFlags_t_IsValid(int value);
const IpcAccessoryFlags_t IpcAccessoryFlags_t_MIN = IPC_NO_ACCESSORY;
const IpcAccessoryFlags_t IpcAccessoryFlags_t_MAX = IPC_REAR_SPEAKERS_WIRED;
const int IpcAccessoryFlags_t_ARRAYSIZE = IpcAccessoryFlags_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAccessoryFlags_t_descriptor();
inline const ::std::string& IpcAccessoryFlags_t_Name(IpcAccessoryFlags_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAccessoryFlags_t_descriptor(), value);
}
inline bool IpcAccessoryFlags_t_Parse(
    const ::std::string& name, IpcAccessoryFlags_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAccessoryFlags_t>(
    IpcAccessoryFlags_t_descriptor(), name, value);
}
enum IpcDspToneId_t {
  IPC_DSP_TONE_FORCE_STOP = 0,
  IPC_DSP_TONE_AUTO_WAKE_ENABLE = 1,
  IPC_DSP_TONE_AUTO_WAKE_DISABLE = 2,
  IPC_DSP_TONE_SPEAKER_CONNECT_LS = 3,
  IPC_DSP_TONE_SPEAKER_CONNECT_RS = 4,
  IPC_DSP_TONE_SPEAKER_CONNECT_LFE = 5,
  IPC_DSP_TONE_BT_PAIRED = 6,
  IPC_DSP_TONE_PAIRING_LIST_CLEARED = 7,
  IPC_DSP_TONE_PRESET_SET = 8
};
bool IpcDspToneId_t_IsValid(int value);
const IpcDspToneId_t IpcDspToneId_t_MIN = IPC_DSP_TONE_FORCE_STOP;
const IpcDspToneId_t IpcDspToneId_t_MAX = IPC_DSP_TONE_PRESET_SET;
const int IpcDspToneId_t_ARRAYSIZE = IpcDspToneId_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcDspToneId_t_descriptor();
inline const ::std::string& IpcDspToneId_t_Name(IpcDspToneId_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcDspToneId_t_descriptor(), value);
}
inline bool IpcDspToneId_t_Parse(
    const ::std::string& name, IpcDspToneId_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcDspToneId_t>(
    IpcDspToneId_t_descriptor(), name, value);
}
enum IpcToneLocationBits_t {
  IPC_TONE_LOCATION_L = 1,
  IPC_TONE_LOCATION_R = 2,
  IPC_TONE_LOCATION_LFE = 4,
  IPC_TONE_LOCATION_C = 8,
  IPC_TONE_LOCATION_LS = 16,
  IPC_TONE_LOCATION_RS = 32,
  IPC_TONE_LOCATION_LB = 64,
  IPC_TONE_LOCATION_RB = 128,
  IPC_TONE_LOCATION_ALL = 65535
};
bool IpcToneLocationBits_t_IsValid(int value);
const IpcToneLocationBits_t IpcToneLocationBits_t_MIN = IPC_TONE_LOCATION_L;
const IpcToneLocationBits_t IpcToneLocationBits_t_MAX = IPC_TONE_LOCATION_ALL;
const int IpcToneLocationBits_t_ARRAYSIZE = IpcToneLocationBits_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcToneLocationBits_t_descriptor();
inline const ::std::string& IpcToneLocationBits_t_Name(IpcToneLocationBits_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcToneLocationBits_t_descriptor(), value);
}
inline bool IpcToneLocationBits_t_Parse(
    const ::std::string& name, IpcToneLocationBits_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcToneLocationBits_t>(
    IpcToneLocationBits_t_descriptor(), name, value);
}
enum IpcSTNetworkStatus_t {
  IPC_ST_NETWORKSTATUS_OFF = 0,
  IPC_ST_NETWORKSTATUS_WIFIAP = 1,
  IPC_ST_NETWORKSTATUS_WIFI = 2,
  IPC_ST_NETWORKSTATUS_WIFICONNECTING = 3,
  IPC_ST_NETWORKSTATUS_ETHERNET = 4
};
bool IpcSTNetworkStatus_t_IsValid(int value);
const IpcSTNetworkStatus_t IpcSTNetworkStatus_t_MIN = IPC_ST_NETWORKSTATUS_OFF;
const IpcSTNetworkStatus_t IpcSTNetworkStatus_t_MAX = IPC_ST_NETWORKSTATUS_ETHERNET;
const int IpcSTNetworkStatus_t_ARRAYSIZE = IpcSTNetworkStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcSTNetworkStatus_t_descriptor();
inline const ::std::string& IpcSTNetworkStatus_t_Name(IpcSTNetworkStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcSTNetworkStatus_t_descriptor(), value);
}
inline bool IpcSTNetworkStatus_t_Parse(
    const ::std::string& name, IpcSTNetworkStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcSTNetworkStatus_t>(
    IpcSTNetworkStatus_t_descriptor(), name, value);
}
enum IpcSTBluetoothStatus {
  IPC_ST_BTSTATUS_OFF = 0,
  IPC_ST_BTSTATUS_PAIRING = 1,
  IPC_ST_BTSTATUS_CONNECTING = 2,
  IPC_ST_BTSTATUS_CONNECTED = 3
};
bool IpcSTBluetoothStatus_IsValid(int value);
const IpcSTBluetoothStatus IpcSTBluetoothStatus_MIN = IPC_ST_BTSTATUS_OFF;
const IpcSTBluetoothStatus IpcSTBluetoothStatus_MAX = IPC_ST_BTSTATUS_CONNECTED;
const int IpcSTBluetoothStatus_ARRAYSIZE = IpcSTBluetoothStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcSTBluetoothStatus_descriptor();
inline const ::std::string& IpcSTBluetoothStatus_Name(IpcSTBluetoothStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcSTBluetoothStatus_descriptor(), value);
}
inline bool IpcSTBluetoothStatus_Parse(
    const ::std::string& name, IpcSTBluetoothStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcSTBluetoothStatus>(
    IpcSTBluetoothStatus_descriptor(), name, value);
}
enum IpcLEDControlParams_t {
  IPC_LED_CONTROL_COMMAND = 0,
  IPC_LED_CONTROL_LED_NUMBER = 1
};
bool IpcLEDControlParams_t_IsValid(int value);
const IpcLEDControlParams_t IpcLEDControlParams_t_MIN = IPC_LED_CONTROL_COMMAND;
const IpcLEDControlParams_t IpcLEDControlParams_t_MAX = IPC_LED_CONTROL_LED_NUMBER;
const int IpcLEDControlParams_t_ARRAYSIZE = IpcLEDControlParams_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcLEDControlParams_t_descriptor();
inline const ::std::string& IpcLEDControlParams_t_Name(IpcLEDControlParams_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcLEDControlParams_t_descriptor(), value);
}
inline bool IpcLEDControlParams_t_Parse(
    const ::std::string& name, IpcLEDControlParams_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcLEDControlParams_t>(
    IpcLEDControlParams_t_descriptor(), name, value);
}
enum IpcLEDControlCommands_t {
  IPC_LED_CONTROL_COMMAND_ON = 0,
  IPC_LED_CONTROL_COMMAND_OFF = 1,
  IPC_LED_CONTROL_COMMAND_BLINK = 2,
  IPC_LED_CONTROL_COMMAND_PULSE = 3,
  IPC_LED_CONTROL_COMMAND_RELINQUISH = 4
};
bool IpcLEDControlCommands_t_IsValid(int value);
const IpcLEDControlCommands_t IpcLEDControlCommands_t_MIN = IPC_LED_CONTROL_COMMAND_ON;
const IpcLEDControlCommands_t IpcLEDControlCommands_t_MAX = IPC_LED_CONTROL_COMMAND_RELINQUISH;
const int IpcLEDControlCommands_t_ARRAYSIZE = IpcLEDControlCommands_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcLEDControlCommands_t_descriptor();
inline const ::std::string& IpcLEDControlCommands_t_Name(IpcLEDControlCommands_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcLEDControlCommands_t_descriptor(), value);
}
inline bool IpcLEDControlCommands_t_Parse(
    const ::std::string& name, IpcLEDControlCommands_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcLEDControlCommands_t>(
    IpcLEDControlCommands_t_descriptor(), name, value);
}
enum IpcLEDControlLEDNumber_t {
  IPC_LED_CONTROL_LED_WIFI_WHITE = 0,
  IPC_LED_CONTROL_LED_WIFI_AMBER = 1,
  IPC_LED_CONTROL_LED_BT_WHITE = 2,
  IPC_LED_CONTROL_LED_BT_BLUE = 3,
  IPC_LED_CONTROL_LED_AUX_WHITE = 4,
  IPC_LED_CONTROL_LED_SHELBY_WHITE = 5,
  IPC_LED_CONTROL_LED_SHELBY_AMBER = 6,
  IPC_LED_CONTROL_LED_TV_WHITE = 7,
  IPC_LED_CONTROL_LED_TV_GREEN = 8,
  IPC_LED_CONTROL_LED_BT_GREEN = 9,
  IPC_LED_CONTROL_LED_HEADSET_WHITE = 10,
  IPC_LED_CONTROL_LED_MAX_NUMBER = 10
};
bool IpcLEDControlLEDNumber_t_IsValid(int value);
const IpcLEDControlLEDNumber_t IpcLEDControlLEDNumber_t_MIN = IPC_LED_CONTROL_LED_WIFI_WHITE;
const IpcLEDControlLEDNumber_t IpcLEDControlLEDNumber_t_MAX = IPC_LED_CONTROL_LED_HEADSET_WHITE;
const int IpcLEDControlLEDNumber_t_ARRAYSIZE = IpcLEDControlLEDNumber_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcLEDControlLEDNumber_t_descriptor();
inline const ::std::string& IpcLEDControlLEDNumber_t_Name(IpcLEDControlLEDNumber_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcLEDControlLEDNumber_t_descriptor(), value);
}
inline bool IpcLEDControlLEDNumber_t_Parse(
    const ::std::string& name, IpcLEDControlLEDNumber_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcLEDControlLEDNumber_t>(
    IpcLEDControlLEDNumber_t_descriptor(), name, value);
}
enum IpcLEDControlArgumentsShort_t {
  IPC_LED_CONTROL_ARGUMENT_SHORT_INTENSITY = 0
};
bool IpcLEDControlArgumentsShort_t_IsValid(int value);
const IpcLEDControlArgumentsShort_t IpcLEDControlArgumentsShort_t_MIN = IPC_LED_CONTROL_ARGUMENT_SHORT_INTENSITY;
const IpcLEDControlArgumentsShort_t IpcLEDControlArgumentsShort_t_MAX = IPC_LED_CONTROL_ARGUMENT_SHORT_INTENSITY;
const int IpcLEDControlArgumentsShort_t_ARRAYSIZE = IpcLEDControlArgumentsShort_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcLEDControlArgumentsShort_t_descriptor();
inline const ::std::string& IpcLEDControlArgumentsShort_t_Name(IpcLEDControlArgumentsShort_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcLEDControlArgumentsShort_t_descriptor(), value);
}
inline bool IpcLEDControlArgumentsShort_t_Parse(
    const ::std::string& name, IpcLEDControlArgumentsShort_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcLEDControlArgumentsShort_t>(
    IpcLEDControlArgumentsShort_t_descriptor(), name, value);
}
enum IpcLEDControlArgumentsLong_t {
  IPC_LED_CONTROL_ARGUMENT_LONG_ITERATIONS = 0,
  IPC_LED_CONTROL_ARGUMENT_LONG_FINAL_MAX_INTENSITY = 2,
  IPC_LED_CONTROL_ARGUMENT_LONG_DEPTH = 3,
  IPC_LED_CONTROL_ARGUMENT_LONG_DURATION = 4,
  IPC_LED_CONTROL_ARGUMENT_LONG_INTENSITY = 6
};
bool IpcLEDControlArgumentsLong_t_IsValid(int value);
const IpcLEDControlArgumentsLong_t IpcLEDControlArgumentsLong_t_MIN = IPC_LED_CONTROL_ARGUMENT_LONG_ITERATIONS;
const IpcLEDControlArgumentsLong_t IpcLEDControlArgumentsLong_t_MAX = IPC_LED_CONTROL_ARGUMENT_LONG_INTENSITY;
const int IpcLEDControlArgumentsLong_t_ARRAYSIZE = IpcLEDControlArgumentsLong_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcLEDControlArgumentsLong_t_descriptor();
inline const ::std::string& IpcLEDControlArgumentsLong_t_Name(IpcLEDControlArgumentsLong_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcLEDControlArgumentsLong_t_descriptor(), value);
}
inline bool IpcLEDControlArgumentsLong_t_Parse(
    const ::std::string& name, IpcLEDControlArgumentsLong_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcLEDControlArgumentsLong_t>(
    IpcLEDControlArgumentsLong_t_descriptor(), name, value);
}
enum WhyIsThisAnEnum_t {
  IPC_LED_CONTROL_ARGUMENT_LONG_MAX_DEPTH = 8
};
bool WhyIsThisAnEnum_t_IsValid(int value);
const WhyIsThisAnEnum_t WhyIsThisAnEnum_t_MIN = IPC_LED_CONTROL_ARGUMENT_LONG_MAX_DEPTH;
const WhyIsThisAnEnum_t WhyIsThisAnEnum_t_MAX = IPC_LED_CONTROL_ARGUMENT_LONG_MAX_DEPTH;
const int WhyIsThisAnEnum_t_ARRAYSIZE = WhyIsThisAnEnum_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhyIsThisAnEnum_t_descriptor();
inline const ::std::string& WhyIsThisAnEnum_t_Name(WhyIsThisAnEnum_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhyIsThisAnEnum_t_descriptor(), value);
}
inline bool WhyIsThisAnEnum_t_Parse(
    const ::std::string& name, WhyIsThisAnEnum_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhyIsThisAnEnum_t>(
    WhyIsThisAnEnum_t_descriptor(), name, value);
}
enum IpcWifiRadioContolCommand_t {
  IPC_WIFI_RADIO_CONTROL_COMMAND_ON = 0,
  IPC_WIFI_RADIO_CONTROL_COMMAND_OFF = 1,
  IPC_WIFI_RADIO_CONTROL_COMMAND_TOGGLE = 2
};
bool IpcWifiRadioContolCommand_t_IsValid(int value);
const IpcWifiRadioContolCommand_t IpcWifiRadioContolCommand_t_MIN = IPC_WIFI_RADIO_CONTROL_COMMAND_ON;
const IpcWifiRadioContolCommand_t IpcWifiRadioContolCommand_t_MAX = IPC_WIFI_RADIO_CONTROL_COMMAND_TOGGLE;
const int IpcWifiRadioContolCommand_t_ARRAYSIZE = IpcWifiRadioContolCommand_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcWifiRadioContolCommand_t_descriptor();
inline const ::std::string& IpcWifiRadioContolCommand_t_Name(IpcWifiRadioContolCommand_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcWifiRadioContolCommand_t_descriptor(), value);
}
inline bool IpcWifiRadioContolCommand_t_Parse(
    const ::std::string& name, IpcWifiRadioContolCommand_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcWifiRadioContolCommand_t>(
    IpcWifiRadioContolCommand_t_descriptor(), name, value);
}
enum IpcWifiRadioContolTarget_t {
  IPC_WIFI_RADIO_CONTROL_TARGET_WIFI_RADIO = 0,
  IPC_WIFI_RADIO_CONTROL_TARGET_AP_MODE = 1
};
bool IpcWifiRadioContolTarget_t_IsValid(int value);
const IpcWifiRadioContolTarget_t IpcWifiRadioContolTarget_t_MIN = IPC_WIFI_RADIO_CONTROL_TARGET_WIFI_RADIO;
const IpcWifiRadioContolTarget_t IpcWifiRadioContolTarget_t_MAX = IPC_WIFI_RADIO_CONTROL_TARGET_AP_MODE;
const int IpcWifiRadioContolTarget_t_ARRAYSIZE = IpcWifiRadioContolTarget_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcWifiRadioContolTarget_t_descriptor();
inline const ::std::string& IpcWifiRadioContolTarget_t_Name(IpcWifiRadioContolTarget_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcWifiRadioContolTarget_t_descriptor(), value);
}
inline bool IpcWifiRadioContolTarget_t_Parse(
    const ::std::string& name, IpcWifiRadioContolTarget_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcWifiRadioContolTarget_t>(
    IpcWifiRadioContolTarget_t_descriptor(), name, value);
}
enum IpcSTContentControlCommand_t {
  ST_CONTENT_CONTROL_COMMAND_PRESET_SELECT = 0,
  ST_CONTENT_CONTROL_COMMAND_PRESET_SET = 1,
  ST_CONTENT_CONTROL_COMMAND_PRESET_CLEAR = 2,
  ST_CONTENT_CONTROL_COMMAND_CONTENT_CONTROL = 3
};
bool IpcSTContentControlCommand_t_IsValid(int value);
const IpcSTContentControlCommand_t IpcSTContentControlCommand_t_MIN = ST_CONTENT_CONTROL_COMMAND_PRESET_SELECT;
const IpcSTContentControlCommand_t IpcSTContentControlCommand_t_MAX = ST_CONTENT_CONTROL_COMMAND_CONTENT_CONTROL;
const int IpcSTContentControlCommand_t_ARRAYSIZE = IpcSTContentControlCommand_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcSTContentControlCommand_t_descriptor();
inline const ::std::string& IpcSTContentControlCommand_t_Name(IpcSTContentControlCommand_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcSTContentControlCommand_t_descriptor(), value);
}
inline bool IpcSTContentControlCommand_t_Parse(
    const ::std::string& name, IpcSTContentControlCommand_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcSTContentControlCommand_t>(
    IpcSTContentControlCommand_t_descriptor(), name, value);
}
enum IpcSTContentControlAction_t {
  ST_CONTENT_CONTROL_ACTION_STOP = 0,
  ST_CONTENT_CONTROL_ACTION_PLAY = 1,
  ST_CONTENT_CONTROL_ACTION_PAUSE = 2,
  ST_CONTENT_CONTROL_ACTION_PLAY_PAUSE = 3,
  ST_CONTENT_CONTROL_ACTION_NEXT_TRACK = 4,
  ST_CONTENT_CONTROL_ACTION_PREVIOUS_TRACK = 5,
  ST_CONTENT_CONTROL_ACTION_RATE_UP = 6,
  ST_CONTENT_CONTROL_ACTION_RATE_DOWN = 7,
  ST_CONTENT_CONTROL_ACTION_RATE_NONE = 8
};
bool IpcSTContentControlAction_t_IsValid(int value);
const IpcSTContentControlAction_t IpcSTContentControlAction_t_MIN = ST_CONTENT_CONTROL_ACTION_STOP;
const IpcSTContentControlAction_t IpcSTContentControlAction_t_MAX = ST_CONTENT_CONTROL_ACTION_RATE_NONE;
const int IpcSTContentControlAction_t_ARRAYSIZE = IpcSTContentControlAction_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcSTContentControlAction_t_descriptor();
inline const ::std::string& IpcSTContentControlAction_t_Name(IpcSTContentControlAction_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcSTContentControlAction_t_descriptor(), value);
}
inline bool IpcSTContentControlAction_t_Parse(
    const ::std::string& name, IpcSTContentControlAction_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcSTContentControlAction_t>(
    IpcSTContentControlAction_t_descriptor(), name, value);
}
enum IpcControlUpdateCommand_t {
  IPC_CONTROL_DISPLAY_SOUNDTOUCH_UPDATE_STATE = 0,
  IPC_CONTROL_UPDATE_ATTEMPT_SYSTEM_UPDATE = 1
};
bool IpcControlUpdateCommand_t_IsValid(int value);
const IpcControlUpdateCommand_t IpcControlUpdateCommand_t_MIN = IPC_CONTROL_DISPLAY_SOUNDTOUCH_UPDATE_STATE;
const IpcControlUpdateCommand_t IpcControlUpdateCommand_t_MAX = IPC_CONTROL_UPDATE_ATTEMPT_SYSTEM_UPDATE;
const int IpcControlUpdateCommand_t_ARRAYSIZE = IpcControlUpdateCommand_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcControlUpdateCommand_t_descriptor();
inline const ::std::string& IpcControlUpdateCommand_t_Name(IpcControlUpdateCommand_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcControlUpdateCommand_t_descriptor(), value);
}
inline bool IpcControlUpdateCommand_t_Parse(
    const ::std::string& name, IpcControlUpdateCommand_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcControlUpdateCommand_t>(
    IpcControlUpdateCommand_t_descriptor(), name, value);
}
enum IpcUpdateDisplayStatus_t {
  IPC_UPDATE_DISPLAY_STATUS_IDLE = 1,
  IPC_UPDATE_DISPLAY_STATUS_DOWNLOADING = 2,
  IPC_UPDATE_DISPLAY_STATUS_AUTHENTICATING = 3,
  IPC_UPDATE_DISPLAY_STATUS_INSTALLING = 4,
  IPC_UPDATE_DISPLAY_STATUS_COMPLETED = 5
};
bool IpcUpdateDisplayStatus_t_IsValid(int value);
const IpcUpdateDisplayStatus_t IpcUpdateDisplayStatus_t_MIN = IPC_UPDATE_DISPLAY_STATUS_IDLE;
const IpcUpdateDisplayStatus_t IpcUpdateDisplayStatus_t_MAX = IPC_UPDATE_DISPLAY_STATUS_COMPLETED;
const int IpcUpdateDisplayStatus_t_ARRAYSIZE = IpcUpdateDisplayStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcUpdateDisplayStatus_t_descriptor();
inline const ::std::string& IpcUpdateDisplayStatus_t_Name(IpcUpdateDisplayStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcUpdateDisplayStatus_t_descriptor(), value);
}
inline bool IpcUpdateDisplayStatus_t_Parse(
    const ::std::string& name, IpcUpdateDisplayStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcUpdateDisplayStatus_t>(
    IpcUpdateDisplayStatus_t_descriptor(), name, value);
}
enum IpcCECSelectModes_t {
  IPC_CEC_MODE_OFF = 0,
  IPC_CEC_MODE_ON = 1,
  IPC_CEC_MODE_ALTENATIVE = 2,
  IPC_CEC_MODE_FINE = 3
};
bool IpcCECSelectModes_t_IsValid(int value);
const IpcCECSelectModes_t IpcCECSelectModes_t_MIN = IPC_CEC_MODE_OFF;
const IpcCECSelectModes_t IpcCECSelectModes_t_MAX = IPC_CEC_MODE_FINE;
const int IpcCECSelectModes_t_ARRAYSIZE = IpcCECSelectModes_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcCECSelectModes_t_descriptor();
inline const ::std::string& IpcCECSelectModes_t_Name(IpcCECSelectModes_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcCECSelectModes_t_descriptor(), value);
}
inline bool IpcCECSelectModes_t_Parse(
    const ::std::string& name, IpcCECSelectModes_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcCECSelectModes_t>(
    IpcCECSelectModes_t_descriptor(), name, value);
}
enum IpcHDMIInputSelection_t {
  IPC_HDMI_IN_NONE = 0,
  IPC_HDMI_IN_SOURCE_01 = 1,
  IPC_HDMI_IN_SOURCE_02 = 2,
  IPC_HDMI_IN_SOURCE_03 = 3,
  IPC_HDMI_IN_SOURCE_04 = 4
};
bool IpcHDMIInputSelection_t_IsValid(int value);
const IpcHDMIInputSelection_t IpcHDMIInputSelection_t_MIN = IPC_HDMI_IN_NONE;
const IpcHDMIInputSelection_t IpcHDMIInputSelection_t_MAX = IPC_HDMI_IN_SOURCE_04;
const int IpcHDMIInputSelection_t_ARRAYSIZE = IpcHDMIInputSelection_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcHDMIInputSelection_t_descriptor();
inline const ::std::string& IpcHDMIInputSelection_t_Name(IpcHDMIInputSelection_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcHDMIInputSelection_t_descriptor(), value);
}
inline bool IpcHDMIInputSelection_t_Parse(
    const ::std::string& name, IpcHDMIInputSelection_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcHDMIInputSelection_t>(
    IpcHDMIInputSelection_t_descriptor(), name, value);
}
enum IpcAudioMuteState_t {
  IPC_AUDIO_MUTE_UNSPECIFIED = 0,
  IPC_AUDIO_MUTE_ENABLE = 1,
  IPC_AUDIO_MUTE_DISABLE = 2
};
bool IpcAudioMuteState_t_IsValid(int value);
const IpcAudioMuteState_t IpcAudioMuteState_t_MIN = IPC_AUDIO_MUTE_UNSPECIFIED;
const IpcAudioMuteState_t IpcAudioMuteState_t_MAX = IPC_AUDIO_MUTE_DISABLE;
const int IpcAudioMuteState_t_ARRAYSIZE = IpcAudioMuteState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcAudioMuteState_t_descriptor();
inline const ::std::string& IpcAudioMuteState_t_Name(IpcAudioMuteState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcAudioMuteState_t_descriptor(), value);
}
inline bool IpcAudioMuteState_t_Parse(
    const ::std::string& name, IpcAudioMuteState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcAudioMuteState_t>(
    IpcAudioMuteState_t_descriptor(), name, value);
}
enum AccessoryType_t {
  ACCESSORY_SUB = 0,
  ACCESSORY_REAR_SURROUND = 1
};
bool AccessoryType_t_IsValid(int value);
const AccessoryType_t AccessoryType_t_MIN = ACCESSORY_SUB;
const AccessoryType_t AccessoryType_t_MAX = ACCESSORY_REAR_SURROUND;
const int AccessoryType_t_ARRAYSIZE = AccessoryType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessoryType_t_descriptor();
inline const ::std::string& AccessoryType_t_Name(AccessoryType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessoryType_t_descriptor(), value);
}
inline bool AccessoryType_t_Parse(
    const ::std::string& name, AccessoryType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessoryType_t>(
    AccessoryType_t_descriptor(), name, value);
}
enum AccessoryPosition_t {
  ACCESSORY_POSITION_SUB = 0,
  ACCESSORY_POSITION_LEFT_REAR = 1,
  ACCESSORY_POSITION_RIGHT_REAR = 2
};
bool AccessoryPosition_t_IsValid(int value);
const AccessoryPosition_t AccessoryPosition_t_MIN = ACCESSORY_POSITION_SUB;
const AccessoryPosition_t AccessoryPosition_t_MAX = ACCESSORY_POSITION_RIGHT_REAR;
const int AccessoryPosition_t_ARRAYSIZE = AccessoryPosition_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessoryPosition_t_descriptor();
inline const ::std::string& AccessoryPosition_t_Name(AccessoryPosition_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessoryPosition_t_descriptor(), value);
}
inline bool AccessoryPosition_t_Parse(
    const ::std::string& name, AccessoryPosition_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessoryPosition_t>(
    AccessoryPosition_t_descriptor(), name, value);
}
enum AccessoryConnectionStatus_t {
  ACCESSORY_CONNECTION_NONE = 0,
  ACCESSORY_CONNECTION_WIRED = 1,
  ACCESSORY_CONNECTION_WIRELESS = 2
};
bool AccessoryConnectionStatus_t_IsValid(int value);
const AccessoryConnectionStatus_t AccessoryConnectionStatus_t_MIN = ACCESSORY_CONNECTION_NONE;
const AccessoryConnectionStatus_t AccessoryConnectionStatus_t_MAX = ACCESSORY_CONNECTION_WIRELESS;
const int AccessoryConnectionStatus_t_ARRAYSIZE = AccessoryConnectionStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessoryConnectionStatus_t_descriptor();
inline const ::std::string& AccessoryConnectionStatus_t_Name(AccessoryConnectionStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessoryConnectionStatus_t_descriptor(), value);
}
inline bool AccessoryConnectionStatus_t_Parse(
    const ::std::string& name, AccessoryConnectionStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessoryConnectionStatus_t>(
    AccessoryConnectionStatus_t_descriptor(), name, value);
}
enum AccessoryActiveState_t {
  ACCESSORY_ACTIVE_NOT_INITIALIZED = 0,
  ACCESSORY_DEACTIVATED = 1,
  ACCESSORY_ACTIVATED = 2
};
bool AccessoryActiveState_t_IsValid(int value);
const AccessoryActiveState_t AccessoryActiveState_t_MIN = ACCESSORY_ACTIVE_NOT_INITIALIZED;
const AccessoryActiveState_t AccessoryActiveState_t_MAX = ACCESSORY_ACTIVATED;
const int AccessoryActiveState_t_ARRAYSIZE = AccessoryActiveState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessoryActiveState_t_descriptor();
inline const ::std::string& AccessoryActiveState_t_Name(AccessoryActiveState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessoryActiveState_t_descriptor(), value);
}
inline bool AccessoryActiveState_t_Parse(
    const ::std::string& name, AccessoryActiveState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessoryActiveState_t>(
    AccessoryActiveState_t_descriptor(), name, value);
}
enum F0_PowerDevice_t {
  POWER_DEVICE_INVALID = 0,
  POWER_DEVICE_HDMI = 1,
  POWER_DEVICE_SYSTEM = 2,
  POWER_DEVICE_ASOC = 3,
  POWER_DEVICE_SM2 = 6,
  POWER_DEVICE_HDMI_FAIL = 7,
  NUM_POWER_DEVICES = 8
};
bool F0_PowerDevice_t_IsValid(int value);
const F0_PowerDevice_t F0_PowerDevice_t_MIN = POWER_DEVICE_INVALID;
const F0_PowerDevice_t F0_PowerDevice_t_MAX = NUM_POWER_DEVICES;
const int F0_PowerDevice_t_ARRAYSIZE = F0_PowerDevice_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* F0_PowerDevice_t_descriptor();
inline const ::std::string& F0_PowerDevice_t_Name(F0_PowerDevice_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    F0_PowerDevice_t_descriptor(), value);
}
inline bool F0_PowerDevice_t_Parse(
    const ::std::string& name, F0_PowerDevice_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<F0_PowerDevice_t>(
    F0_PowerDevice_t_descriptor(), name, value);
}
enum ST_ControlBT_t {
  IPC_ST_CONTROL_BT__SET_BT_PAIRING = 0,
  IPC_ST_CONTROL_BT__CLEAR_BT_PAIR_LIST = 1,
  IPC_ST_CONTROL_BT__BT_DATA = 2
};
bool ST_ControlBT_t_IsValid(int value);
const ST_ControlBT_t ST_ControlBT_t_MIN = IPC_ST_CONTROL_BT__SET_BT_PAIRING;
const ST_ControlBT_t ST_ControlBT_t_MAX = IPC_ST_CONTROL_BT__BT_DATA;
const int ST_ControlBT_t_ARRAYSIZE = ST_ControlBT_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* ST_ControlBT_t_descriptor();
inline const ::std::string& ST_ControlBT_t_Name(ST_ControlBT_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    ST_ControlBT_t_descriptor(), value);
}
inline bool ST_ControlBT_t_Parse(
    const ::std::string& name, ST_ControlBT_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ST_ControlBT_t>(
    ST_ControlBT_t_descriptor(), name, value);
}
enum ST_ControlUpdate_t {
  IPC_ST_CONTROL__DISPLAY_UPDATE_STATUS = 0,
  IPC_ST_CONTROL__ATTEMPT_SYSTEM_UPDATE = 1
};
bool ST_ControlUpdate_t_IsValid(int value);
const ST_ControlUpdate_t ST_ControlUpdate_t_MIN = IPC_ST_CONTROL__DISPLAY_UPDATE_STATUS;
const ST_ControlUpdate_t ST_ControlUpdate_t_MAX = IPC_ST_CONTROL__ATTEMPT_SYSTEM_UPDATE;
const int ST_ControlUpdate_t_ARRAYSIZE = ST_ControlUpdate_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* ST_ControlUpdate_t_descriptor();
inline const ::std::string& ST_ControlUpdate_t_Name(ST_ControlUpdate_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    ST_ControlUpdate_t_descriptor(), value);
}
inline bool ST_ControlUpdate_t_Parse(
    const ::std::string& name, ST_ControlUpdate_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ST_ControlUpdate_t>(
    ST_ControlUpdate_t_descriptor(), name, value);
}
enum Ipc_TimeoutCommand_t {
  TIMEOUT_CMD_INVALID = 0,
  TIMEOUT_CMD_SET = 1,
  TIMEOUT_CMD_GET = 2,
  TIMEOUT_CMD_RSP = 3,
  TIMEOUT_CMD_TRIGGERED = 4,
  TIMEOUT_CMD_CLEARED = 5
};
bool Ipc_TimeoutCommand_t_IsValid(int value);
const Ipc_TimeoutCommand_t Ipc_TimeoutCommand_t_MIN = TIMEOUT_CMD_INVALID;
const Ipc_TimeoutCommand_t Ipc_TimeoutCommand_t_MAX = TIMEOUT_CMD_CLEARED;
const int Ipc_TimeoutCommand_t_ARRAYSIZE = Ipc_TimeoutCommand_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipc_TimeoutCommand_t_descriptor();
inline const ::std::string& Ipc_TimeoutCommand_t_Name(Ipc_TimeoutCommand_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipc_TimeoutCommand_t_descriptor(), value);
}
inline bool Ipc_TimeoutCommand_t_Parse(
    const ::std::string& name, Ipc_TimeoutCommand_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipc_TimeoutCommand_t>(
    Ipc_TimeoutCommand_t_descriptor(), name, value);
}
enum IpcRebootType_t {
  REBOOT_TYPE_SYSTEM = 0,
  REBOOT_TYPE_RECOVERY = 1,
  REBOOT_TYPE_POWERDOWN = 2,
  REBOOT_TYPE_SHUTDOWN_ACK = 3,
  REBOOT_TYPE_FACTORY_TEST = 4,
  REBOOT_TYPE_DEVICE_ONLY = 5,
  REBOOT_TYPE_SM2_RECOVERY = 6
};
bool IpcRebootType_t_IsValid(int value);
const IpcRebootType_t IpcRebootType_t_MIN = REBOOT_TYPE_SYSTEM;
const IpcRebootType_t IpcRebootType_t_MAX = REBOOT_TYPE_SM2_RECOVERY;
const int IpcRebootType_t_ARRAYSIZE = IpcRebootType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcRebootType_t_descriptor();
inline const ::std::string& IpcRebootType_t_Name(IpcRebootType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcRebootType_t_descriptor(), value);
}
inline bool IpcRebootType_t_Parse(
    const ::std::string& name, IpcRebootType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcRebootType_t>(
    IpcRebootType_t_descriptor(), name, value);
}
enum IpcTriStateParam {
  IPC_PARAM_NO_CHANGE = 0,
  IPC_PARAM_ENABLE = 1,
  IPC_PARAM_DISABLE = 2
};
bool IpcTriStateParam_IsValid(int value);
const IpcTriStateParam IpcTriStateParam_MIN = IPC_PARAM_NO_CHANGE;
const IpcTriStateParam IpcTriStateParam_MAX = IPC_PARAM_DISABLE;
const int IpcTriStateParam_ARRAYSIZE = IpcTriStateParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcTriStateParam_descriptor();
inline const ::std::string& IpcTriStateParam_Name(IpcTriStateParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcTriStateParam_descriptor(), value);
}
inline bool IpcTriStateParam_Parse(
    const ::std::string& name, IpcTriStateParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcTriStateParam>(
    IpcTriStateParam_descriptor(), name, value);
}
enum IpcVersionType_t {
  VERSION_LPM = 0,
  VERSION_BLOB = 1,
  VERSION_DSP = 2,
  VERSION_F0 = 3,
  VERSION_REMOTE_MAIN_FONT = 4,
  VERSION_REMOTE_WIDGET_GRAPHIC = 5,
  VERSION_ST = 6,
  VERSION_SI9777 = 7,
  VERSION_MAXWELL_L = 8,
  VERSION_MAXWELL_R = 9,
  VERSION_BASS = 10,
  VERSION_ASOC = 11,
  VERSION_A4V_APP = 12,
  VERSION_SYSTEM = 13,
  VERSION_NUM_OF = 14
};
bool IpcVersionType_t_IsValid(int value);
const IpcVersionType_t IpcVersionType_t_MIN = VERSION_LPM;
const IpcVersionType_t IpcVersionType_t_MAX = VERSION_NUM_OF;
const int IpcVersionType_t_ARRAYSIZE = IpcVersionType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpcVersionType_t_descriptor();
inline const ::std::string& IpcVersionType_t_Name(IpcVersionType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpcVersionType_t_descriptor(), value);
}
inline bool IpcVersionType_t_Parse(
    const ::std::string& name, IpcVersionType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpcVersionType_t>(
    IpcVersionType_t_descriptor(), name, value);
}
// ===================================================================

class A4VIpcServicePacket : public ::google::protobuf::Message {
 public:
  A4VIpcServicePacket();
  virtual ~A4VIpcServicePacket();
  
  A4VIpcServicePacket(const A4VIpcServicePacket& from);
  
  inline A4VIpcServicePacket& operator=(const A4VIpcServicePacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const A4VIpcServicePacket& default_instance();
  
  void Swap(A4VIpcServicePacket* other);
  
  // implements Message ----------------------------------------------
  
  A4VIpcServicePacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const A4VIpcServicePacket& from);
  void MergeFrom(const A4VIpcServicePacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.Ipc_Device_t destination = 1;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 1;
  inline lpmservice::Ipc_Device_t destination() const;
  inline void set_destination(lpmservice::Ipc_Device_t value);
  
  // optional bytes nested_message = 2;
  inline bool has_nested_message() const;
  inline void clear_nested_message();
  static const int kNestedMessageFieldNumber = 2;
  inline const ::std::string& nested_message() const;
  inline void set_nested_message(const ::std::string& value);
  inline void set_nested_message(const char* value);
  inline void set_nested_message(const void* value, size_t size);
  inline ::std::string* mutable_nested_message();
  inline ::std::string* release_nested_message();
  
  // @@protoc_insertion_point(class_scope:lpmservice.A4VIpcServicePacket)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_nested_message();
  inline void clear_has_nested_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* nested_message_;
  int destination_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static A4VIpcServicePacket* default_instance_;
};
// -------------------------------------------------------------------

class EmptyData : public ::google::protobuf::Message {
 public:
  EmptyData();
  virtual ~EmptyData();
  
  EmptyData(const EmptyData& from);
  
  inline EmptyData& operator=(const EmptyData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyData& default_instance();
  
  void Swap(EmptyData* other);
  
  // implements Message ----------------------------------------------
  
  EmptyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyData& from);
  void MergeFrom(const EmptyData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:lpmservice.EmptyData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static EmptyData* default_instance_;
};
// -------------------------------------------------------------------

class AccessoryDescription_t : public ::google::protobuf::Message {
 public:
  AccessoryDescription_t();
  virtual ~AccessoryDescription_t();
  
  AccessoryDescription_t(const AccessoryDescription_t& from);
  
  inline AccessoryDescription_t& operator=(const AccessoryDescription_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessoryDescription_t& default_instance();
  
  void Swap(AccessoryDescription_t* other);
  
  // implements Message ----------------------------------------------
  
  AccessoryDescription_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessoryDescription_t& from);
  void MergeFrom(const AccessoryDescription_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);
  
  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 active = 4;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 4;
  inline ::google::protobuf::uint32 active() const;
  inline void set_active(::google::protobuf::uint32 value);
  
  // optional string sn = 5;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 5;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  
  // optional string version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // @@protoc_insertion_point(class_scope:lpmservice.AccessoryDescription_t)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 active_;
  ::std::string* sn_;
  ::std::string* version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static AccessoryDescription_t* default_instance_;
};
// -------------------------------------------------------------------

class BulkClosed_t : public ::google::protobuf::Message {
 public:
  BulkClosed_t();
  virtual ~BulkClosed_t();
  
  BulkClosed_t(const BulkClosed_t& from);
  
  inline BulkClosed_t& operator=(const BulkClosed_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkClosed_t& default_instance();
  
  void Swap(BulkClosed_t* other);
  
  // implements Message ----------------------------------------------
  
  BulkClosed_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BulkClosed_t& from);
  void MergeFrom(const BulkClosed_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.BulkClosed_t)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static BulkClosed_t* default_instance_;
};
// -------------------------------------------------------------------

class BulkClose_t : public ::google::protobuf::Message {
 public:
  BulkClose_t();
  virtual ~BulkClose_t();
  
  BulkClose_t(const BulkClose_t& from);
  
  inline BulkClose_t& operator=(const BulkClose_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkClose_t& default_instance();
  
  void Swap(BulkClose_t* other);
  
  // implements Message ----------------------------------------------
  
  BulkClose_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BulkClose_t& from);
  void MergeFrom(const BulkClose_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 checksum = 2;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 2;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.BulkClose_t)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 checksum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static BulkClose_t* default_instance_;
};
// -------------------------------------------------------------------

class BulkNotify_t : public ::google::protobuf::Message {
 public:
  BulkNotify_t();
  virtual ~BulkNotify_t();
  
  BulkNotify_t(const BulkNotify_t& from);
  
  inline BulkNotify_t& operator=(const BulkNotify_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkNotify_t& default_instance();
  
  void Swap(BulkNotify_t* other);
  
  // implements Message ----------------------------------------------
  
  BulkNotify_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BulkNotify_t& from);
  void MergeFrom(const BulkNotify_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 length = 1;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 fileId = 3;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fileid() const;
  inline void set_fileid(::google::protobuf::uint32 value);
  
  // optional string filename = 4;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 4;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // @@protoc_insertion_point(class_scope:lpmservice.BulkNotify_t)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_filename();
  inline void clear_has_filename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 type_;
  ::std::string* filename_;
  ::google::protobuf::uint32 fileid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static BulkNotify_t* default_instance_;
};
// -------------------------------------------------------------------

class BulkResponse_t : public ::google::protobuf::Message {
 public:
  BulkResponse_t();
  virtual ~BulkResponse_t();
  
  BulkResponse_t(const BulkResponse_t& from);
  
  inline BulkResponse_t& operator=(const BulkResponse_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkResponse_t& default_instance();
  
  void Swap(BulkResponse_t* other);
  
  // implements Message ----------------------------------------------
  
  BulkResponse_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BulkResponse_t& from);
  void MergeFrom(const BulkResponse_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 accept = 1;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 1;
  inline ::google::protobuf::uint32 accept() const;
  inline void set_accept(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.BulkResponse_t)
 private:
  inline void set_has_accept();
  inline void clear_has_accept();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 accept_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static BulkResponse_t* default_instance_;
};
// -------------------------------------------------------------------

class BulkStatus_t : public ::google::protobuf::Message {
 public:
  BulkStatus_t();
  virtual ~BulkStatus_t();
  
  BulkStatus_t(const BulkStatus_t& from);
  
  inline BulkStatus_t& operator=(const BulkStatus_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkStatus_t& default_instance();
  
  void Swap(BulkStatus_t* other);
  
  // implements Message ----------------------------------------------
  
  BulkStatus_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BulkStatus_t& from);
  void MergeFrom(const BulkStatus_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 bufferAvailable = 1;
  inline bool has_bufferavailable() const;
  inline void clear_bufferavailable();
  static const int kBufferAvailableFieldNumber = 1;
  inline ::google::protobuf::uint32 bufferavailable() const;
  inline void set_bufferavailable(::google::protobuf::uint32 value);
  
  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.BulkStatus_t)
 private:
  inline void set_has_bufferavailable();
  inline void clear_has_bufferavailable();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 bufferavailable_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static BulkStatus_t* default_instance_;
};
// -------------------------------------------------------------------

class DeviceStatusReq_t : public ::google::protobuf::Message {
 public:
  DeviceStatusReq_t();
  virtual ~DeviceStatusReq_t();
  
  DeviceStatusReq_t(const DeviceStatusReq_t& from);
  
  inline DeviceStatusReq_t& operator=(const DeviceStatusReq_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceStatusReq_t& default_instance();
  
  void Swap(DeviceStatusReq_t* other);
  
  // implements Message ----------------------------------------------
  
  DeviceStatusReq_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceStatusReq_t& from);
  void MergeFrom(const DeviceStatusReq_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.StatusRequest_t requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline lpmservice::StatusRequest_t requesttype() const;
  inline void set_requesttype(lpmservice::StatusRequest_t value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.DeviceStatusReq_t)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int requesttype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceStatusReq_t* default_instance_;
};
// -------------------------------------------------------------------

class F0_PowerStatus_t : public ::google::protobuf::Message {
 public:
  F0_PowerStatus_t();
  virtual ~F0_PowerStatus_t();
  
  F0_PowerStatus_t(const F0_PowerStatus_t& from);
  
  inline F0_PowerStatus_t& operator=(const F0_PowerStatus_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const F0_PowerStatus_t& default_instance();
  
  void Swap(F0_PowerStatus_t* other);
  
  // implements Message ----------------------------------------------
  
  F0_PowerStatus_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const F0_PowerStatus_t& from);
  void MergeFrom(const F0_PowerStatus_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.F0_PowerDevice_t device = 1;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 1;
  inline lpmservice::F0_PowerDevice_t device() const;
  inline void set_device(lpmservice::F0_PowerDevice_t value);
  
  // optional uint32 enabled = 2;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  inline ::google::protobuf::uint32 enabled() const;
  inline void set_enabled(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.F0_PowerStatus_t)
 private:
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int device_;
  ::google::protobuf::uint32 enabled_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static F0_PowerStatus_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcAccessoryList_t : public ::google::protobuf::Message {
 public:
  IpcAccessoryList_t();
  virtual ~IpcAccessoryList_t();
  
  IpcAccessoryList_t(const IpcAccessoryList_t& from);
  
  inline IpcAccessoryList_t& operator=(const IpcAccessoryList_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcAccessoryList_t& default_instance();
  
  void Swap(IpcAccessoryList_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcAccessoryList_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcAccessoryList_t& from);
  void MergeFrom(const IpcAccessoryList_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .lpmservice.AccessoryDescription_t accessory = 1;
  inline int accessory_size() const;
  inline void clear_accessory();
  static const int kAccessoryFieldNumber = 1;
  inline const ::lpmservice::AccessoryDescription_t& accessory(int index) const;
  inline ::lpmservice::AccessoryDescription_t* mutable_accessory(int index);
  inline ::lpmservice::AccessoryDescription_t* add_accessory();
  inline const ::google::protobuf::RepeatedPtrField< ::lpmservice::AccessoryDescription_t >&
      accessory() const;
  inline ::google::protobuf::RepeatedPtrField< ::lpmservice::AccessoryDescription_t >*
      mutable_accessory();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcAccessoryList_t)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::lpmservice::AccessoryDescription_t > accessory_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcAccessoryList_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcAsocHealthStatusPayload_t : public ::google::protobuf::Message {
 public:
  IpcAsocHealthStatusPayload_t();
  virtual ~IpcAsocHealthStatusPayload_t();
  
  IpcAsocHealthStatusPayload_t(const IpcAsocHealthStatusPayload_t& from);
  
  inline IpcAsocHealthStatusPayload_t& operator=(const IpcAsocHealthStatusPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcAsocHealthStatusPayload_t& default_instance();
  
  void Swap(IpcAsocHealthStatusPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcAsocHealthStatusPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcAsocHealthStatusPayload_t& from);
  void MergeFrom(const IpcAsocHealthStatusPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 unused0 = 1;
  inline bool has_unused0() const;
  inline void clear_unused0();
  static const int kUnused0FieldNumber = 1;
  inline ::google::protobuf::uint32 unused0() const;
  inline void set_unused0(::google::protobuf::uint32 value);
  
  // optional uint32 statusFlags = 2;
  inline bool has_statusflags() const;
  inline void clear_statusflags();
  static const int kStatusFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 statusflags() const;
  inline void set_statusflags(::google::protobuf::uint32 value);
  
  // optional uint32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);
  
  // optional uint32 image = 4;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 4;
  inline ::google::protobuf::uint32 image() const;
  inline void set_image(::google::protobuf::uint32 value);
  
  // optional string swVersion = 5;
  inline bool has_swversion() const;
  inline void clear_swversion();
  static const int kSwVersionFieldNumber = 5;
  inline const ::std::string& swversion() const;
  inline void set_swversion(const ::std::string& value);
  inline void set_swversion(const char* value);
  inline void set_swversion(const char* value, size_t size);
  inline ::std::string* mutable_swversion();
  inline ::std::string* release_swversion();
  
  // optional string systemVersion = 6;
  inline bool has_systemversion() const;
  inline void clear_systemversion();
  static const int kSystemVersionFieldNumber = 6;
  inline const ::std::string& systemversion() const;
  inline void set_systemversion(const ::std::string& value);
  inline void set_systemversion(const char* value);
  inline void set_systemversion(const char* value, size_t size);
  inline ::std::string* mutable_systemversion();
  inline ::std::string* release_systemversion();
  
  // optional string logID = 7;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIDFieldNumber = 7;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcAsocHealthStatusPayload_t)
 private:
  inline void set_has_unused0();
  inline void clear_has_unused0();
  inline void set_has_statusflags();
  inline void clear_has_statusflags();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_swversion();
  inline void clear_has_swversion();
  inline void set_has_systemversion();
  inline void clear_has_systemversion();
  inline void set_has_logid();
  inline void clear_has_logid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 unused0_;
  ::google::protobuf::uint32 statusflags_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 image_;
  ::std::string* swversion_;
  ::std::string* systemversion_;
  ::std::string* logid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcAsocHealthStatusPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcAudioMute_t : public ::google::protobuf::Message {
 public:
  IpcAudioMute_t();
  virtual ~IpcAudioMute_t();
  
  IpcAudioMute_t(const IpcAudioMute_t& from);
  
  inline IpcAudioMute_t& operator=(const IpcAudioMute_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcAudioMute_t& default_instance();
  
  void Swap(IpcAudioMute_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcAudioMute_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcAudioMute_t& from);
  void MergeFrom(const IpcAudioMute_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 internalMute = 1;
  inline bool has_internalmute() const;
  inline void clear_internalmute();
  static const int kInternalMuteFieldNumber = 1;
  inline ::google::protobuf::uint32 internalmute() const;
  inline void set_internalmute(::google::protobuf::uint32 value);
  
  // optional uint32 unifyMute = 2;
  inline bool has_unifymute() const;
  inline void clear_unifymute();
  static const int kUnifyMuteFieldNumber = 2;
  inline ::google::protobuf::uint32 unifymute() const;
  inline void set_unifymute(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcAudioMute_t)
 private:
  inline void set_has_internalmute();
  inline void clear_has_internalmute();
  inline void set_has_unifymute();
  inline void clear_has_unifymute();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 internalmute_;
  ::google::protobuf::uint32 unifymute_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcAudioMute_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcAudioSetVolume_t : public ::google::protobuf::Message {
 public:
  IpcAudioSetVolume_t();
  virtual ~IpcAudioSetVolume_t();
  
  IpcAudioSetVolume_t(const IpcAudioSetVolume_t& from);
  
  inline IpcAudioSetVolume_t& operator=(const IpcAudioSetVolume_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcAudioSetVolume_t& default_instance();
  
  void Swap(IpcAudioSetVolume_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcAudioSetVolume_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcAudioSetVolume_t& from);
  void MergeFrom(const IpcAudioSetVolume_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 volume = 1;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 1;
  inline ::google::protobuf::uint32 volume() const;
  inline void set_volume(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcAudioSetVolume_t)
 private:
  inline void set_has_volume();
  inline void clear_has_volume();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 volume_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcAudioSetVolume_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcAudioStatus_t : public ::google::protobuf::Message {
 public:
  IpcAudioStatus_t();
  virtual ~IpcAudioStatus_t();
  
  IpcAudioStatus_t(const IpcAudioStatus_t& from);
  
  inline IpcAudioStatus_t& operator=(const IpcAudioStatus_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcAudioStatus_t& default_instance();
  
  void Swap(IpcAudioStatus_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcAudioStatus_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcAudioStatus_t& from);
  void MergeFrom(const IpcAudioStatus_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 volume = 1;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 1;
  inline ::google::protobuf::uint32 volume() const;
  inline void set_volume(::google::protobuf::uint32 value);
  
  // optional uint32 mute = 2;
  inline bool has_mute() const;
  inline void clear_mute();
  static const int kMuteFieldNumber = 2;
  inline ::google::protobuf::uint32 mute() const;
  inline void set_mute(::google::protobuf::uint32 value);
  
  // optional uint32 audioLatency = 3;
  inline bool has_audiolatency() const;
  inline void clear_audiolatency();
  static const int kAudioLatencyFieldNumber = 3;
  inline ::google::protobuf::uint32 audiolatency() const;
  inline void set_audiolatency(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcAudioStatus_t)
 private:
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_mute();
  inline void clear_has_mute();
  inline void set_has_audiolatency();
  inline void clear_has_audiolatency();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 volume_;
  ::google::protobuf::uint32 mute_;
  ::google::protobuf::uint32 audiolatency_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcAudioStatus_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcBTInfo_t : public ::google::protobuf::Message {
 public:
  IpcBTInfo_t();
  virtual ~IpcBTInfo_t();
  
  IpcBTInfo_t(const IpcBTInfo_t& from);
  
  inline IpcBTInfo_t& operator=(const IpcBTInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcBTInfo_t& default_instance();
  
  void Swap(IpcBTInfo_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcBTInfo_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcBTInfo_t& from);
  void MergeFrom(const IpcBTInfo_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 macAddress = 1;
  inline int macaddress_size() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline ::google::protobuf::uint32 macaddress(int index) const;
  inline void set_macaddress(int index, ::google::protobuf::uint32 value);
  inline void add_macaddress(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      macaddress() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_macaddress();
  
  // optional string deviceName = 2;
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 2;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const char* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcBTInfo_t)
 private:
  inline void set_has_devicename();
  inline void clear_has_devicename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > macaddress_;
  ::std::string* devicename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcBTInfo_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcBT_Control_t : public ::google::protobuf::Message {
 public:
  IpcBT_Control_t();
  virtual ~IpcBT_Control_t();
  
  IpcBT_Control_t(const IpcBT_Control_t& from);
  
  inline IpcBT_Control_t& operator=(const IpcBT_Control_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcBT_Control_t& default_instance();
  
  void Swap(IpcBT_Control_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcBT_Control_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcBT_Control_t& from);
  void MergeFrom(const IpcBT_Control_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 extra = 2;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 2;
  inline ::google::protobuf::uint32 extra() const;
  inline void set_extra(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcBT_Control_t)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_extra();
  inline void clear_has_extra();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 extra_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcBT_Control_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcContentControl_t : public ::google::protobuf::Message {
 public:
  IpcContentControl_t();
  virtual ~IpcContentControl_t();
  
  IpcContentControl_t(const IpcContentControl_t& from);
  
  inline IpcContentControl_t& operator=(const IpcContentControl_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcContentControl_t& default_instance();
  
  void Swap(IpcContentControl_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcContentControl_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcContentControl_t& from);
  void MergeFrom(const IpcContentControl_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.IpcSTContentControlAction_t action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline lpmservice::IpcSTContentControlAction_t action() const;
  inline void set_action(lpmservice::IpcSTContentControlAction_t value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcContentControl_t)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcContentControl_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcDspHealthStatusPayload_t : public ::google::protobuf::Message {
 public:
  IpcDspHealthStatusPayload_t();
  virtual ~IpcDspHealthStatusPayload_t();
  
  IpcDspHealthStatusPayload_t(const IpcDspHealthStatusPayload_t& from);
  
  inline IpcDspHealthStatusPayload_t& operator=(const IpcDspHealthStatusPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcDspHealthStatusPayload_t& default_instance();
  
  void Swap(IpcDspHealthStatusPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcDspHealthStatusPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcDspHealthStatusPayload_t& from);
  void MergeFrom(const IpcDspHealthStatusPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string swVersion = 1;
  inline bool has_swversion() const;
  inline void clear_swversion();
  static const int kSwVersionFieldNumber = 1;
  inline const ::std::string& swversion() const;
  inline void set_swversion(const ::std::string& value);
  inline void set_swversion(const char* value);
  inline void set_swversion(const char* value, size_t size);
  inline ::std::string* mutable_swversion();
  inline ::std::string* release_swversion();
  
  // optional uint32 image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline ::google::protobuf::uint32 image() const;
  inline void set_image(::google::protobuf::uint32 value);
  
  // optional uint32 activeSource = 3;
  inline bool has_activesource() const;
  inline void clear_activesource();
  static const int kActiveSourceFieldNumber = 3;
  inline ::google::protobuf::uint32 activesource() const;
  inline void set_activesource(::google::protobuf::uint32 value);
  
  // optional uint32 powerState = 4;
  inline bool has_powerstate() const;
  inline void clear_powerstate();
  static const int kPowerStateFieldNumber = 4;
  inline ::google::protobuf::uint32 powerstate() const;
  inline void set_powerstate(::google::protobuf::uint32 value);
  
  // optional uint32 muteState = 5;
  inline bool has_mutestate() const;
  inline void clear_mutestate();
  static const int kMuteStateFieldNumber = 5;
  inline ::google::protobuf::uint32 mutestate() const;
  inline void set_mutestate(::google::protobuf::uint32 value);
  
  // optional uint32 volume = 6;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 6;
  inline ::google::protobuf::uint32 volume() const;
  inline void set_volume(::google::protobuf::uint32 value);
  
  // optional uint32 energyPresent = 7;
  inline bool has_energypresent() const;
  inline void clear_energypresent();
  static const int kEnergyPresentFieldNumber = 7;
  inline ::google::protobuf::uint32 energypresent() const;
  inline void set_energypresent(::google::protobuf::uint32 value);
  
  // optional uint32 uptimeMs = 8;
  inline bool has_uptimems() const;
  inline void clear_uptimems();
  static const int kUptimeMsFieldNumber = 8;
  inline ::google::protobuf::uint32 uptimems() const;
  inline void set_uptimems(::google::protobuf::uint32 value);
  
  // optional uint32 ampFaultState = 9;
  inline bool has_ampfaultstate() const;
  inline void clear_ampfaultstate();
  static const int kAmpFaultStateFieldNumber = 9;
  inline ::google::protobuf::uint32 ampfaultstate() const;
  inline void set_ampfaultstate(::google::protobuf::uint32 value);
  
  // optional uint32 bassEnableRequest = 10;
  inline bool has_bassenablerequest() const;
  inline void clear_bassenablerequest();
  static const int kBassEnableRequestFieldNumber = 10;
  inline ::google::protobuf::uint32 bassenablerequest() const;
  inline void set_bassenablerequest(::google::protobuf::uint32 value);
  
  // optional uint32 aiqLastRun = 11;
  inline bool has_aiqlastrun() const;
  inline void clear_aiqlastrun();
  static const int kAiqLastRunFieldNumber = 11;
  inline ::google::protobuf::uint32 aiqlastrun() const;
  inline void set_aiqlastrun(::google::protobuf::uint32 value);
  
  // optional uint32 aiqInstalled = 12;
  inline bool has_aiqinstalled() const;
  inline void clear_aiqinstalled();
  static const int kAiqInstalledFieldNumber = 12;
  inline ::google::protobuf::uint32 aiqinstalled() const;
  inline void set_aiqinstalled(::google::protobuf::uint32 value);
  
  // optional uint32 minimumOutputLatencyMs = 13;
  inline bool has_minimumoutputlatencyms() const;
  inline void clear_minimumoutputlatencyms();
  static const int kMinimumOutputLatencyMsFieldNumber = 13;
  inline ::google::protobuf::uint32 minimumoutputlatencyms() const;
  inline void set_minimumoutputlatencyms(::google::protobuf::uint32 value);
  
  // optional uint32 totalLatencyMs = 14;
  inline bool has_totallatencyms() const;
  inline void clear_totallatencyms();
  static const int kTotalLatencyMsFieldNumber = 14;
  inline ::google::protobuf::uint32 totallatencyms() const;
  inline void set_totallatencyms(::google::protobuf::uint32 value);
  
  // optional uint32 audioFormat = 15;
  inline bool has_audioformat() const;
  inline void clear_audioformat();
  static const int kAudioFormatFieldNumber = 15;
  inline ::google::protobuf::uint32 audioformat() const;
  inline void set_audioformat(::google::protobuf::uint32 value);
  
  // optional uint32 sampleRate = 16;
  inline bool has_samplerate() const;
  inline void clear_samplerate();
  static const int kSampleRateFieldNumber = 16;
  inline ::google::protobuf::uint32 samplerate() const;
  inline void set_samplerate(::google::protobuf::uint32 value);
  
  // optional uint32 fullRangeChannels = 17;
  inline bool has_fullrangechannels() const;
  inline void clear_fullrangechannels();
  static const int kFullRangeChannelsFieldNumber = 17;
  inline ::google::protobuf::uint32 fullrangechannels() const;
  inline void set_fullrangechannels(::google::protobuf::uint32 value);
  
  // optional uint32 lfeChannels = 18;
  inline bool has_lfechannels() const;
  inline void clear_lfechannels();
  static const int kLfeChannelsFieldNumber = 18;
  inline ::google::protobuf::uint32 lfechannels() const;
  inline void set_lfechannels(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcDspHealthStatusPayload_t)
 private:
  inline void set_has_swversion();
  inline void clear_has_swversion();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_activesource();
  inline void clear_has_activesource();
  inline void set_has_powerstate();
  inline void clear_has_powerstate();
  inline void set_has_mutestate();
  inline void clear_has_mutestate();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_energypresent();
  inline void clear_has_energypresent();
  inline void set_has_uptimems();
  inline void clear_has_uptimems();
  inline void set_has_ampfaultstate();
  inline void clear_has_ampfaultstate();
  inline void set_has_bassenablerequest();
  inline void clear_has_bassenablerequest();
  inline void set_has_aiqlastrun();
  inline void clear_has_aiqlastrun();
  inline void set_has_aiqinstalled();
  inline void clear_has_aiqinstalled();
  inline void set_has_minimumoutputlatencyms();
  inline void clear_has_minimumoutputlatencyms();
  inline void set_has_totallatencyms();
  inline void clear_has_totallatencyms();
  inline void set_has_audioformat();
  inline void clear_has_audioformat();
  inline void set_has_samplerate();
  inline void clear_has_samplerate();
  inline void set_has_fullrangechannels();
  inline void clear_has_fullrangechannels();
  inline void set_has_lfechannels();
  inline void clear_has_lfechannels();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* swversion_;
  ::google::protobuf::uint32 image_;
  ::google::protobuf::uint32 activesource_;
  ::google::protobuf::uint32 powerstate_;
  ::google::protobuf::uint32 mutestate_;
  ::google::protobuf::uint32 volume_;
  ::google::protobuf::uint32 energypresent_;
  ::google::protobuf::uint32 uptimems_;
  ::google::protobuf::uint32 ampfaultstate_;
  ::google::protobuf::uint32 bassenablerequest_;
  ::google::protobuf::uint32 aiqlastrun_;
  ::google::protobuf::uint32 aiqinstalled_;
  ::google::protobuf::uint32 minimumoutputlatencyms_;
  ::google::protobuf::uint32 totallatencyms_;
  ::google::protobuf::uint32 audioformat_;
  ::google::protobuf::uint32 samplerate_;
  ::google::protobuf::uint32 fullrangechannels_;
  ::google::protobuf::uint32 lfechannels_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcDspHealthStatusPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcDspPlayTonePayload_t : public ::google::protobuf::Message {
 public:
  IpcDspPlayTonePayload_t();
  virtual ~IpcDspPlayTonePayload_t();
  
  IpcDspPlayTonePayload_t(const IpcDspPlayTonePayload_t& from);
  
  inline IpcDspPlayTonePayload_t& operator=(const IpcDspPlayTonePayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcDspPlayTonePayload_t& default_instance();
  
  void Swap(IpcDspPlayTonePayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcDspPlayTonePayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcDspPlayTonePayload_t& from);
  void MergeFrom(const IpcDspPlayTonePayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 toneId = 1;
  inline bool has_toneid() const;
  inline void clear_toneid();
  static const int kToneIdFieldNumber = 1;
  inline ::google::protobuf::int32 toneid() const;
  inline void set_toneid(::google::protobuf::int32 value);
  
  // optional int32 locationBits = 2;
  inline bool has_locationbits() const;
  inline void clear_locationbits();
  static const int kLocationBitsFieldNumber = 2;
  inline ::google::protobuf::int32 locationbits() const;
  inline void set_locationbits(::google::protobuf::int32 value);
  
  // optional int32 repeatCount = 3;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatCountFieldNumber = 3;
  inline ::google::protobuf::int32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::int32 value);
  
  // optional int32 minVolume = 4;
  inline bool has_minvolume() const;
  inline void clear_minvolume();
  static const int kMinVolumeFieldNumber = 4;
  inline ::google::protobuf::int32 minvolume() const;
  inline void set_minvolume(::google::protobuf::int32 value);
  
  // optional int32 maxVolume = 5;
  inline bool has_maxvolume() const;
  inline void clear_maxvolume();
  static const int kMaxVolumeFieldNumber = 5;
  inline ::google::protobuf::int32 maxvolume() const;
  inline void set_maxvolume(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcDspPlayTonePayload_t)
 private:
  inline void set_has_toneid();
  inline void clear_has_toneid();
  inline void set_has_locationbits();
  inline void clear_has_locationbits();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_minvolume();
  inline void clear_has_minvolume();
  inline void set_has_maxvolume();
  inline void clear_has_maxvolume();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 toneid_;
  ::google::protobuf::int32 locationbits_;
  ::google::protobuf::int32 repeatcount_;
  ::google::protobuf::int32 minvolume_;
  ::google::protobuf::int32 maxvolume_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcDspPlayTonePayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcDspProfilePayload_t : public ::google::protobuf::Message {
 public:
  IpcDspProfilePayload_t();
  virtual ~IpcDspProfilePayload_t();
  
  IpcDspProfilePayload_t(const IpcDspProfilePayload_t& from);
  
  inline IpcDspProfilePayload_t& operator=(const IpcDspProfilePayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcDspProfilePayload_t& default_instance();
  
  void Swap(IpcDspProfilePayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcDspProfilePayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcDspProfilePayload_t& from);
  void MergeFrom(const IpcDspProfilePayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 sourceSelect = 1;
  inline bool has_sourceselect() const;
  inline void clear_sourceselect();
  static const int kSourceSelectFieldNumber = 1;
  inline ::google::protobuf::uint32 sourceselect() const;
  inline void set_sourceselect(::google::protobuf::uint32 value);
  
  // optional uint32 powerState = 2;
  inline bool has_powerstate() const;
  inline void clear_powerstate();
  static const int kPowerStateFieldNumber = 2;
  inline ::google::protobuf::uint32 powerstate() const;
  inline void set_powerstate(::google::protobuf::uint32 value);
  
  // optional uint32 networkLatencyMs = 3;
  inline bool has_networklatencyms() const;
  inline void clear_networklatencyms();
  static const int kNetworkLatencyMsFieldNumber = 3;
  inline ::google::protobuf::uint32 networklatencyms() const;
  inline void set_networklatencyms(::google::protobuf::uint32 value);
  
  // optional uint32 targetLatencyMs = 4;
  inline bool has_targetlatencyms() const;
  inline void clear_targetlatencyms();
  static const int kTargetLatencyMsFieldNumber = 4;
  inline ::google::protobuf::uint32 targetlatencyms() const;
  inline void set_targetlatencyms(::google::protobuf::uint32 value);
  
  // optional uint32 audioMode = 5;
  inline bool has_audiomode() const;
  inline void clear_audiomode();
  static const int kAudioModeFieldNumber = 5;
  inline ::google::protobuf::uint32 audiomode() const;
  inline void set_audiomode(::google::protobuf::uint32 value);
  
  // optional uint32 aiqEnable = 6;
  inline bool has_aiqenable() const;
  inline void clear_aiqenable();
  static const int kAiqEnableFieldNumber = 6;
  inline ::google::protobuf::uint32 aiqenable() const;
  inline void set_aiqenable(::google::protobuf::uint32 value);
  
  // optional uint32 aiqCurveSelect = 7;
  inline bool has_aiqcurveselect() const;
  inline void clear_aiqcurveselect();
  static const int kAiqCurveSelectFieldNumber = 7;
  inline ::google::protobuf::uint32 aiqcurveselect() const;
  inline void set_aiqcurveselect(::google::protobuf::uint32 value);
  
  // optional uint32 dualMonoSelect = 8;
  inline bool has_dualmonoselect() const;
  inline void clear_dualmonoselect();
  static const int kDualMonoSelectFieldNumber = 8;
  inline ::google::protobuf::uint32 dualmonoselect() const;
  inline void set_dualmonoselect(::google::protobuf::uint32 value);
  
  // optional int32 bassLevel = 9;
  inline bool has_basslevel() const;
  inline void clear_basslevel();
  static const int kBassLevelFieldNumber = 9;
  inline ::google::protobuf::int32 basslevel() const;
  inline void set_basslevel(::google::protobuf::int32 value);
  
  // optional int32 trebleLevel = 10;
  inline bool has_treblelevel() const;
  inline void clear_treblelevel();
  static const int kTrebleLevelFieldNumber = 10;
  inline ::google::protobuf::int32 treblelevel() const;
  inline void set_treblelevel(::google::protobuf::int32 value);
  
  // optional int32 centerLevel = 11;
  inline bool has_centerlevel() const;
  inline void clear_centerlevel();
  static const int kCenterLevelFieldNumber = 11;
  inline ::google::protobuf::int32 centerlevel() const;
  inline void set_centerlevel(::google::protobuf::int32 value);
  
  // optional int32 surroundLevel = 12;
  inline bool has_surroundlevel() const;
  inline void clear_surroundlevel();
  static const int kSurroundLevelFieldNumber = 12;
  inline ::google::protobuf::int32 surroundlevel() const;
  inline void set_surroundlevel(::google::protobuf::int32 value);
  
  // optional uint32 languageSelect = 13;
  inline bool has_languageselect() const;
  inline void clear_languageselect();
  static const int kLanguageSelectFieldNumber = 13;
  inline ::google::protobuf::uint32 languageselect() const;
  inline void set_languageselect(::google::protobuf::uint32 value);
  
  // optional uint32 region = 14;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 14;
  inline ::google::protobuf::uint32 region() const;
  inline void set_region(::google::protobuf::uint32 value);
  
  // optional uint32 speakerPackage = 15;
  inline bool has_speakerpackage() const;
  inline void clear_speakerpackage();
  static const int kSpeakerPackageFieldNumber = 15;
  inline ::google::protobuf::uint32 speakerpackage() const;
  inline void set_speakerpackage(::google::protobuf::uint32 value);
  
  // optional uint32 accessoryFlags = 16;
  inline bool has_accessoryflags() const;
  inline void clear_accessoryflags();
  static const int kAccessoryFlagsFieldNumber = 16;
  inline ::google::protobuf::uint32 accessoryflags() const;
  inline void set_accessoryflags(::google::protobuf::uint32 value);
  
  // optional uint32 frontConnector = 17;
  inline bool has_frontconnector() const;
  inline void clear_frontconnector();
  static const int kFrontConnectorFieldNumber = 17;
  inline ::google::protobuf::uint32 frontconnector() const;
  inline void set_frontconnector(::google::protobuf::uint32 value);
  
  // optional uint32 reserved = 18;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 18;
  inline ::google::protobuf::uint32 reserved() const;
  inline void set_reserved(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcDspProfilePayload_t)
 private:
  inline void set_has_sourceselect();
  inline void clear_has_sourceselect();
  inline void set_has_powerstate();
  inline void clear_has_powerstate();
  inline void set_has_networklatencyms();
  inline void clear_has_networklatencyms();
  inline void set_has_targetlatencyms();
  inline void clear_has_targetlatencyms();
  inline void set_has_audiomode();
  inline void clear_has_audiomode();
  inline void set_has_aiqenable();
  inline void clear_has_aiqenable();
  inline void set_has_aiqcurveselect();
  inline void clear_has_aiqcurveselect();
  inline void set_has_dualmonoselect();
  inline void clear_has_dualmonoselect();
  inline void set_has_basslevel();
  inline void clear_has_basslevel();
  inline void set_has_treblelevel();
  inline void clear_has_treblelevel();
  inline void set_has_centerlevel();
  inline void clear_has_centerlevel();
  inline void set_has_surroundlevel();
  inline void clear_has_surroundlevel();
  inline void set_has_languageselect();
  inline void clear_has_languageselect();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_speakerpackage();
  inline void clear_has_speakerpackage();
  inline void set_has_accessoryflags();
  inline void clear_has_accessoryflags();
  inline void set_has_frontconnector();
  inline void clear_has_frontconnector();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sourceselect_;
  ::google::protobuf::uint32 powerstate_;
  ::google::protobuf::uint32 networklatencyms_;
  ::google::protobuf::uint32 targetlatencyms_;
  ::google::protobuf::uint32 audiomode_;
  ::google::protobuf::uint32 aiqenable_;
  ::google::protobuf::uint32 aiqcurveselect_;
  ::google::protobuf::uint32 dualmonoselect_;
  ::google::protobuf::int32 basslevel_;
  ::google::protobuf::int32 treblelevel_;
  ::google::protobuf::int32 centerlevel_;
  ::google::protobuf::int32 surroundlevel_;
  ::google::protobuf::uint32 languageselect_;
  ::google::protobuf::uint32 region_;
  ::google::protobuf::uint32 speakerpackage_;
  ::google::protobuf::uint32 accessoryflags_;
  ::google::protobuf::uint32 frontconnector_;
  ::google::protobuf::uint32 reserved_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcDspProfilePayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcDSPAudioMetaDataPayload_t : public ::google::protobuf::Message {
 public:
  IpcDSPAudioMetaDataPayload_t();
  virtual ~IpcDSPAudioMetaDataPayload_t();
  
  IpcDSPAudioMetaDataPayload_t(const IpcDSPAudioMetaDataPayload_t& from);
  
  inline IpcDSPAudioMetaDataPayload_t& operator=(const IpcDSPAudioMetaDataPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcDSPAudioMetaDataPayload_t& default_instance();
  
  void Swap(IpcDSPAudioMetaDataPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcDSPAudioMetaDataPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcDSPAudioMetaDataPayload_t& from);
  void MergeFrom(const IpcDSPAudioMetaDataPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 aifData = 1;
  inline int aifdata_size() const;
  inline void clear_aifdata();
  static const int kAifDataFieldNumber = 1;
  inline ::google::protobuf::uint32 aifdata(int index) const;
  inline void set_aifdata(int index, ::google::protobuf::uint32 value);
  inline void add_aifdata(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      aifdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_aifdata();
  
  // repeated uint32 csData = 2;
  inline int csdata_size() const;
  inline void clear_csdata();
  static const int kCsDataFieldNumber = 2;
  inline ::google::protobuf::uint32 csdata(int index) const;
  inline void set_csdata(int index, ::google::protobuf::uint32 value);
  inline void add_csdata(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      csdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_csdata();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcDSPAudioMetaDataPayload_t)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > aifdata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > csdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcDSPAudioMetaDataPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcDSPVolumePayload : public ::google::protobuf::Message {
 public:
  IpcDSPVolumePayload();
  virtual ~IpcDSPVolumePayload();
  
  IpcDSPVolumePayload(const IpcDSPVolumePayload& from);
  
  inline IpcDSPVolumePayload& operator=(const IpcDSPVolumePayload& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcDSPVolumePayload& default_instance();
  
  void Swap(IpcDSPVolumePayload* other);
  
  // implements Message ----------------------------------------------
  
  IpcDSPVolumePayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcDSPVolumePayload& from);
  void MergeFrom(const IpcDSPVolumePayload& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 muteState = 1;
  inline bool has_mutestate() const;
  inline void clear_mutestate();
  static const int kMuteStateFieldNumber = 1;
  inline ::google::protobuf::uint32 mutestate() const;
  inline void set_mutestate(::google::protobuf::uint32 value);
  
  // optional uint32 muteProfile = 2;
  inline bool has_muteprofile() const;
  inline void clear_muteprofile();
  static const int kMuteProfileFieldNumber = 2;
  inline ::google::protobuf::uint32 muteprofile() const;
  inline void set_muteprofile(::google::protobuf::uint32 value);
  
  // optional uint32 volume = 3;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 3;
  inline ::google::protobuf::uint32 volume() const;
  inline void set_volume(::google::protobuf::uint32 value);
  
  // optional uint32 rampProfile = 4;
  inline bool has_rampprofile() const;
  inline void clear_rampprofile();
  static const int kRampProfileFieldNumber = 4;
  inline ::google::protobuf::uint32 rampprofile() const;
  inline void set_rampprofile(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcDSPVolumePayload)
 private:
  inline void set_has_mutestate();
  inline void clear_has_mutestate();
  inline void set_has_muteprofile();
  inline void clear_has_muteprofile();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_rampprofile();
  inline void clear_has_rampprofile();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mutestate_;
  ::google::protobuf::uint32 muteprofile_;
  ::google::protobuf::uint32 volume_;
  ::google::protobuf::uint32 rampprofile_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcDSPVolumePayload* default_instance_;
};
// -------------------------------------------------------------------

class IpcEcho_t : public ::google::protobuf::Message {
 public:
  IpcEcho_t();
  virtual ~IpcEcho_t();
  
  IpcEcho_t(const IpcEcho_t& from);
  
  inline IpcEcho_t& operator=(const IpcEcho_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcEcho_t& default_instance();
  
  void Swap(IpcEcho_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcEcho_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcEcho_t& from);
  void MergeFrom(const IpcEcho_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 reserved = 1;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 1;
  inline ::google::protobuf::uint32 reserved() const;
  inline void set_reserved(::google::protobuf::uint32 value);
  
  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcEcho_t)
 private:
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 reserved_;
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcEcho_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcF0HealthStatusPayload_t : public ::google::protobuf::Message {
 public:
  IpcF0HealthStatusPayload_t();
  virtual ~IpcF0HealthStatusPayload_t();
  
  IpcF0HealthStatusPayload_t(const IpcF0HealthStatusPayload_t& from);
  
  inline IpcF0HealthStatusPayload_t& operator=(const IpcF0HealthStatusPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcF0HealthStatusPayload_t& default_instance();
  
  void Swap(IpcF0HealthStatusPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcF0HealthStatusPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcF0HealthStatusPayload_t& from);
  void MergeFrom(const IpcF0HealthStatusPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string swVersion = 1;
  inline bool has_swversion() const;
  inline void clear_swversion();
  static const int kSwVersionFieldNumber = 1;
  inline const ::std::string& swversion() const;
  inline void set_swversion(const ::std::string& value);
  inline void set_swversion(const char* value);
  inline void set_swversion(const char* value, size_t size);
  inline ::std::string* mutable_swversion();
  inline ::std::string* release_swversion();
  
  // optional string swBootloaderVersion = 2;
  inline bool has_swbootloaderversion() const;
  inline void clear_swbootloaderversion();
  static const int kSwBootloaderVersionFieldNumber = 2;
  inline const ::std::string& swbootloaderversion() const;
  inline void set_swbootloaderversion(const ::std::string& value);
  inline void set_swbootloaderversion(const char* value);
  inline void set_swbootloaderversion(const char* value, size_t size);
  inline ::std::string* mutable_swbootloaderversion();
  inline ::std::string* release_swbootloaderversion();
  
  // optional string swLongVersion = 3;
  inline bool has_swlongversion() const;
  inline void clear_swlongversion();
  static const int kSwLongVersionFieldNumber = 3;
  inline const ::std::string& swlongversion() const;
  inline void set_swlongversion(const ::std::string& value);
  inline void set_swlongversion(const char* value);
  inline void set_swlongversion(const char* value, size_t size);
  inline ::std::string* mutable_swlongversion();
  inline ::std::string* release_swlongversion();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcF0HealthStatusPayload_t)
 private:
  inline void set_has_swversion();
  inline void clear_has_swversion();
  inline void set_has_swbootloaderversion();
  inline void clear_has_swbootloaderversion();
  inline void set_has_swlongversion();
  inline void clear_has_swlongversion();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* swversion_;
  ::std::string* swbootloaderversion_;
  ::std::string* swlongversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcF0HealthStatusPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcKey_t : public ::google::protobuf::Message {
 public:
  IpcKey_t();
  virtual ~IpcKey_t();
  
  IpcKey_t(const IpcKey_t& from);
  
  inline IpcKey_t& operator=(const IpcKey_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcKey_t& default_instance();
  
  void Swap(IpcKey_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcKey_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcKey_t& from);
  void MergeFrom(const IpcKey_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional uint32 producer = 2;
  inline bool has_producer() const;
  inline void clear_producer();
  static const int kProducerFieldNumber = 2;
  inline ::google::protobuf::uint32 producer() const;
  inline void set_producer(::google::protobuf::uint32 value);
  
  // optional uint32 room = 3;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 3;
  inline ::google::protobuf::uint32 room() const;
  inline void set_room(::google::protobuf::uint32 value);
  
  // optional uint32 key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);
  
  // optional uint32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcKey_t)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_producer();
  inline void clear_has_producer();
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 producer_;
  ::google::protobuf::uint32 room_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcKey_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcLipSyncDelay_t : public ::google::protobuf::Message {
 public:
  IpcLipSyncDelay_t();
  virtual ~IpcLipSyncDelay_t();
  
  IpcLipSyncDelay_t(const IpcLipSyncDelay_t& from);
  
  inline IpcLipSyncDelay_t& operator=(const IpcLipSyncDelay_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcLipSyncDelay_t& default_instance();
  
  void Swap(IpcLipSyncDelay_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcLipSyncDelay_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcLipSyncDelay_t& from);
  void MergeFrom(const IpcLipSyncDelay_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 lipSyncDelay = 1;
  inline bool has_lipsyncdelay() const;
  inline void clear_lipsyncdelay();
  static const int kLipSyncDelayFieldNumber = 1;
  inline ::google::protobuf::uint32 lipsyncdelay() const;
  inline void set_lipsyncdelay(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcLipSyncDelay_t)
 private:
  inline void set_has_lipsyncdelay();
  inline void clear_has_lipsyncdelay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 lipsyncdelay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcLipSyncDelay_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcLpmHealthStatusPayload_t : public ::google::protobuf::Message {
 public:
  IpcLpmHealthStatusPayload_t();
  virtual ~IpcLpmHealthStatusPayload_t();
  
  IpcLpmHealthStatusPayload_t(const IpcLpmHealthStatusPayload_t& from);
  
  inline IpcLpmHealthStatusPayload_t& operator=(const IpcLpmHealthStatusPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcLpmHealthStatusPayload_t& default_instance();
  
  void Swap(IpcLpmHealthStatusPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcLpmHealthStatusPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcLpmHealthStatusPayload_t& from);
  void MergeFrom(const IpcLpmHealthStatusPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 image = 1;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline ::google::protobuf::uint32 image() const;
  inline void set_image(::google::protobuf::uint32 value);
  
  // optional string swVersion = 2;
  inline bool has_swversion() const;
  inline void clear_swversion();
  static const int kSwVersionFieldNumber = 2;
  inline const ::std::string& swversion() const;
  inline void set_swversion(const ::std::string& value);
  inline void set_swversion(const char* value);
  inline void set_swversion(const char* value, size_t size);
  inline ::std::string* mutable_swversion();
  inline ::std::string* release_swversion();
  
  // optional uint32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);
  
  // optional uint32 source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);
  
  // optional uint32 volume = 5;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 5;
  inline ::google::protobuf::uint32 volume() const;
  inline void set_volume(::google::protobuf::uint32 value);
  
  // optional uint32 mute = 6;
  inline bool has_mute() const;
  inline void clear_mute();
  static const int kMuteFieldNumber = 6;
  inline ::google::protobuf::uint32 mute() const;
  inline void set_mute(::google::protobuf::uint32 value);
  
  // optional uint32 uptime = 7;
  inline bool has_uptime() const;
  inline void clear_uptime();
  static const int kUptimeFieldNumber = 7;
  inline ::google::protobuf::uint32 uptime() const;
  inline void set_uptime(::google::protobuf::uint32 value);
  
  // optional uint32 regionCode = 8;
  inline bool has_regioncode() const;
  inline void clear_regioncode();
  static const int kRegionCodeFieldNumber = 8;
  inline ::google::protobuf::uint32 regioncode() const;
  inline void set_regioncode(::google::protobuf::uint32 value);
  
  // optional uint32 countryCode = 9;
  inline bool has_countrycode() const;
  inline void clear_countrycode();
  static const int kCountryCodeFieldNumber = 9;
  inline ::google::protobuf::uint32 countrycode() const;
  inline void set_countrycode(::google::protobuf::uint32 value);
  
  // optional uint32 speakerPackage = 10;
  inline bool has_speakerpackage() const;
  inline void clear_speakerpackage();
  static const int kSpeakerPackageFieldNumber = 10;
  inline ::google::protobuf::uint32 speakerpackage() const;
  inline void set_speakerpackage(::google::protobuf::uint32 value);
  
  // optional uint32 audioMode = 11;
  inline bool has_audiomode() const;
  inline void clear_audiomode();
  static const int kAudioModeFieldNumber = 11;
  inline ::google::protobuf::uint32 audiomode() const;
  inline void set_audiomode(::google::protobuf::uint32 value);
  
  // optional int32 bass = 12;
  inline bool has_bass() const;
  inline void clear_bass();
  static const int kBassFieldNumber = 12;
  inline ::google::protobuf::int32 bass() const;
  inline void set_bass(::google::protobuf::int32 value);
  
  // optional int32 treble = 13;
  inline bool has_treble() const;
  inline void clear_treble();
  static const int kTrebleFieldNumber = 13;
  inline ::google::protobuf::int32 treble() const;
  inline void set_treble(::google::protobuf::int32 value);
  
  // optional int32 center = 14;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 14;
  inline ::google::protobuf::int32 center() const;
  inline void set_center(::google::protobuf::int32 value);
  
  // optional int32 surround = 15;
  inline bool has_surround() const;
  inline void clear_surround();
  static const int kSurroundFieldNumber = 15;
  inline ::google::protobuf::int32 surround() const;
  inline void set_surround(::google::protobuf::int32 value);
  
  // optional uint32 minimumOutputLatencyMs = 16;
  inline bool has_minimumoutputlatencyms() const;
  inline void clear_minimumoutputlatencyms();
  static const int kMinimumOutputLatencyMsFieldNumber = 16;
  inline ::google::protobuf::uint32 minimumoutputlatencyms() const;
  inline void set_minimumoutputlatencyms(::google::protobuf::uint32 value);
  
  // optional uint32 totalLatencyMs = 17;
  inline bool has_totallatencyms() const;
  inline void clear_totallatencyms();
  static const int kTotalLatencyMsFieldNumber = 17;
  inline ::google::protobuf::uint32 totallatencyms() const;
  inline void set_totallatencyms(::google::protobuf::uint32 value);
  
  // optional uint32 lipSyncDelayMs = 18;
  inline bool has_lipsyncdelayms() const;
  inline void clear_lipsyncdelayms();
  static const int kLipSyncDelayMsFieldNumber = 18;
  inline ::google::protobuf::uint32 lipsyncdelayms() const;
  inline void set_lipsyncdelayms(::google::protobuf::uint32 value);
  
  // optional uint32 systemColor = 19;
  inline bool has_systemcolor() const;
  inline void clear_systemcolor();
  static const int kSystemColorFieldNumber = 19;
  inline ::google::protobuf::uint32 systemcolor() const;
  inline void set_systemcolor(::google::protobuf::uint32 value);
  
  // optional uint32 language = 20;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 20;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);
  
  // optional string serial = 21;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 21;
  inline const ::std::string& serial() const;
  inline void set_serial(const ::std::string& value);
  inline void set_serial(const char* value);
  inline void set_serial(const char* value, size_t size);
  inline ::std::string* mutable_serial();
  inline ::std::string* release_serial();
  
  // optional uint32 status = 22;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 22;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 outOfBoxStatus = 23;
  inline bool has_outofboxstatus() const;
  inline void clear_outofboxstatus();
  static const int kOutOfBoxStatusFieldNumber = 23;
  inline ::google::protobuf::uint32 outofboxstatus() const;
  inline void set_outofboxstatus(::google::protobuf::uint32 value);
  
  // optional uint32 networkStatus = 24;
  inline bool has_networkstatus() const;
  inline void clear_networkstatus();
  static const int kNetworkStatusFieldNumber = 24;
  inline ::google::protobuf::uint32 networkstatus() const;
  inline void set_networkstatus(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcLpmHealthStatusPayload_t)
 private:
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_swversion();
  inline void clear_has_swversion();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_mute();
  inline void clear_has_mute();
  inline void set_has_uptime();
  inline void clear_has_uptime();
  inline void set_has_regioncode();
  inline void clear_has_regioncode();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();
  inline void set_has_speakerpackage();
  inline void clear_has_speakerpackage();
  inline void set_has_audiomode();
  inline void clear_has_audiomode();
  inline void set_has_bass();
  inline void clear_has_bass();
  inline void set_has_treble();
  inline void clear_has_treble();
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_surround();
  inline void clear_has_surround();
  inline void set_has_minimumoutputlatencyms();
  inline void clear_has_minimumoutputlatencyms();
  inline void set_has_totallatencyms();
  inline void clear_has_totallatencyms();
  inline void set_has_lipsyncdelayms();
  inline void clear_has_lipsyncdelayms();
  inline void set_has_systemcolor();
  inline void clear_has_systemcolor();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_outofboxstatus();
  inline void clear_has_outofboxstatus();
  inline void set_has_networkstatus();
  inline void clear_has_networkstatus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* swversion_;
  ::google::protobuf::uint32 image_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 volume_;
  ::google::protobuf::uint32 mute_;
  ::google::protobuf::uint32 uptime_;
  ::google::protobuf::uint32 regioncode_;
  ::google::protobuf::uint32 countrycode_;
  ::google::protobuf::uint32 speakerpackage_;
  ::google::protobuf::uint32 audiomode_;
  ::google::protobuf::int32 bass_;
  ::google::protobuf::int32 treble_;
  ::google::protobuf::int32 center_;
  ::google::protobuf::int32 surround_;
  ::google::protobuf::uint32 minimumoutputlatencyms_;
  ::google::protobuf::uint32 totallatencyms_;
  ::google::protobuf::uint32 lipsyncdelayms_;
  ::google::protobuf::uint32 systemcolor_;
  ::std::string* serial_;
  ::google::protobuf::uint32 language_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 outofboxstatus_;
  ::google::protobuf::uint32 networkstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcLpmHealthStatusPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcOperationCompletePayload_t : public ::google::protobuf::Message {
 public:
  IpcOperationCompletePayload_t();
  virtual ~IpcOperationCompletePayload_t();
  
  IpcOperationCompletePayload_t(const IpcOperationCompletePayload_t& from);
  
  inline IpcOperationCompletePayload_t& operator=(const IpcOperationCompletePayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcOperationCompletePayload_t& default_instance();
  
  void Swap(IpcOperationCompletePayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcOperationCompletePayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcOperationCompletePayload_t& from);
  void MergeFrom(const IpcOperationCompletePayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 opCompleteID = 1;
  inline bool has_opcompleteid() const;
  inline void clear_opcompleteid();
  static const int kOpCompleteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 opcompleteid() const;
  inline void set_opcompleteid(::google::protobuf::uint32 value);
  
  // optional uint32 opCompleteStatus = 2;
  inline bool has_opcompletestatus() const;
  inline void clear_opcompletestatus();
  static const int kOpCompleteStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 opcompletestatus() const;
  inline void set_opcompletestatus(::google::protobuf::uint32 value);
  
  // optional uint32 reserved = 3;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 3;
  inline ::google::protobuf::uint32 reserved() const;
  inline void set_reserved(::google::protobuf::uint32 value);
  
  // optional string msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcOperationCompletePayload_t)
 private:
  inline void set_has_opcompleteid();
  inline void clear_has_opcompleteid();
  inline void set_has_opcompletestatus();
  inline void clear_has_opcompletestatus();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 opcompleteid_;
  ::google::protobuf::uint32 opcompletestatus_;
  ::std::string* msg_;
  ::google::protobuf::uint32 reserved_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcOperationCompletePayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcRadioStatus_t : public ::google::protobuf::Message {
 public:
  IpcRadioStatus_t();
  virtual ~IpcRadioStatus_t();
  
  IpcRadioStatus_t(const IpcRadioStatus_t& from);
  
  inline IpcRadioStatus_t& operator=(const IpcRadioStatus_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcRadioStatus_t& default_instance();
  
  void Swap(IpcRadioStatus_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcRadioStatus_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcRadioStatus_t& from);
  void MergeFrom(const IpcRadioStatus_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 wlan0 = 1;
  inline bool has_wlan0() const;
  inline void clear_wlan0();
  static const int kWlan0FieldNumber = 1;
  inline ::google::protobuf::uint32 wlan0() const;
  inline void set_wlan0(::google::protobuf::uint32 value);
  
  // optional uint32 wlan1 = 2;
  inline bool has_wlan1() const;
  inline void clear_wlan1();
  static const int kWlan1FieldNumber = 2;
  inline ::google::protobuf::uint32 wlan1() const;
  inline void set_wlan1(::google::protobuf::uint32 value);
  
  // optional uint32 networkStatus = 3;
  inline bool has_networkstatus() const;
  inline void clear_networkstatus();
  static const int kNetworkStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 networkstatus() const;
  inline void set_networkstatus(::google::protobuf::uint32 value);
  
  // optional uint32 btStatus = 4;
  inline bool has_btstatus() const;
  inline void clear_btstatus();
  static const int kBtStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 btstatus() const;
  inline void set_btstatus(::google::protobuf::uint32 value);
  
  // optional uint32 loginStatus = 5;
  inline bool has_loginstatus() const;
  inline void clear_loginstatus();
  static const int kLoginStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 loginstatus() const;
  inline void set_loginstatus(::google::protobuf::uint32 value);
  
  // optional uint32 _open = 6;
  inline bool has__open() const;
  inline void clear__open();
  static const int kOpenFieldNumber = 6;
  inline ::google::protobuf::uint32 _open() const;
  inline void set__open(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcRadioStatus_t)
 private:
  inline void set_has_wlan0();
  inline void clear_has_wlan0();
  inline void set_has_wlan1();
  inline void clear_has_wlan1();
  inline void set_has_networkstatus();
  inline void clear_has_networkstatus();
  inline void set_has_btstatus();
  inline void clear_has_btstatus();
  inline void set_has_loginstatus();
  inline void clear_has_loginstatus();
  inline void set_has__open();
  inline void clear_has__open();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 wlan0_;
  ::google::protobuf::uint32 wlan1_;
  ::google::protobuf::uint32 networkstatus_;
  ::google::protobuf::uint32 btstatus_;
  ::google::protobuf::uint32 loginstatus_;
  ::google::protobuf::uint32 _open_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcRadioStatus_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcResponseCECData_t : public ::google::protobuf::Message {
 public:
  IpcResponseCECData_t();
  virtual ~IpcResponseCECData_t();
  
  IpcResponseCECData_t(const IpcResponseCECData_t& from);
  
  inline IpcResponseCECData_t& operator=(const IpcResponseCECData_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcResponseCECData_t& default_instance();
  
  void Swap(IpcResponseCECData_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcResponseCECData_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcResponseCECData_t& from);
  void MergeFrom(const IpcResponseCECData_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 sourceID = 1;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIDFieldNumber = 1;
  inline ::google::protobuf::uint32 sourceid() const;
  inline void set_sourceid(::google::protobuf::uint32 value);
  
  // optional uint32 vendorID = 2;
  inline bool has_vendorid() const;
  inline void clear_vendorid();
  static const int kVendorIDFieldNumber = 2;
  inline ::google::protobuf::uint32 vendorid() const;
  inline void set_vendorid(::google::protobuf::uint32 value);
  
  // optional uint32 logicalAddress = 3;
  inline bool has_logicaladdress() const;
  inline void clear_logicaladdress();
  static const int kLogicalAddressFieldNumber = 3;
  inline ::google::protobuf::uint32 logicaladdress() const;
  inline void set_logicaladdress(::google::protobuf::uint32 value);
  
  // repeated uint32 osdName = 4;
  inline int osdname_size() const;
  inline void clear_osdname();
  static const int kOsdNameFieldNumber = 4;
  inline ::google::protobuf::uint32 osdname(int index) const;
  inline void set_osdname(int index, ::google::protobuf::uint32 value);
  inline void add_osdname(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      osdname() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_osdname();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcResponseCECData_t)
 private:
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_vendorid();
  inline void clear_has_vendorid();
  inline void set_has_logicaladdress();
  inline void clear_has_logicaladdress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sourceid_;
  ::google::protobuf::uint32 vendorid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > osdname_;
  ::google::protobuf::uint32 logicaladdress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcResponseCECData_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcResponseCECMode_t : public ::google::protobuf::Message {
 public:
  IpcResponseCECMode_t();
  virtual ~IpcResponseCECMode_t();
  
  IpcResponseCECMode_t(const IpcResponseCECMode_t& from);
  
  inline IpcResponseCECMode_t& operator=(const IpcResponseCECMode_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcResponseCECMode_t& default_instance();
  
  void Swap(IpcResponseCECMode_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcResponseCECMode_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcResponseCECMode_t& from);
  void MergeFrom(const IpcResponseCECMode_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cecMode = 1;
  inline bool has_cecmode() const;
  inline void clear_cecmode();
  static const int kCecModeFieldNumber = 1;
  inline ::google::protobuf::uint32 cecmode() const;
  inline void set_cecmode(::google::protobuf::uint32 value);
  
  // repeated uint32 open = 2;
  inline int open_size() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 2;
  inline ::google::protobuf::uint32 open(int index) const;
  inline void set_open(int index, ::google::protobuf::uint32 value);
  inline void add_open(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      open() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_open();
  
  // optional uint32 cecModeFineSettings = 3;
  inline bool has_cecmodefinesettings() const;
  inline void clear_cecmodefinesettings();
  static const int kCecModeFineSettingsFieldNumber = 3;
  inline ::google::protobuf::uint32 cecmodefinesettings() const;
  inline void set_cecmodefinesettings(::google::protobuf::uint32 value);
  
  // optional uint32 cecModeFineSupport = 4;
  inline bool has_cecmodefinesupport() const;
  inline void clear_cecmodefinesupport();
  static const int kCecModeFineSupportFieldNumber = 4;
  inline ::google::protobuf::uint32 cecmodefinesupport() const;
  inline void set_cecmodefinesupport(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcResponseCECMode_t)
 private:
  inline void set_has_cecmode();
  inline void clear_has_cecmode();
  inline void set_has_cecmodefinesettings();
  inline void clear_has_cecmodefinesettings();
  inline void set_has_cecmodefinesupport();
  inline void clear_has_cecmodefinesupport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > open_;
  ::google::protobuf::uint32 cecmode_;
  ::google::protobuf::uint32 cecmodefinesettings_;
  ::google::protobuf::uint32 cecmodefinesupport_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcResponseCECMode_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcResponseHDMIInputSelection_t : public ::google::protobuf::Message {
 public:
  IpcResponseHDMIInputSelection_t();
  virtual ~IpcResponseHDMIInputSelection_t();
  
  IpcResponseHDMIInputSelection_t(const IpcResponseHDMIInputSelection_t& from);
  
  inline IpcResponseHDMIInputSelection_t& operator=(const IpcResponseHDMIInputSelection_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcResponseHDMIInputSelection_t& default_instance();
  
  void Swap(IpcResponseHDMIInputSelection_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcResponseHDMIInputSelection_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcResponseHDMIInputSelection_t& from);
  void MergeFrom(const IpcResponseHDMIInputSelection_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 HDMIInputSelection = 1;
  inline bool has_hdmiinputselection() const;
  inline void clear_hdmiinputselection();
  static const int kHDMIInputSelectionFieldNumber = 1;
  inline ::google::protobuf::uint32 hdmiinputselection() const;
  inline void set_hdmiinputselection(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcResponseHDMIInputSelection_t)
 private:
  inline void set_has_hdmiinputselection();
  inline void clear_has_hdmiinputselection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hdmiinputselection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcResponseHDMIInputSelection_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcResponseSPDInfoFrame_t : public ::google::protobuf::Message {
 public:
  IpcResponseSPDInfoFrame_t();
  virtual ~IpcResponseSPDInfoFrame_t();
  
  IpcResponseSPDInfoFrame_t(const IpcResponseSPDInfoFrame_t& from);
  
  inline IpcResponseSPDInfoFrame_t& operator=(const IpcResponseSPDInfoFrame_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcResponseSPDInfoFrame_t& default_instance();
  
  void Swap(IpcResponseSPDInfoFrame_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcResponseSPDInfoFrame_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcResponseSPDInfoFrame_t& from);
  void MergeFrom(const IpcResponseSPDInfoFrame_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 vendorName = 1;
  inline int vendorname_size() const;
  inline void clear_vendorname();
  static const int kVendorNameFieldNumber = 1;
  inline ::google::protobuf::uint32 vendorname(int index) const;
  inline void set_vendorname(int index, ::google::protobuf::uint32 value);
  inline void add_vendorname(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vendorname() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vendorname();
  
  // repeated uint32 productDescription = 2;
  inline int productdescription_size() const;
  inline void clear_productdescription();
  static const int kProductDescriptionFieldNumber = 2;
  inline ::google::protobuf::uint32 productdescription(int index) const;
  inline void set_productdescription(int index, ::google::protobuf::uint32 value);
  inline void add_productdescription(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      productdescription() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_productdescription();
  
  // optional uint32 sourceInformation = 3;
  inline bool has_sourceinformation() const;
  inline void clear_sourceinformation();
  static const int kSourceInformationFieldNumber = 3;
  inline ::google::protobuf::uint32 sourceinformation() const;
  inline void set_sourceinformation(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcResponseSPDInfoFrame_t)
 private:
  inline void set_has_sourceinformation();
  inline void clear_has_sourceinformation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vendorname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > productdescription_;
  ::google::protobuf::uint32 sourceinformation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcResponseSPDInfoFrame_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcSetDSPAudioMode_t : public ::google::protobuf::Message {
 public:
  IpcSetDSPAudioMode_t();
  virtual ~IpcSetDSPAudioMode_t();
  
  IpcSetDSPAudioMode_t(const IpcSetDSPAudioMode_t& from);
  
  inline IpcSetDSPAudioMode_t& operator=(const IpcSetDSPAudioMode_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcSetDSPAudioMode_t& default_instance();
  
  void Swap(IpcSetDSPAudioMode_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcSetDSPAudioMode_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcSetDSPAudioMode_t& from);
  void MergeFrom(const IpcSetDSPAudioMode_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 audioMode = 1;
  inline bool has_audiomode() const;
  inline void clear_audiomode();
  static const int kAudioModeFieldNumber = 1;
  inline ::google::protobuf::int32 audiomode() const;
  inline void set_audiomode(::google::protobuf::int32 value);
  
  // repeated uint32 ExtraSpace = 2;
  inline int extraspace_size() const;
  inline void clear_extraspace();
  static const int kExtraSpaceFieldNumber = 2;
  inline ::google::protobuf::uint32 extraspace(int index) const;
  inline void set_extraspace(int index, ::google::protobuf::uint32 value);
  inline void add_extraspace(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      extraspace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_extraspace();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcSetDSPAudioMode_t)
 private:
  inline void set_has_audiomode();
  inline void clear_has_audiomode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > extraspace_;
  ::google::protobuf::int32 audiomode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcSetDSPAudioMode_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcSetNewLangPayload_t : public ::google::protobuf::Message {
 public:
  IpcSetNewLangPayload_t();
  virtual ~IpcSetNewLangPayload_t();
  
  IpcSetNewLangPayload_t(const IpcSetNewLangPayload_t& from);
  
  inline IpcSetNewLangPayload_t& operator=(const IpcSetNewLangPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcSetNewLangPayload_t& default_instance();
  
  void Swap(IpcSetNewLangPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcSetNewLangPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcSetNewLangPayload_t& from);
  void MergeFrom(const IpcSetNewLangPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 language = 1;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);
  
  // optional uint32 reserved = 2;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 2;
  inline ::google::protobuf::uint32 reserved() const;
  inline void set_reserved(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcSetNewLangPayload_t)
 private:
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 language_;
  ::google::protobuf::uint32 reserved_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcSetNewLangPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcStHealthStatusPayload_t : public ::google::protobuf::Message {
 public:
  IpcStHealthStatusPayload_t();
  virtual ~IpcStHealthStatusPayload_t();
  
  IpcStHealthStatusPayload_t(const IpcStHealthStatusPayload_t& from);
  
  inline IpcStHealthStatusPayload_t& operator=(const IpcStHealthStatusPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcStHealthStatusPayload_t& default_instance();
  
  void Swap(IpcStHealthStatusPayload_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcStHealthStatusPayload_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcStHealthStatusPayload_t& from);
  void MergeFrom(const IpcStHealthStatusPayload_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string swVersion = 1;
  inline bool has_swversion() const;
  inline void clear_swversion();
  static const int kSwVersionFieldNumber = 1;
  inline const ::std::string& swversion() const;
  inline void set_swversion(const ::std::string& value);
  inline void set_swversion(const char* value);
  inline void set_swversion(const char* value, size_t size);
  inline ::std::string* mutable_swversion();
  inline ::std::string* release_swversion();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcStHealthStatusPayload_t)
 private:
  inline void set_has_swversion();
  inline void clear_has_swversion();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* swversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcStHealthStatusPayload_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcSystemTemperatureData_t : public ::google::protobuf::Message {
 public:
  IpcSystemTemperatureData_t();
  virtual ~IpcSystemTemperatureData_t();
  
  IpcSystemTemperatureData_t(const IpcSystemTemperatureData_t& from);
  
  inline IpcSystemTemperatureData_t& operator=(const IpcSystemTemperatureData_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcSystemTemperatureData_t& default_instance();
  
  void Swap(IpcSystemTemperatureData_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcSystemTemperatureData_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcSystemTemperatureData_t& from);
  void MergeFrom(const IpcSystemTemperatureData_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 reserved1 = 1;
  inline bool has_reserved1() const;
  inline void clear_reserved1();
  static const int kReserved1FieldNumber = 1;
  inline ::google::protobuf::uint32 reserved1() const;
  inline void set_reserved1(::google::protobuf::uint32 value);
  
  // optional uint32 numThermistorReadings = 2;
  inline bool has_numthermistorreadings() const;
  inline void clear_numthermistorreadings();
  static const int kNumThermistorReadingsFieldNumber = 2;
  inline ::google::protobuf::uint32 numthermistorreadings() const;
  inline void set_numthermistorreadings(::google::protobuf::uint32 value);
  
  // optional uint32 reserved2 = 3;
  inline bool has_reserved2() const;
  inline void clear_reserved2();
  static const int kReserved2FieldNumber = 3;
  inline ::google::protobuf::uint32 reserved2() const;
  inline void set_reserved2(::google::protobuf::uint32 value);
  
  // optional uint32 reserved3 = 4;
  inline bool has_reserved3() const;
  inline void clear_reserved3();
  static const int kReserved3FieldNumber = 4;
  inline ::google::protobuf::uint32 reserved3() const;
  inline void set_reserved3(::google::protobuf::uint32 value);
  
  // repeated .lpmservice.IpcThermistorData_t ThermistorData = 5;
  inline int thermistordata_size() const;
  inline void clear_thermistordata();
  static const int kThermistorDataFieldNumber = 5;
  inline const ::lpmservice::IpcThermistorData_t& thermistordata(int index) const;
  inline ::lpmservice::IpcThermistorData_t* mutable_thermistordata(int index);
  inline ::lpmservice::IpcThermistorData_t* add_thermistordata();
  inline const ::google::protobuf::RepeatedPtrField< ::lpmservice::IpcThermistorData_t >&
      thermistordata() const;
  inline ::google::protobuf::RepeatedPtrField< ::lpmservice::IpcThermistorData_t >*
      mutable_thermistordata();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcSystemTemperatureData_t)
 private:
  inline void set_has_reserved1();
  inline void clear_has_reserved1();
  inline void set_has_numthermistorreadings();
  inline void clear_has_numthermistorreadings();
  inline void set_has_reserved2();
  inline void clear_has_reserved2();
  inline void set_has_reserved3();
  inline void clear_has_reserved3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 reserved1_;
  ::google::protobuf::uint32 numthermistorreadings_;
  ::google::protobuf::uint32 reserved2_;
  ::google::protobuf::uint32 reserved3_;
  ::google::protobuf::RepeatedPtrField< ::lpmservice::IpcThermistorData_t > thermistordata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcSystemTemperatureData_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcThermistorData_t : public ::google::protobuf::Message {
 public:
  IpcThermistorData_t();
  virtual ~IpcThermistorData_t();
  
  IpcThermistorData_t(const IpcThermistorData_t& from);
  
  inline IpcThermistorData_t& operator=(const IpcThermistorData_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcThermistorData_t& default_instance();
  
  void Swap(IpcThermistorData_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcThermistorData_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcThermistorData_t& from);
  void MergeFrom(const IpcThermistorData_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 thermLocation = 1;
  inline bool has_thermlocation() const;
  inline void clear_thermlocation();
  static const int kThermLocationFieldNumber = 1;
  inline ::google::protobuf::uint32 thermlocation() const;
  inline void set_thermlocation(::google::protobuf::uint32 value);
  
  // optional int32 tempDegC = 2;
  inline bool has_tempdegc() const;
  inline void clear_tempdegc();
  static const int kTempDegCFieldNumber = 2;
  inline ::google::protobuf::int32 tempdegc() const;
  inline void set_tempdegc(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcThermistorData_t)
 private:
  inline void set_has_thermlocation();
  inline void clear_has_thermlocation();
  inline void set_has_tempdegc();
  inline void clear_has_tempdegc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 thermlocation_;
  ::google::protobuf::int32 tempdegc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcThermistorData_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcToneControl_t : public ::google::protobuf::Message {
 public:
  IpcToneControl_t();
  virtual ~IpcToneControl_t();
  
  IpcToneControl_t(const IpcToneControl_t& from);
  
  inline IpcToneControl_t& operator=(const IpcToneControl_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcToneControl_t& default_instance();
  
  void Swap(IpcToneControl_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcToneControl_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcToneControl_t& from);
  void MergeFrom(const IpcToneControl_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bass = 1;
  inline bool has_bass() const;
  inline void clear_bass();
  static const int kBassFieldNumber = 1;
  inline ::google::protobuf::int32 bass() const;
  inline void set_bass(::google::protobuf::int32 value);
  
  // optional int32 treble = 2;
  inline bool has_treble() const;
  inline void clear_treble();
  static const int kTrebleFieldNumber = 2;
  inline ::google::protobuf::int32 treble() const;
  inline void set_treble(::google::protobuf::int32 value);
  
  // optional int32 centerSpeaker = 3;
  inline bool has_centerspeaker() const;
  inline void clear_centerspeaker();
  static const int kCenterSpeakerFieldNumber = 3;
  inline ::google::protobuf::int32 centerspeaker() const;
  inline void set_centerspeaker(::google::protobuf::int32 value);
  
  // optional int32 surroundSpeaker = 4;
  inline bool has_surroundspeaker() const;
  inline void clear_surroundspeaker();
  static const int kSurroundSpeakerFieldNumber = 4;
  inline ::google::protobuf::int32 surroundspeaker() const;
  inline void set_surroundspeaker(::google::protobuf::int32 value);
  
  // optional int32 minBass = 5;
  inline bool has_minbass() const;
  inline void clear_minbass();
  static const int kMinBassFieldNumber = 5;
  inline ::google::protobuf::int32 minbass() const;
  inline void set_minbass(::google::protobuf::int32 value);
  
  // optional int32 minTreble = 6;
  inline bool has_mintreble() const;
  inline void clear_mintreble();
  static const int kMinTrebleFieldNumber = 6;
  inline ::google::protobuf::int32 mintreble() const;
  inline void set_mintreble(::google::protobuf::int32 value);
  
  // optional int32 minCenterSpeaker = 7;
  inline bool has_mincenterspeaker() const;
  inline void clear_mincenterspeaker();
  static const int kMinCenterSpeakerFieldNumber = 7;
  inline ::google::protobuf::int32 mincenterspeaker() const;
  inline void set_mincenterspeaker(::google::protobuf::int32 value);
  
  // optional int32 minSurroundSpeaker = 8;
  inline bool has_minsurroundspeaker() const;
  inline void clear_minsurroundspeaker();
  static const int kMinSurroundSpeakerFieldNumber = 8;
  inline ::google::protobuf::int32 minsurroundspeaker() const;
  inline void set_minsurroundspeaker(::google::protobuf::int32 value);
  
  // optional int32 maxBass = 9;
  inline bool has_maxbass() const;
  inline void clear_maxbass();
  static const int kMaxBassFieldNumber = 9;
  inline ::google::protobuf::int32 maxbass() const;
  inline void set_maxbass(::google::protobuf::int32 value);
  
  // optional int32 maxTreble = 10;
  inline bool has_maxtreble() const;
  inline void clear_maxtreble();
  static const int kMaxTrebleFieldNumber = 10;
  inline ::google::protobuf::int32 maxtreble() const;
  inline void set_maxtreble(::google::protobuf::int32 value);
  
  // optional int32 maxCenterSpeaker = 11;
  inline bool has_maxcenterspeaker() const;
  inline void clear_maxcenterspeaker();
  static const int kMaxCenterSpeakerFieldNumber = 11;
  inline ::google::protobuf::int32 maxcenterspeaker() const;
  inline void set_maxcenterspeaker(::google::protobuf::int32 value);
  
  // optional int32 maxSurroundSpeaker = 12;
  inline bool has_maxsurroundspeaker() const;
  inline void clear_maxsurroundspeaker();
  static const int kMaxSurroundSpeakerFieldNumber = 12;
  inline ::google::protobuf::int32 maxsurroundspeaker() const;
  inline void set_maxsurroundspeaker(::google::protobuf::int32 value);
  
  // optional int32 stepBass = 13;
  inline bool has_stepbass() const;
  inline void clear_stepbass();
  static const int kStepBassFieldNumber = 13;
  inline ::google::protobuf::int32 stepbass() const;
  inline void set_stepbass(::google::protobuf::int32 value);
  
  // optional int32 stepTreble = 14;
  inline bool has_steptreble() const;
  inline void clear_steptreble();
  static const int kStepTrebleFieldNumber = 14;
  inline ::google::protobuf::int32 steptreble() const;
  inline void set_steptreble(::google::protobuf::int32 value);
  
  // optional int32 stepCenterSpeaker = 15;
  inline bool has_stepcenterspeaker() const;
  inline void clear_stepcenterspeaker();
  static const int kStepCenterSpeakerFieldNumber = 15;
  inline ::google::protobuf::int32 stepcenterspeaker() const;
  inline void set_stepcenterspeaker(::google::protobuf::int32 value);
  
  // optional int32 stepSurroundSpeaker = 16;
  inline bool has_stepsurroundspeaker() const;
  inline void clear_stepsurroundspeaker();
  static const int kStepSurroundSpeakerFieldNumber = 16;
  inline ::google::protobuf::int32 stepsurroundspeaker() const;
  inline void set_stepsurroundspeaker(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcToneControl_t)
 private:
  inline void set_has_bass();
  inline void clear_has_bass();
  inline void set_has_treble();
  inline void clear_has_treble();
  inline void set_has_centerspeaker();
  inline void clear_has_centerspeaker();
  inline void set_has_surroundspeaker();
  inline void clear_has_surroundspeaker();
  inline void set_has_minbass();
  inline void clear_has_minbass();
  inline void set_has_mintreble();
  inline void clear_has_mintreble();
  inline void set_has_mincenterspeaker();
  inline void clear_has_mincenterspeaker();
  inline void set_has_minsurroundspeaker();
  inline void clear_has_minsurroundspeaker();
  inline void set_has_maxbass();
  inline void clear_has_maxbass();
  inline void set_has_maxtreble();
  inline void clear_has_maxtreble();
  inline void set_has_maxcenterspeaker();
  inline void clear_has_maxcenterspeaker();
  inline void set_has_maxsurroundspeaker();
  inline void clear_has_maxsurroundspeaker();
  inline void set_has_stepbass();
  inline void clear_has_stepbass();
  inline void set_has_steptreble();
  inline void clear_has_steptreble();
  inline void set_has_stepcenterspeaker();
  inline void clear_has_stepcenterspeaker();
  inline void set_has_stepsurroundspeaker();
  inline void clear_has_stepsurroundspeaker();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bass_;
  ::google::protobuf::int32 treble_;
  ::google::protobuf::int32 centerspeaker_;
  ::google::protobuf::int32 surroundspeaker_;
  ::google::protobuf::int32 minbass_;
  ::google::protobuf::int32 mintreble_;
  ::google::protobuf::int32 mincenterspeaker_;
  ::google::protobuf::int32 minsurroundspeaker_;
  ::google::protobuf::int32 maxbass_;
  ::google::protobuf::int32 maxtreble_;
  ::google::protobuf::int32 maxcenterspeaker_;
  ::google::protobuf::int32 maxsurroundspeaker_;
  ::google::protobuf::int32 stepbass_;
  ::google::protobuf::int32 steptreble_;
  ::google::protobuf::int32 stepcenterspeaker_;
  ::google::protobuf::int32 stepsurroundspeaker_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcToneControl_t* default_instance_;
};
// -------------------------------------------------------------------

class IpcVersionResponse_t : public ::google::protobuf::Message {
 public:
  IpcVersionResponse_t();
  virtual ~IpcVersionResponse_t();
  
  IpcVersionResponse_t(const IpcVersionResponse_t& from);
  
  inline IpcVersionResponse_t& operator=(const IpcVersionResponse_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpcVersionResponse_t& default_instance();
  
  void Swap(IpcVersionResponse_t* other);
  
  // implements Message ----------------------------------------------
  
  IpcVersionResponse_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpcVersionResponse_t& from);
  void MergeFrom(const IpcVersionResponse_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // repeated uint32 unused = 2;
  inline int unused_size() const;
  inline void clear_unused();
  static const int kUnusedFieldNumber = 2;
  inline ::google::protobuf::uint32 unused(int index) const;
  inline void set_unused(int index, ::google::protobuf::uint32 value);
  inline void add_unused(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unused() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unused();
  
  // optional string vers1 = 3;
  inline bool has_vers1() const;
  inline void clear_vers1();
  static const int kVers1FieldNumber = 3;
  inline const ::std::string& vers1() const;
  inline void set_vers1(const ::std::string& value);
  inline void set_vers1(const char* value);
  inline void set_vers1(const char* value, size_t size);
  inline ::std::string* mutable_vers1();
  inline ::std::string* release_vers1();
  
  // optional string vers2 = 4;
  inline bool has_vers2() const;
  inline void clear_vers2();
  static const int kVers2FieldNumber = 4;
  inline const ::std::string& vers2() const;
  inline void set_vers2(const ::std::string& value);
  inline void set_vers2(const char* value);
  inline void set_vers2(const char* value, size_t size);
  inline ::std::string* mutable_vers2();
  inline ::std::string* release_vers2();
  
  // optional string vers3 = 5;
  inline bool has_vers3() const;
  inline void clear_vers3();
  static const int kVers3FieldNumber = 5;
  inline const ::std::string& vers3() const;
  inline void set_vers3(const ::std::string& value);
  inline void set_vers3(const char* value);
  inline void set_vers3(const char* value, size_t size);
  inline ::std::string* mutable_vers3();
  inline ::std::string* release_vers3();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IpcVersionResponse_t)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vers1();
  inline void clear_has_vers1();
  inline void set_has_vers2();
  inline void clear_has_vers2();
  inline void set_has_vers3();
  inline void clear_has_vers3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unused_;
  ::std::string* vers1_;
  ::std::string* vers2_;
  ::std::string* vers3_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IpcVersionResponse_t* default_instance_;
};
// -------------------------------------------------------------------

class Ipc_TimeoutControl_t : public ::google::protobuf::Message {
 public:
  Ipc_TimeoutControl_t();
  virtual ~Ipc_TimeoutControl_t();
  
  Ipc_TimeoutControl_t(const Ipc_TimeoutControl_t& from);
  
  inline Ipc_TimeoutControl_t& operator=(const Ipc_TimeoutControl_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ipc_TimeoutControl_t& default_instance();
  
  void Swap(Ipc_TimeoutControl_t* other);
  
  // implements Message ----------------------------------------------
  
  Ipc_TimeoutControl_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ipc_TimeoutControl_t& from);
  void MergeFrom(const Ipc_TimeoutControl_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.Ipc_TimeoutCommand_t cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline lpmservice::Ipc_TimeoutCommand_t cmd() const;
  inline void set_cmd(lpmservice::Ipc_TimeoutCommand_t value);
  
  // optional uint32 enable = 2;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 2;
  inline ::google::protobuf::uint32 enable() const;
  inline void set_enable(::google::protobuf::uint32 value);
  
  // optional uint32 timeout_min = 3;
  inline bool has_timeout_min() const;
  inline void clear_timeout_min();
  static const int kTimeoutMinFieldNumber = 3;
  inline ::google::protobuf::uint32 timeout_min() const;
  inline void set_timeout_min(::google::protobuf::uint32 value);
  
  // optional .lpmservice.A4V_IPC_SOURCE_ID source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline lpmservice::A4V_IPC_SOURCE_ID source() const;
  inline void set_source(lpmservice::A4V_IPC_SOURCE_ID value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.Ipc_TimeoutControl_t)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_timeout_min();
  inline void clear_has_timeout_min();
  inline void set_has_source();
  inline void clear_has_source();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int cmd_;
  ::google::protobuf::uint32 enable_;
  ::google::protobuf::uint32 timeout_min_;
  int source_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static Ipc_TimeoutControl_t* default_instance_;
};
// -------------------------------------------------------------------

class IPCSourceListMessage : public ::google::protobuf::Message {
 public:
  IPCSourceListMessage();
  virtual ~IPCSourceListMessage();
  
  IPCSourceListMessage(const IPCSourceListMessage& from);
  
  inline IPCSourceListMessage& operator=(const IPCSourceListMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCSourceListMessage& default_instance();
  
  void Swap(IPCSourceListMessage* other);
  
  // implements Message ----------------------------------------------
  
  IPCSourceListMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCSourceListMessage& from);
  void MergeFrom(const IPCSourceListMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 numSources = 1;
  inline bool has_numsources() const;
  inline void clear_numsources();
  static const int kNumSourcesFieldNumber = 1;
  inline ::google::protobuf::uint32 numsources() const;
  inline void set_numsources(::google::protobuf::uint32 value);
  
  // optional .lpmservice.IPCSourceStruct sourceListItems = 2;
  inline bool has_sourcelistitems() const;
  inline void clear_sourcelistitems();
  static const int kSourceListItemsFieldNumber = 2;
  inline const ::lpmservice::IPCSourceStruct& sourcelistitems() const;
  inline ::lpmservice::IPCSourceStruct* mutable_sourcelistitems();
  inline ::lpmservice::IPCSourceStruct* release_sourcelistitems();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IPCSourceListMessage)
 private:
  inline void set_has_numsources();
  inline void clear_has_numsources();
  inline void set_has_sourcelistitems();
  inline void clear_has_sourcelistitems();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::lpmservice::IPCSourceStruct* sourcelistitems_;
  ::google::protobuf::uint32 numsources_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IPCSourceListMessage* default_instance_;
};
// -------------------------------------------------------------------

class IPCSourceStruct : public ::google::protobuf::Message {
 public:
  IPCSourceStruct();
  virtual ~IPCSourceStruct();
  
  IPCSourceStruct(const IPCSourceStruct& from);
  
  inline IPCSourceStruct& operator=(const IPCSourceStruct& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCSourceStruct& default_instance();
  
  void Swap(IPCSourceStruct* other);
  
  // implements Message ----------------------------------------------
  
  IPCSourceStruct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCSourceStruct& from);
  void MergeFrom(const IPCSourceStruct& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.A4V_IPC_SOURCE_ID sourceID = 1;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIDFieldNumber = 1;
  inline lpmservice::A4V_IPC_SOURCE_ID sourceid() const;
  inline void set_sourceid(lpmservice::A4V_IPC_SOURCE_ID value);
  
  // optional string ueiKeyRecord = 2;
  inline bool has_ueikeyrecord() const;
  inline void clear_ueikeyrecord();
  static const int kUeiKeyRecordFieldNumber = 2;
  inline const ::std::string& ueikeyrecord() const;
  inline void set_ueikeyrecord(const ::std::string& value);
  inline void set_ueikeyrecord(const char* value);
  inline void set_ueikeyrecord(const char* value, size_t size);
  inline ::std::string* mutable_ueikeyrecord();
  inline ::std::string* release_ueikeyrecord();
  
  // optional uint32 sourceType = 3;
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::uint32 value);
  
  // optional uint32 sourceTypeSeqNum = 4;
  inline bool has_sourcetypeseqnum() const;
  inline void clear_sourcetypeseqnum();
  static const int kSourceTypeSeqNumFieldNumber = 4;
  inline ::google::protobuf::uint32 sourcetypeseqnum() const;
  inline void set_sourcetypeseqnum(::google::protobuf::uint32 value);
  
  // optional uint32 contentType = 5;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 contenttype() const;
  inline void set_contenttype(::google::protobuf::uint32 value);
  
  // optional uint32 AVSyncDelay = 6;
  inline bool has_avsyncdelay() const;
  inline void clear_avsyncdelay();
  static const int kAVSyncDelayFieldNumber = 6;
  inline ::google::protobuf::uint32 avsyncdelay() const;
  inline void set_avsyncdelay(::google::protobuf::uint32 value);
  
  // optional uint32 bassLevel = 7;
  inline bool has_basslevel() const;
  inline void clear_basslevel();
  static const int kBassLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 basslevel() const;
  inline void set_basslevel(::google::protobuf::uint32 value);
  
  // optional uint32 trebleLevel = 8;
  inline bool has_treblelevel() const;
  inline void clear_treblelevel();
  static const int kTrebleLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 treblelevel() const;
  inline void set_treblelevel(::google::protobuf::uint32 value);
  
  // optional uint32 audioMode = 9;
  inline bool has_audiomode() const;
  inline void clear_audiomode();
  static const int kAudioModeFieldNumber = 9;
  inline ::google::protobuf::uint32 audiomode() const;
  inline void set_audiomode(::google::protobuf::uint32 value);
  
  // optional bool displayInList = 10;
  inline bool has_displayinlist() const;
  inline void clear_displayinlist();
  static const int kDisplayInListFieldNumber = 10;
  inline bool displayinlist() const;
  inline void set_displayinlist(bool value);
  
  // optional uint32 audioInput = 11;
  inline bool has_audioinput() const;
  inline void clear_audioinput();
  static const int kAudioInputFieldNumber = 11;
  inline ::google::protobuf::uint32 audioinput() const;
  inline void set_audioinput(::google::protobuf::uint32 value);
  
  // optional uint32 audioTrack = 12;
  inline bool has_audiotrack() const;
  inline void clear_audiotrack();
  static const int kAudioTrackFieldNumber = 12;
  inline ::google::protobuf::uint32 audiotrack() const;
  inline void set_audiotrack(::google::protobuf::uint32 value);
  
  // optional string reserved = 13;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 13;
  inline const ::std::string& reserved() const;
  inline void set_reserved(const ::std::string& value);
  inline void set_reserved(const char* value);
  inline void set_reserved(const char* value, size_t size);
  inline ::std::string* mutable_reserved();
  inline ::std::string* release_reserved();
  
  // @@protoc_insertion_point(class_scope:lpmservice.IPCSourceStruct)
 private:
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_ueikeyrecord();
  inline void clear_has_ueikeyrecord();
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();
  inline void set_has_sourcetypeseqnum();
  inline void clear_has_sourcetypeseqnum();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_avsyncdelay();
  inline void clear_has_avsyncdelay();
  inline void set_has_basslevel();
  inline void clear_has_basslevel();
  inline void set_has_treblelevel();
  inline void clear_has_treblelevel();
  inline void set_has_audiomode();
  inline void clear_has_audiomode();
  inline void set_has_displayinlist();
  inline void clear_has_displayinlist();
  inline void set_has_audioinput();
  inline void clear_has_audioinput();
  inline void set_has_audiotrack();
  inline void clear_has_audiotrack();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ueikeyrecord_;
  int sourceid_;
  ::google::protobuf::uint32 sourcetype_;
  ::google::protobuf::uint32 sourcetypeseqnum_;
  ::google::protobuf::uint32 contenttype_;
  ::google::protobuf::uint32 avsyncdelay_;
  ::google::protobuf::uint32 basslevel_;
  ::google::protobuf::uint32 treblelevel_;
  ::google::protobuf::uint32 audiomode_;
  bool displayinlist_;
  ::google::protobuf::uint32 audioinput_;
  ::std::string* reserved_;
  ::google::protobuf::uint32 audiotrack_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IPCSourceStruct* default_instance_;
};
// -------------------------------------------------------------------

class IPCSource_t : public ::google::protobuf::Message {
 public:
  IPCSource_t();
  virtual ~IPCSource_t();
  
  IPCSource_t(const IPCSource_t& from);
  
  inline IPCSource_t& operator=(const IPCSource_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCSource_t& default_instance();
  
  void Swap(IPCSource_t* other);
  
  // implements Message ----------------------------------------------
  
  IPCSource_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCSource_t& from);
  void MergeFrom(const IPCSource_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.A4V_IPC_SOURCE_ID source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline lpmservice::A4V_IPC_SOURCE_ID source() const;
  inline void set_source(lpmservice::A4V_IPC_SOURCE_ID value);
  
  // optional uint32 open_field = 2;
  inline bool has_open_field() const;
  inline void clear_open_field();
  static const int kOpenFieldFieldNumber = 2;
  inline ::google::protobuf::uint32 open_field() const;
  inline void set_open_field(::google::protobuf::uint32 value);
  
  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.IPCSource_t)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_open_field();
  inline void clear_has_open_field();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int source_;
  ::google::protobuf::uint32 open_field_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static IPCSource_t* default_instance_;
};
// -------------------------------------------------------------------

class RfRemoteHealthStatus_t : public ::google::protobuf::Message {
 public:
  RfRemoteHealthStatus_t();
  virtual ~RfRemoteHealthStatus_t();
  
  RfRemoteHealthStatus_t(const RfRemoteHealthStatus_t& from);
  
  inline RfRemoteHealthStatus_t& operator=(const RfRemoteHealthStatus_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RfRemoteHealthStatus_t& default_instance();
  
  void Swap(RfRemoteHealthStatus_t* other);
  
  // implements Message ----------------------------------------------
  
  RfRemoteHealthStatus_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RfRemoteHealthStatus_t& from);
  void MergeFrom(const RfRemoteHealthStatus_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .lpmservice.RemoteImage_t image = 1;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline lpmservice::RemoteImage_t image() const;
  inline void set_image(lpmservice::RemoteImage_t value);
  
  // optional string rmtSwVersion = 2;
  inline bool has_rmtswversion() const;
  inline void clear_rmtswversion();
  static const int kRmtSwVersionFieldNumber = 2;
  inline const ::std::string& rmtswversion() const;
  inline void set_rmtswversion(const ::std::string& value);
  inline void set_rmtswversion(const char* value);
  inline void set_rmtswversion(const char* value, size_t size);
  inline ::std::string* mutable_rmtswversion();
  inline ::std::string* release_rmtswversion();
  
  // optional .lpmservice.PairingMode_t pairimgMode = 3;
  inline bool has_pairimgmode() const;
  inline void clear_pairimgmode();
  static const int kPairimgModeFieldNumber = 3;
  inline lpmservice::PairingMode_t pairimgmode() const;
  inline void set_pairimgmode(lpmservice::PairingMode_t value);
  
  // optional .lpmservice.PairingStatus_t pairingStatus = 4;
  inline bool has_pairingstatus() const;
  inline void clear_pairingstatus();
  static const int kPairingStatusFieldNumber = 4;
  inline lpmservice::PairingStatus_t pairingstatus() const;
  inline void set_pairingstatus(lpmservice::PairingStatus_t value);
  
  // optional uint32 batteryStatus = 5;
  inline bool has_batterystatus() const;
  inline void clear_batterystatus();
  static const int kBatteryStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 batterystatus() const;
  inline void set_batterystatus(::google::protobuf::uint32 value);
  
  // optional uint32 remoteAddress = 6;
  inline bool has_remoteaddress() const;
  inline void clear_remoteaddress();
  static const int kRemoteAddressFieldNumber = 6;
  inline ::google::protobuf::uint32 remoteaddress() const;
  inline void set_remoteaddress(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.RfRemoteHealthStatus_t)
 private:
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_rmtswversion();
  inline void clear_has_rmtswversion();
  inline void set_has_pairimgmode();
  inline void clear_has_pairimgmode();
  inline void set_has_pairingstatus();
  inline void clear_has_pairingstatus();
  inline void set_has_batterystatus();
  inline void clear_has_batterystatus();
  inline void set_has_remoteaddress();
  inline void clear_has_remoteaddress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rmtswversion_;
  int image_;
  int pairimgmode_;
  int pairingstatus_;
  ::google::protobuf::uint32 batterystatus_;
  ::google::protobuf::uint32 remoteaddress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static RfRemoteHealthStatus_t* default_instance_;
};
// -------------------------------------------------------------------

class UpdateEnter_t : public ::google::protobuf::Message {
 public:
  UpdateEnter_t();
  virtual ~UpdateEnter_t();
  
  UpdateEnter_t(const UpdateEnter_t& from);
  
  inline UpdateEnter_t& operator=(const UpdateEnter_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateEnter_t& default_instance();
  
  void Swap(UpdateEnter_t* other);
  
  // implements Message ----------------------------------------------
  
  UpdateEnter_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateEnter_t& from);
  void MergeFrom(const UpdateEnter_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.UpdateEnter_t)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateEnter_t* default_instance_;
};
// -------------------------------------------------------------------

class UpdateIncProg_t : public ::google::protobuf::Message {
 public:
  UpdateIncProg_t();
  virtual ~UpdateIncProg_t();
  
  UpdateIncProg_t(const UpdateIncProg_t& from);
  
  inline UpdateIncProg_t& operator=(const UpdateIncProg_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateIncProg_t& default_instance();
  
  void Swap(UpdateIncProg_t* other);
  
  // implements Message ----------------------------------------------
  
  UpdateIncProg_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateIncProg_t& from);
  void MergeFrom(const UpdateIncProg_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 segment = 1;
  inline bool has_segment() const;
  inline void clear_segment();
  static const int kSegmentFieldNumber = 1;
  inline ::google::protobuf::uint32 segment() const;
  inline void set_segment(::google::protobuf::uint32 value);
  
  // optional uint32 totalSegments = 2;
  inline bool has_totalsegments() const;
  inline void clear_totalsegments();
  static const int kTotalSegmentsFieldNumber = 2;
  inline ::google::protobuf::uint32 totalsegments() const;
  inline void set_totalsegments(::google::protobuf::uint32 value);
  
  // optional uint32 percentComplete = 3;
  inline bool has_percentcomplete() const;
  inline void clear_percentcomplete();
  static const int kPercentCompleteFieldNumber = 3;
  inline ::google::protobuf::uint32 percentcomplete() const;
  inline void set_percentcomplete(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.UpdateIncProg_t)
 private:
  inline void set_has_segment();
  inline void clear_has_segment();
  inline void set_has_totalsegments();
  inline void clear_has_totalsegments();
  inline void set_has_percentcomplete();
  inline void clear_has_percentcomplete();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 segment_;
  ::google::protobuf::uint32 totalsegments_;
  ::google::protobuf::uint32 percentcomplete_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateIncProg_t* default_instance_;
};
// -------------------------------------------------------------------

class UpdateStatus_t : public ::google::protobuf::Message {
 public:
  UpdateStatus_t();
  virtual ~UpdateStatus_t();
  
  UpdateStatus_t(const UpdateStatus_t& from);
  
  inline UpdateStatus_t& operator=(const UpdateStatus_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateStatus_t& default_instance();
  
  void Swap(UpdateStatus_t* other);
  
  // implements Message ----------------------------------------------
  
  UpdateStatus_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateStatus_t& from);
  void MergeFrom(const UpdateStatus_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.UpdateStatus_t)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateStatus_t* default_instance_;
};
// -------------------------------------------------------------------

class UpdateUnifiedProg_t : public ::google::protobuf::Message {
 public:
  UpdateUnifiedProg_t();
  virtual ~UpdateUnifiedProg_t();
  
  UpdateUnifiedProg_t(const UpdateUnifiedProg_t& from);
  
  inline UpdateUnifiedProg_t& operator=(const UpdateUnifiedProg_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUnifiedProg_t& default_instance();
  
  void Swap(UpdateUnifiedProg_t* other);
  
  // implements Message ----------------------------------------------
  
  UpdateUnifiedProg_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateUnifiedProg_t& from);
  void MergeFrom(const UpdateUnifiedProg_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 percentComplete = 1;
  inline bool has_percentcomplete() const;
  inline void clear_percentcomplete();
  static const int kPercentCompleteFieldNumber = 1;
  inline ::google::protobuf::uint32 percentcomplete() const;
  inline void set_percentcomplete(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:lpmservice.UpdateUnifiedProg_t)
 private:
  inline void set_has_percentcomplete();
  inline void clear_has_percentcomplete();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 percentcomplete_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LpmService_2eproto();
  friend void protobuf_AssignDesc_LpmService_2eproto();
  friend void protobuf_ShutdownFile_LpmService_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateUnifiedProg_t* default_instance_;
};
// ===================================================================


// ===================================================================

// A4VIpcServicePacket

// optional .lpmservice.Ipc_Device_t destination = 1;
inline bool A4VIpcServicePacket::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void A4VIpcServicePacket::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void A4VIpcServicePacket::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void A4VIpcServicePacket::clear_destination() {
  destination_ = 0;
  clear_has_destination();
}
inline lpmservice::Ipc_Device_t A4VIpcServicePacket::destination() const {
  return static_cast< lpmservice::Ipc_Device_t >(destination_);
}
inline void A4VIpcServicePacket::set_destination(lpmservice::Ipc_Device_t value) {
  GOOGLE_DCHECK(lpmservice::Ipc_Device_t_IsValid(value));
  set_has_destination();
  destination_ = value;
}

// optional bytes nested_message = 2;
inline bool A4VIpcServicePacket::has_nested_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void A4VIpcServicePacket::set_has_nested_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void A4VIpcServicePacket::clear_has_nested_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void A4VIpcServicePacket::clear_nested_message() {
  if (nested_message_ != &::google::protobuf::internal::kEmptyString) {
    nested_message_->clear();
  }
  clear_has_nested_message();
}
inline const ::std::string& A4VIpcServicePacket::nested_message() const {
  return *nested_message_;
}
inline void A4VIpcServicePacket::set_nested_message(const ::std::string& value) {
  set_has_nested_message();
  if (nested_message_ == &::google::protobuf::internal::kEmptyString) {
    nested_message_ = new ::std::string;
  }
  nested_message_->assign(value);
}
inline void A4VIpcServicePacket::set_nested_message(const char* value) {
  set_has_nested_message();
  if (nested_message_ == &::google::protobuf::internal::kEmptyString) {
    nested_message_ = new ::std::string;
  }
  nested_message_->assign(value);
}
inline void A4VIpcServicePacket::set_nested_message(const void* value, size_t size) {
  set_has_nested_message();
  if (nested_message_ == &::google::protobuf::internal::kEmptyString) {
    nested_message_ = new ::std::string;
  }
  nested_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* A4VIpcServicePacket::mutable_nested_message() {
  set_has_nested_message();
  if (nested_message_ == &::google::protobuf::internal::kEmptyString) {
    nested_message_ = new ::std::string;
  }
  return nested_message_;
}
inline ::std::string* A4VIpcServicePacket::release_nested_message() {
  clear_has_nested_message();
  if (nested_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nested_message_;
    nested_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EmptyData

// -------------------------------------------------------------------

// AccessoryDescription_t

// optional uint32 type = 1;
inline bool AccessoryDescription_t::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessoryDescription_t::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessoryDescription_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessoryDescription_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 AccessoryDescription_t::type() const {
  return type_;
}
inline void AccessoryDescription_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 position = 2;
inline bool AccessoryDescription_t::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessoryDescription_t::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccessoryDescription_t::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccessoryDescription_t::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 AccessoryDescription_t::position() const {
  return position_;
}
inline void AccessoryDescription_t::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional uint32 status = 3;
inline bool AccessoryDescription_t::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccessoryDescription_t::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccessoryDescription_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccessoryDescription_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AccessoryDescription_t::status() const {
  return status_;
}
inline void AccessoryDescription_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 active = 4;
inline bool AccessoryDescription_t::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccessoryDescription_t::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccessoryDescription_t::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccessoryDescription_t::clear_active() {
  active_ = 0u;
  clear_has_active();
}
inline ::google::protobuf::uint32 AccessoryDescription_t::active() const {
  return active_;
}
inline void AccessoryDescription_t::set_active(::google::protobuf::uint32 value) {
  set_has_active();
  active_ = value;
}

// optional string sn = 5;
inline bool AccessoryDescription_t::has_sn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccessoryDescription_t::set_has_sn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccessoryDescription_t::clear_has_sn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccessoryDescription_t::clear_sn() {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& AccessoryDescription_t::sn() const {
  return *sn_;
}
inline void AccessoryDescription_t::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
}
inline void AccessoryDescription_t::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
}
inline void AccessoryDescription_t::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessoryDescription_t::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  return sn_;
}
inline ::std::string* AccessoryDescription_t::release_sn() {
  clear_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string version = 6;
inline bool AccessoryDescription_t::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccessoryDescription_t::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccessoryDescription_t::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccessoryDescription_t::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AccessoryDescription_t::version() const {
  return *version_;
}
inline void AccessoryDescription_t::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AccessoryDescription_t::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AccessoryDescription_t::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessoryDescription_t::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* AccessoryDescription_t::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BulkClosed_t

// optional uint32 status = 1;
inline bool BulkClosed_t::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulkClosed_t::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulkClosed_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulkClosed_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 BulkClosed_t::status() const {
  return status_;
}
inline void BulkClosed_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// BulkClose_t

// optional uint32 status = 1;
inline bool BulkClose_t::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulkClose_t::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulkClose_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulkClose_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 BulkClose_t::status() const {
  return status_;
}
inline void BulkClose_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 checksum = 2;
inline bool BulkClose_t::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BulkClose_t::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BulkClose_t::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BulkClose_t::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 BulkClose_t::checksum() const {
  return checksum_;
}
inline void BulkClose_t::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// -------------------------------------------------------------------

// BulkNotify_t

// optional uint32 length = 1;
inline bool BulkNotify_t::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulkNotify_t::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulkNotify_t::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulkNotify_t::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 BulkNotify_t::length() const {
  return length_;
}
inline void BulkNotify_t::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// optional uint32 type = 2;
inline bool BulkNotify_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BulkNotify_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BulkNotify_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BulkNotify_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 BulkNotify_t::type() const {
  return type_;
}
inline void BulkNotify_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 fileId = 3;
inline bool BulkNotify_t::has_fileid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BulkNotify_t::set_has_fileid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BulkNotify_t::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BulkNotify_t::clear_fileid() {
  fileid_ = 0u;
  clear_has_fileid();
}
inline ::google::protobuf::uint32 BulkNotify_t::fileid() const {
  return fileid_;
}
inline void BulkNotify_t::set_fileid(::google::protobuf::uint32 value) {
  set_has_fileid();
  fileid_ = value;
}

// optional string filename = 4;
inline bool BulkNotify_t::has_filename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BulkNotify_t::set_has_filename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BulkNotify_t::clear_has_filename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BulkNotify_t::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& BulkNotify_t::filename() const {
  return *filename_;
}
inline void BulkNotify_t::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void BulkNotify_t::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void BulkNotify_t::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BulkNotify_t::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* BulkNotify_t::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BulkResponse_t

// optional uint32 accept = 1;
inline bool BulkResponse_t::has_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulkResponse_t::set_has_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulkResponse_t::clear_has_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulkResponse_t::clear_accept() {
  accept_ = 0u;
  clear_has_accept();
}
inline ::google::protobuf::uint32 BulkResponse_t::accept() const {
  return accept_;
}
inline void BulkResponse_t::set_accept(::google::protobuf::uint32 value) {
  set_has_accept();
  accept_ = value;
}

// -------------------------------------------------------------------

// BulkStatus_t

// optional uint32 bufferAvailable = 1;
inline bool BulkStatus_t::has_bufferavailable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulkStatus_t::set_has_bufferavailable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulkStatus_t::clear_has_bufferavailable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulkStatus_t::clear_bufferavailable() {
  bufferavailable_ = 0u;
  clear_has_bufferavailable();
}
inline ::google::protobuf::uint32 BulkStatus_t::bufferavailable() const {
  return bufferavailable_;
}
inline void BulkStatus_t::set_bufferavailable(::google::protobuf::uint32 value) {
  set_has_bufferavailable();
  bufferavailable_ = value;
}

// optional uint32 status = 2;
inline bool BulkStatus_t::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BulkStatus_t::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BulkStatus_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BulkStatus_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 BulkStatus_t::status() const {
  return status_;
}
inline void BulkStatus_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// DeviceStatusReq_t

// optional .lpmservice.StatusRequest_t requestType = 1;
inline bool DeviceStatusReq_t::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceStatusReq_t::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceStatusReq_t::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceStatusReq_t::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline lpmservice::StatusRequest_t DeviceStatusReq_t::requesttype() const {
  return static_cast< lpmservice::StatusRequest_t >(requesttype_);
}
inline void DeviceStatusReq_t::set_requesttype(lpmservice::StatusRequest_t value) {
  GOOGLE_DCHECK(lpmservice::StatusRequest_t_IsValid(value));
  set_has_requesttype();
  requesttype_ = value;
}

// -------------------------------------------------------------------

// F0_PowerStatus_t

// optional .lpmservice.F0_PowerDevice_t device = 1;
inline bool F0_PowerStatus_t::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F0_PowerStatus_t::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void F0_PowerStatus_t::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void F0_PowerStatus_t::clear_device() {
  device_ = 0;
  clear_has_device();
}
inline lpmservice::F0_PowerDevice_t F0_PowerStatus_t::device() const {
  return static_cast< lpmservice::F0_PowerDevice_t >(device_);
}
inline void F0_PowerStatus_t::set_device(lpmservice::F0_PowerDevice_t value) {
  GOOGLE_DCHECK(lpmservice::F0_PowerDevice_t_IsValid(value));
  set_has_device();
  device_ = value;
}

// optional uint32 enabled = 2;
inline bool F0_PowerStatus_t::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F0_PowerStatus_t::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void F0_PowerStatus_t::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void F0_PowerStatus_t::clear_enabled() {
  enabled_ = 0u;
  clear_has_enabled();
}
inline ::google::protobuf::uint32 F0_PowerStatus_t::enabled() const {
  return enabled_;
}
inline void F0_PowerStatus_t::set_enabled(::google::protobuf::uint32 value) {
  set_has_enabled();
  enabled_ = value;
}

// -------------------------------------------------------------------

// IpcAccessoryList_t

// repeated .lpmservice.AccessoryDescription_t accessory = 1;
inline int IpcAccessoryList_t::accessory_size() const {
  return accessory_.size();
}
inline void IpcAccessoryList_t::clear_accessory() {
  accessory_.Clear();
}
inline const ::lpmservice::AccessoryDescription_t& IpcAccessoryList_t::accessory(int index) const {
  return accessory_.Get(index);
}
inline ::lpmservice::AccessoryDescription_t* IpcAccessoryList_t::mutable_accessory(int index) {
  return accessory_.Mutable(index);
}
inline ::lpmservice::AccessoryDescription_t* IpcAccessoryList_t::add_accessory() {
  return accessory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lpmservice::AccessoryDescription_t >&
IpcAccessoryList_t::accessory() const {
  return accessory_;
}
inline ::google::protobuf::RepeatedPtrField< ::lpmservice::AccessoryDescription_t >*
IpcAccessoryList_t::mutable_accessory() {
  return &accessory_;
}

// -------------------------------------------------------------------

// IpcAsocHealthStatusPayload_t

// optional uint32 unused0 = 1;
inline bool IpcAsocHealthStatusPayload_t::has_unused0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_unused0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_unused0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcAsocHealthStatusPayload_t::clear_unused0() {
  unused0_ = 0u;
  clear_has_unused0();
}
inline ::google::protobuf::uint32 IpcAsocHealthStatusPayload_t::unused0() const {
  return unused0_;
}
inline void IpcAsocHealthStatusPayload_t::set_unused0(::google::protobuf::uint32 value) {
  set_has_unused0();
  unused0_ = value;
}

// optional uint32 statusFlags = 2;
inline bool IpcAsocHealthStatusPayload_t::has_statusflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_statusflags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_statusflags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcAsocHealthStatusPayload_t::clear_statusflags() {
  statusflags_ = 0u;
  clear_has_statusflags();
}
inline ::google::protobuf::uint32 IpcAsocHealthStatusPayload_t::statusflags() const {
  return statusflags_;
}
inline void IpcAsocHealthStatusPayload_t::set_statusflags(::google::protobuf::uint32 value) {
  set_has_statusflags();
  statusflags_ = value;
}

// optional uint32 mode = 3;
inline bool IpcAsocHealthStatusPayload_t::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcAsocHealthStatusPayload_t::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 IpcAsocHealthStatusPayload_t::mode() const {
  return mode_;
}
inline void IpcAsocHealthStatusPayload_t::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
}

// optional uint32 image = 4;
inline bool IpcAsocHealthStatusPayload_t::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcAsocHealthStatusPayload_t::clear_image() {
  image_ = 0u;
  clear_has_image();
}
inline ::google::protobuf::uint32 IpcAsocHealthStatusPayload_t::image() const {
  return image_;
}
inline void IpcAsocHealthStatusPayload_t::set_image(::google::protobuf::uint32 value) {
  set_has_image();
  image_ = value;
}

// optional string swVersion = 5;
inline bool IpcAsocHealthStatusPayload_t::has_swversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_swversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_swversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcAsocHealthStatusPayload_t::clear_swversion() {
  if (swversion_ != &::google::protobuf::internal::kEmptyString) {
    swversion_->clear();
  }
  clear_has_swversion();
}
inline const ::std::string& IpcAsocHealthStatusPayload_t::swversion() const {
  return *swversion_;
}
inline void IpcAsocHealthStatusPayload_t::set_swversion(const ::std::string& value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcAsocHealthStatusPayload_t::set_swversion(const char* value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcAsocHealthStatusPayload_t::set_swversion(const char* value, size_t size) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcAsocHealthStatusPayload_t::mutable_swversion() {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  return swversion_;
}
inline ::std::string* IpcAsocHealthStatusPayload_t::release_swversion() {
  clear_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swversion_;
    swversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string systemVersion = 6;
inline bool IpcAsocHealthStatusPayload_t::has_systemversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_systemversion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_systemversion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpcAsocHealthStatusPayload_t::clear_systemversion() {
  if (systemversion_ != &::google::protobuf::internal::kEmptyString) {
    systemversion_->clear();
  }
  clear_has_systemversion();
}
inline const ::std::string& IpcAsocHealthStatusPayload_t::systemversion() const {
  return *systemversion_;
}
inline void IpcAsocHealthStatusPayload_t::set_systemversion(const ::std::string& value) {
  set_has_systemversion();
  if (systemversion_ == &::google::protobuf::internal::kEmptyString) {
    systemversion_ = new ::std::string;
  }
  systemversion_->assign(value);
}
inline void IpcAsocHealthStatusPayload_t::set_systemversion(const char* value) {
  set_has_systemversion();
  if (systemversion_ == &::google::protobuf::internal::kEmptyString) {
    systemversion_ = new ::std::string;
  }
  systemversion_->assign(value);
}
inline void IpcAsocHealthStatusPayload_t::set_systemversion(const char* value, size_t size) {
  set_has_systemversion();
  if (systemversion_ == &::google::protobuf::internal::kEmptyString) {
    systemversion_ = new ::std::string;
  }
  systemversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcAsocHealthStatusPayload_t::mutable_systemversion() {
  set_has_systemversion();
  if (systemversion_ == &::google::protobuf::internal::kEmptyString) {
    systemversion_ = new ::std::string;
  }
  return systemversion_;
}
inline ::std::string* IpcAsocHealthStatusPayload_t::release_systemversion() {
  clear_has_systemversion();
  if (systemversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = systemversion_;
    systemversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string logID = 7;
inline bool IpcAsocHealthStatusPayload_t::has_logid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpcAsocHealthStatusPayload_t::set_has_logid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpcAsocHealthStatusPayload_t::clear_has_logid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpcAsocHealthStatusPayload_t::clear_logid() {
  if (logid_ != &::google::protobuf::internal::kEmptyString) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& IpcAsocHealthStatusPayload_t::logid() const {
  return *logid_;
}
inline void IpcAsocHealthStatusPayload_t::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
}
inline void IpcAsocHealthStatusPayload_t::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
}
inline void IpcAsocHealthStatusPayload_t::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcAsocHealthStatusPayload_t::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  return logid_;
}
inline ::std::string* IpcAsocHealthStatusPayload_t::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IpcAudioMute_t

// optional uint32 internalMute = 1;
inline bool IpcAudioMute_t::has_internalmute() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcAudioMute_t::set_has_internalmute() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcAudioMute_t::clear_has_internalmute() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcAudioMute_t::clear_internalmute() {
  internalmute_ = 0u;
  clear_has_internalmute();
}
inline ::google::protobuf::uint32 IpcAudioMute_t::internalmute() const {
  return internalmute_;
}
inline void IpcAudioMute_t::set_internalmute(::google::protobuf::uint32 value) {
  set_has_internalmute();
  internalmute_ = value;
}

// optional uint32 unifyMute = 2;
inline bool IpcAudioMute_t::has_unifymute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcAudioMute_t::set_has_unifymute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcAudioMute_t::clear_has_unifymute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcAudioMute_t::clear_unifymute() {
  unifymute_ = 0u;
  clear_has_unifymute();
}
inline ::google::protobuf::uint32 IpcAudioMute_t::unifymute() const {
  return unifymute_;
}
inline void IpcAudioMute_t::set_unifymute(::google::protobuf::uint32 value) {
  set_has_unifymute();
  unifymute_ = value;
}

// -------------------------------------------------------------------

// IpcAudioSetVolume_t

// optional uint32 volume = 1;
inline bool IpcAudioSetVolume_t::has_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcAudioSetVolume_t::set_has_volume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcAudioSetVolume_t::clear_has_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcAudioSetVolume_t::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
inline ::google::protobuf::uint32 IpcAudioSetVolume_t::volume() const {
  return volume_;
}
inline void IpcAudioSetVolume_t::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
}

// -------------------------------------------------------------------

// IpcAudioStatus_t

// optional uint32 volume = 1;
inline bool IpcAudioStatus_t::has_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcAudioStatus_t::set_has_volume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcAudioStatus_t::clear_has_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcAudioStatus_t::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
inline ::google::protobuf::uint32 IpcAudioStatus_t::volume() const {
  return volume_;
}
inline void IpcAudioStatus_t::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint32 mute = 2;
inline bool IpcAudioStatus_t::has_mute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcAudioStatus_t::set_has_mute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcAudioStatus_t::clear_has_mute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcAudioStatus_t::clear_mute() {
  mute_ = 0u;
  clear_has_mute();
}
inline ::google::protobuf::uint32 IpcAudioStatus_t::mute() const {
  return mute_;
}
inline void IpcAudioStatus_t::set_mute(::google::protobuf::uint32 value) {
  set_has_mute();
  mute_ = value;
}

// optional uint32 audioLatency = 3;
inline bool IpcAudioStatus_t::has_audiolatency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcAudioStatus_t::set_has_audiolatency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcAudioStatus_t::clear_has_audiolatency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcAudioStatus_t::clear_audiolatency() {
  audiolatency_ = 0u;
  clear_has_audiolatency();
}
inline ::google::protobuf::uint32 IpcAudioStatus_t::audiolatency() const {
  return audiolatency_;
}
inline void IpcAudioStatus_t::set_audiolatency(::google::protobuf::uint32 value) {
  set_has_audiolatency();
  audiolatency_ = value;
}

// -------------------------------------------------------------------

// IpcBTInfo_t

// repeated uint32 macAddress = 1;
inline int IpcBTInfo_t::macaddress_size() const {
  return macaddress_.size();
}
inline void IpcBTInfo_t::clear_macaddress() {
  macaddress_.Clear();
}
inline ::google::protobuf::uint32 IpcBTInfo_t::macaddress(int index) const {
  return macaddress_.Get(index);
}
inline void IpcBTInfo_t::set_macaddress(int index, ::google::protobuf::uint32 value) {
  macaddress_.Set(index, value);
}
inline void IpcBTInfo_t::add_macaddress(::google::protobuf::uint32 value) {
  macaddress_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcBTInfo_t::macaddress() const {
  return macaddress_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcBTInfo_t::mutable_macaddress() {
  return &macaddress_;
}

// optional string deviceName = 2;
inline bool IpcBTInfo_t::has_devicename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcBTInfo_t::set_has_devicename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcBTInfo_t::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcBTInfo_t::clear_devicename() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    devicename_->clear();
  }
  clear_has_devicename();
}
inline const ::std::string& IpcBTInfo_t::devicename() const {
  return *devicename_;
}
inline void IpcBTInfo_t::set_devicename(const ::std::string& value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void IpcBTInfo_t::set_devicename(const char* value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void IpcBTInfo_t::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcBTInfo_t::mutable_devicename() {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  return devicename_;
}
inline ::std::string* IpcBTInfo_t::release_devicename() {
  clear_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicename_;
    devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IpcBT_Control_t

// optional uint32 cmd = 1;
inline bool IpcBT_Control_t::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcBT_Control_t::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcBT_Control_t::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcBT_Control_t::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 IpcBT_Control_t::cmd() const {
  return cmd_;
}
inline void IpcBT_Control_t::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 extra = 2;
inline bool IpcBT_Control_t::has_extra() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcBT_Control_t::set_has_extra() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcBT_Control_t::clear_has_extra() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcBT_Control_t::clear_extra() {
  extra_ = 0u;
  clear_has_extra();
}
inline ::google::protobuf::uint32 IpcBT_Control_t::extra() const {
  return extra_;
}
inline void IpcBT_Control_t::set_extra(::google::protobuf::uint32 value) {
  set_has_extra();
  extra_ = value;
}

// -------------------------------------------------------------------

// IpcContentControl_t

// optional .lpmservice.IpcSTContentControlAction_t action = 1;
inline bool IpcContentControl_t::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcContentControl_t::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcContentControl_t::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcContentControl_t::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline lpmservice::IpcSTContentControlAction_t IpcContentControl_t::action() const {
  return static_cast< lpmservice::IpcSTContentControlAction_t >(action_);
}
inline void IpcContentControl_t::set_action(lpmservice::IpcSTContentControlAction_t value) {
  GOOGLE_DCHECK(lpmservice::IpcSTContentControlAction_t_IsValid(value));
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// IpcDspHealthStatusPayload_t

// optional string swVersion = 1;
inline bool IpcDspHealthStatusPayload_t::has_swversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_swversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_swversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcDspHealthStatusPayload_t::clear_swversion() {
  if (swversion_ != &::google::protobuf::internal::kEmptyString) {
    swversion_->clear();
  }
  clear_has_swversion();
}
inline const ::std::string& IpcDspHealthStatusPayload_t::swversion() const {
  return *swversion_;
}
inline void IpcDspHealthStatusPayload_t::set_swversion(const ::std::string& value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcDspHealthStatusPayload_t::set_swversion(const char* value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcDspHealthStatusPayload_t::set_swversion(const char* value, size_t size) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcDspHealthStatusPayload_t::mutable_swversion() {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  return swversion_;
}
inline ::std::string* IpcDspHealthStatusPayload_t::release_swversion() {
  clear_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swversion_;
    swversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 image = 2;
inline bool IpcDspHealthStatusPayload_t::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcDspHealthStatusPayload_t::clear_image() {
  image_ = 0u;
  clear_has_image();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::image() const {
  return image_;
}
inline void IpcDspHealthStatusPayload_t::set_image(::google::protobuf::uint32 value) {
  set_has_image();
  image_ = value;
}

// optional uint32 activeSource = 3;
inline bool IpcDspHealthStatusPayload_t::has_activesource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_activesource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_activesource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcDspHealthStatusPayload_t::clear_activesource() {
  activesource_ = 0u;
  clear_has_activesource();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::activesource() const {
  return activesource_;
}
inline void IpcDspHealthStatusPayload_t::set_activesource(::google::protobuf::uint32 value) {
  set_has_activesource();
  activesource_ = value;
}

// optional uint32 powerState = 4;
inline bool IpcDspHealthStatusPayload_t::has_powerstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_powerstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_powerstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcDspHealthStatusPayload_t::clear_powerstate() {
  powerstate_ = 0u;
  clear_has_powerstate();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::powerstate() const {
  return powerstate_;
}
inline void IpcDspHealthStatusPayload_t::set_powerstate(::google::protobuf::uint32 value) {
  set_has_powerstate();
  powerstate_ = value;
}

// optional uint32 muteState = 5;
inline bool IpcDspHealthStatusPayload_t::has_mutestate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_mutestate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_mutestate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcDspHealthStatusPayload_t::clear_mutestate() {
  mutestate_ = 0u;
  clear_has_mutestate();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::mutestate() const {
  return mutestate_;
}
inline void IpcDspHealthStatusPayload_t::set_mutestate(::google::protobuf::uint32 value) {
  set_has_mutestate();
  mutestate_ = value;
}

// optional uint32 volume = 6;
inline bool IpcDspHealthStatusPayload_t::has_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_volume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpcDspHealthStatusPayload_t::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::volume() const {
  return volume_;
}
inline void IpcDspHealthStatusPayload_t::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint32 energyPresent = 7;
inline bool IpcDspHealthStatusPayload_t::has_energypresent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_energypresent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_energypresent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpcDspHealthStatusPayload_t::clear_energypresent() {
  energypresent_ = 0u;
  clear_has_energypresent();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::energypresent() const {
  return energypresent_;
}
inline void IpcDspHealthStatusPayload_t::set_energypresent(::google::protobuf::uint32 value) {
  set_has_energypresent();
  energypresent_ = value;
}

// optional uint32 uptimeMs = 8;
inline bool IpcDspHealthStatusPayload_t::has_uptimems() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_uptimems() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_uptimems() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpcDspHealthStatusPayload_t::clear_uptimems() {
  uptimems_ = 0u;
  clear_has_uptimems();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::uptimems() const {
  return uptimems_;
}
inline void IpcDspHealthStatusPayload_t::set_uptimems(::google::protobuf::uint32 value) {
  set_has_uptimems();
  uptimems_ = value;
}

// optional uint32 ampFaultState = 9;
inline bool IpcDspHealthStatusPayload_t::has_ampfaultstate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_ampfaultstate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_ampfaultstate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpcDspHealthStatusPayload_t::clear_ampfaultstate() {
  ampfaultstate_ = 0u;
  clear_has_ampfaultstate();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::ampfaultstate() const {
  return ampfaultstate_;
}
inline void IpcDspHealthStatusPayload_t::set_ampfaultstate(::google::protobuf::uint32 value) {
  set_has_ampfaultstate();
  ampfaultstate_ = value;
}

// optional uint32 bassEnableRequest = 10;
inline bool IpcDspHealthStatusPayload_t::has_bassenablerequest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_bassenablerequest() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_bassenablerequest() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpcDspHealthStatusPayload_t::clear_bassenablerequest() {
  bassenablerequest_ = 0u;
  clear_has_bassenablerequest();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::bassenablerequest() const {
  return bassenablerequest_;
}
inline void IpcDspHealthStatusPayload_t::set_bassenablerequest(::google::protobuf::uint32 value) {
  set_has_bassenablerequest();
  bassenablerequest_ = value;
}

// optional uint32 aiqLastRun = 11;
inline bool IpcDspHealthStatusPayload_t::has_aiqlastrun() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_aiqlastrun() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_aiqlastrun() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpcDspHealthStatusPayload_t::clear_aiqlastrun() {
  aiqlastrun_ = 0u;
  clear_has_aiqlastrun();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::aiqlastrun() const {
  return aiqlastrun_;
}
inline void IpcDspHealthStatusPayload_t::set_aiqlastrun(::google::protobuf::uint32 value) {
  set_has_aiqlastrun();
  aiqlastrun_ = value;
}

// optional uint32 aiqInstalled = 12;
inline bool IpcDspHealthStatusPayload_t::has_aiqinstalled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_aiqinstalled() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_aiqinstalled() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpcDspHealthStatusPayload_t::clear_aiqinstalled() {
  aiqinstalled_ = 0u;
  clear_has_aiqinstalled();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::aiqinstalled() const {
  return aiqinstalled_;
}
inline void IpcDspHealthStatusPayload_t::set_aiqinstalled(::google::protobuf::uint32 value) {
  set_has_aiqinstalled();
  aiqinstalled_ = value;
}

// optional uint32 minimumOutputLatencyMs = 13;
inline bool IpcDspHealthStatusPayload_t::has_minimumoutputlatencyms() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_minimumoutputlatencyms() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_minimumoutputlatencyms() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IpcDspHealthStatusPayload_t::clear_minimumoutputlatencyms() {
  minimumoutputlatencyms_ = 0u;
  clear_has_minimumoutputlatencyms();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::minimumoutputlatencyms() const {
  return minimumoutputlatencyms_;
}
inline void IpcDspHealthStatusPayload_t::set_minimumoutputlatencyms(::google::protobuf::uint32 value) {
  set_has_minimumoutputlatencyms();
  minimumoutputlatencyms_ = value;
}

// optional uint32 totalLatencyMs = 14;
inline bool IpcDspHealthStatusPayload_t::has_totallatencyms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_totallatencyms() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_totallatencyms() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IpcDspHealthStatusPayload_t::clear_totallatencyms() {
  totallatencyms_ = 0u;
  clear_has_totallatencyms();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::totallatencyms() const {
  return totallatencyms_;
}
inline void IpcDspHealthStatusPayload_t::set_totallatencyms(::google::protobuf::uint32 value) {
  set_has_totallatencyms();
  totallatencyms_ = value;
}

// optional uint32 audioFormat = 15;
inline bool IpcDspHealthStatusPayload_t::has_audioformat() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_audioformat() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_audioformat() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IpcDspHealthStatusPayload_t::clear_audioformat() {
  audioformat_ = 0u;
  clear_has_audioformat();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::audioformat() const {
  return audioformat_;
}
inline void IpcDspHealthStatusPayload_t::set_audioformat(::google::protobuf::uint32 value) {
  set_has_audioformat();
  audioformat_ = value;
}

// optional uint32 sampleRate = 16;
inline bool IpcDspHealthStatusPayload_t::has_samplerate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_samplerate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_samplerate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IpcDspHealthStatusPayload_t::clear_samplerate() {
  samplerate_ = 0u;
  clear_has_samplerate();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::samplerate() const {
  return samplerate_;
}
inline void IpcDspHealthStatusPayload_t::set_samplerate(::google::protobuf::uint32 value) {
  set_has_samplerate();
  samplerate_ = value;
}

// optional uint32 fullRangeChannels = 17;
inline bool IpcDspHealthStatusPayload_t::has_fullrangechannels() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_fullrangechannels() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_fullrangechannels() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IpcDspHealthStatusPayload_t::clear_fullrangechannels() {
  fullrangechannels_ = 0u;
  clear_has_fullrangechannels();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::fullrangechannels() const {
  return fullrangechannels_;
}
inline void IpcDspHealthStatusPayload_t::set_fullrangechannels(::google::protobuf::uint32 value) {
  set_has_fullrangechannels();
  fullrangechannels_ = value;
}

// optional uint32 lfeChannels = 18;
inline bool IpcDspHealthStatusPayload_t::has_lfechannels() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IpcDspHealthStatusPayload_t::set_has_lfechannels() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IpcDspHealthStatusPayload_t::clear_has_lfechannels() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IpcDspHealthStatusPayload_t::clear_lfechannels() {
  lfechannels_ = 0u;
  clear_has_lfechannels();
}
inline ::google::protobuf::uint32 IpcDspHealthStatusPayload_t::lfechannels() const {
  return lfechannels_;
}
inline void IpcDspHealthStatusPayload_t::set_lfechannels(::google::protobuf::uint32 value) {
  set_has_lfechannels();
  lfechannels_ = value;
}

// -------------------------------------------------------------------

// IpcDspPlayTonePayload_t

// optional int32 toneId = 1;
inline bool IpcDspPlayTonePayload_t::has_toneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcDspPlayTonePayload_t::set_has_toneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcDspPlayTonePayload_t::clear_has_toneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcDspPlayTonePayload_t::clear_toneid() {
  toneid_ = 0;
  clear_has_toneid();
}
inline ::google::protobuf::int32 IpcDspPlayTonePayload_t::toneid() const {
  return toneid_;
}
inline void IpcDspPlayTonePayload_t::set_toneid(::google::protobuf::int32 value) {
  set_has_toneid();
  toneid_ = value;
}

// optional int32 locationBits = 2;
inline bool IpcDspPlayTonePayload_t::has_locationbits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcDspPlayTonePayload_t::set_has_locationbits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcDspPlayTonePayload_t::clear_has_locationbits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcDspPlayTonePayload_t::clear_locationbits() {
  locationbits_ = 0;
  clear_has_locationbits();
}
inline ::google::protobuf::int32 IpcDspPlayTonePayload_t::locationbits() const {
  return locationbits_;
}
inline void IpcDspPlayTonePayload_t::set_locationbits(::google::protobuf::int32 value) {
  set_has_locationbits();
  locationbits_ = value;
}

// optional int32 repeatCount = 3;
inline bool IpcDspPlayTonePayload_t::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcDspPlayTonePayload_t::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcDspPlayTonePayload_t::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcDspPlayTonePayload_t::clear_repeatcount() {
  repeatcount_ = 0;
  clear_has_repeatcount();
}
inline ::google::protobuf::int32 IpcDspPlayTonePayload_t::repeatcount() const {
  return repeatcount_;
}
inline void IpcDspPlayTonePayload_t::set_repeatcount(::google::protobuf::int32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// optional int32 minVolume = 4;
inline bool IpcDspPlayTonePayload_t::has_minvolume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcDspPlayTonePayload_t::set_has_minvolume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcDspPlayTonePayload_t::clear_has_minvolume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcDspPlayTonePayload_t::clear_minvolume() {
  minvolume_ = 0;
  clear_has_minvolume();
}
inline ::google::protobuf::int32 IpcDspPlayTonePayload_t::minvolume() const {
  return minvolume_;
}
inline void IpcDspPlayTonePayload_t::set_minvolume(::google::protobuf::int32 value) {
  set_has_minvolume();
  minvolume_ = value;
}

// optional int32 maxVolume = 5;
inline bool IpcDspPlayTonePayload_t::has_maxvolume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcDspPlayTonePayload_t::set_has_maxvolume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcDspPlayTonePayload_t::clear_has_maxvolume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcDspPlayTonePayload_t::clear_maxvolume() {
  maxvolume_ = 0;
  clear_has_maxvolume();
}
inline ::google::protobuf::int32 IpcDspPlayTonePayload_t::maxvolume() const {
  return maxvolume_;
}
inline void IpcDspPlayTonePayload_t::set_maxvolume(::google::protobuf::int32 value) {
  set_has_maxvolume();
  maxvolume_ = value;
}

// -------------------------------------------------------------------

// IpcDspProfilePayload_t

// optional uint32 sourceSelect = 1;
inline bool IpcDspProfilePayload_t::has_sourceselect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_sourceselect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcDspProfilePayload_t::clear_has_sourceselect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcDspProfilePayload_t::clear_sourceselect() {
  sourceselect_ = 0u;
  clear_has_sourceselect();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::sourceselect() const {
  return sourceselect_;
}
inline void IpcDspProfilePayload_t::set_sourceselect(::google::protobuf::uint32 value) {
  set_has_sourceselect();
  sourceselect_ = value;
}

// optional uint32 powerState = 2;
inline bool IpcDspProfilePayload_t::has_powerstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_powerstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcDspProfilePayload_t::clear_has_powerstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcDspProfilePayload_t::clear_powerstate() {
  powerstate_ = 0u;
  clear_has_powerstate();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::powerstate() const {
  return powerstate_;
}
inline void IpcDspProfilePayload_t::set_powerstate(::google::protobuf::uint32 value) {
  set_has_powerstate();
  powerstate_ = value;
}

// optional uint32 networkLatencyMs = 3;
inline bool IpcDspProfilePayload_t::has_networklatencyms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_networklatencyms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcDspProfilePayload_t::clear_has_networklatencyms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcDspProfilePayload_t::clear_networklatencyms() {
  networklatencyms_ = 0u;
  clear_has_networklatencyms();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::networklatencyms() const {
  return networklatencyms_;
}
inline void IpcDspProfilePayload_t::set_networklatencyms(::google::protobuf::uint32 value) {
  set_has_networklatencyms();
  networklatencyms_ = value;
}

// optional uint32 targetLatencyMs = 4;
inline bool IpcDspProfilePayload_t::has_targetlatencyms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_targetlatencyms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcDspProfilePayload_t::clear_has_targetlatencyms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcDspProfilePayload_t::clear_targetlatencyms() {
  targetlatencyms_ = 0u;
  clear_has_targetlatencyms();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::targetlatencyms() const {
  return targetlatencyms_;
}
inline void IpcDspProfilePayload_t::set_targetlatencyms(::google::protobuf::uint32 value) {
  set_has_targetlatencyms();
  targetlatencyms_ = value;
}

// optional uint32 audioMode = 5;
inline bool IpcDspProfilePayload_t::has_audiomode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_audiomode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcDspProfilePayload_t::clear_has_audiomode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcDspProfilePayload_t::clear_audiomode() {
  audiomode_ = 0u;
  clear_has_audiomode();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::audiomode() const {
  return audiomode_;
}
inline void IpcDspProfilePayload_t::set_audiomode(::google::protobuf::uint32 value) {
  set_has_audiomode();
  audiomode_ = value;
}

// optional uint32 aiqEnable = 6;
inline bool IpcDspProfilePayload_t::has_aiqenable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_aiqenable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpcDspProfilePayload_t::clear_has_aiqenable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpcDspProfilePayload_t::clear_aiqenable() {
  aiqenable_ = 0u;
  clear_has_aiqenable();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::aiqenable() const {
  return aiqenable_;
}
inline void IpcDspProfilePayload_t::set_aiqenable(::google::protobuf::uint32 value) {
  set_has_aiqenable();
  aiqenable_ = value;
}

// optional uint32 aiqCurveSelect = 7;
inline bool IpcDspProfilePayload_t::has_aiqcurveselect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_aiqcurveselect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpcDspProfilePayload_t::clear_has_aiqcurveselect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpcDspProfilePayload_t::clear_aiqcurveselect() {
  aiqcurveselect_ = 0u;
  clear_has_aiqcurveselect();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::aiqcurveselect() const {
  return aiqcurveselect_;
}
inline void IpcDspProfilePayload_t::set_aiqcurveselect(::google::protobuf::uint32 value) {
  set_has_aiqcurveselect();
  aiqcurveselect_ = value;
}

// optional uint32 dualMonoSelect = 8;
inline bool IpcDspProfilePayload_t::has_dualmonoselect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_dualmonoselect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpcDspProfilePayload_t::clear_has_dualmonoselect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpcDspProfilePayload_t::clear_dualmonoselect() {
  dualmonoselect_ = 0u;
  clear_has_dualmonoselect();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::dualmonoselect() const {
  return dualmonoselect_;
}
inline void IpcDspProfilePayload_t::set_dualmonoselect(::google::protobuf::uint32 value) {
  set_has_dualmonoselect();
  dualmonoselect_ = value;
}

// optional int32 bassLevel = 9;
inline bool IpcDspProfilePayload_t::has_basslevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_basslevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpcDspProfilePayload_t::clear_has_basslevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpcDspProfilePayload_t::clear_basslevel() {
  basslevel_ = 0;
  clear_has_basslevel();
}
inline ::google::protobuf::int32 IpcDspProfilePayload_t::basslevel() const {
  return basslevel_;
}
inline void IpcDspProfilePayload_t::set_basslevel(::google::protobuf::int32 value) {
  set_has_basslevel();
  basslevel_ = value;
}

// optional int32 trebleLevel = 10;
inline bool IpcDspProfilePayload_t::has_treblelevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_treblelevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpcDspProfilePayload_t::clear_has_treblelevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpcDspProfilePayload_t::clear_treblelevel() {
  treblelevel_ = 0;
  clear_has_treblelevel();
}
inline ::google::protobuf::int32 IpcDspProfilePayload_t::treblelevel() const {
  return treblelevel_;
}
inline void IpcDspProfilePayload_t::set_treblelevel(::google::protobuf::int32 value) {
  set_has_treblelevel();
  treblelevel_ = value;
}

// optional int32 centerLevel = 11;
inline bool IpcDspProfilePayload_t::has_centerlevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_centerlevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpcDspProfilePayload_t::clear_has_centerlevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpcDspProfilePayload_t::clear_centerlevel() {
  centerlevel_ = 0;
  clear_has_centerlevel();
}
inline ::google::protobuf::int32 IpcDspProfilePayload_t::centerlevel() const {
  return centerlevel_;
}
inline void IpcDspProfilePayload_t::set_centerlevel(::google::protobuf::int32 value) {
  set_has_centerlevel();
  centerlevel_ = value;
}

// optional int32 surroundLevel = 12;
inline bool IpcDspProfilePayload_t::has_surroundlevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_surroundlevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpcDspProfilePayload_t::clear_has_surroundlevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpcDspProfilePayload_t::clear_surroundlevel() {
  surroundlevel_ = 0;
  clear_has_surroundlevel();
}
inline ::google::protobuf::int32 IpcDspProfilePayload_t::surroundlevel() const {
  return surroundlevel_;
}
inline void IpcDspProfilePayload_t::set_surroundlevel(::google::protobuf::int32 value) {
  set_has_surroundlevel();
  surroundlevel_ = value;
}

// optional uint32 languageSelect = 13;
inline bool IpcDspProfilePayload_t::has_languageselect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_languageselect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IpcDspProfilePayload_t::clear_has_languageselect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IpcDspProfilePayload_t::clear_languageselect() {
  languageselect_ = 0u;
  clear_has_languageselect();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::languageselect() const {
  return languageselect_;
}
inline void IpcDspProfilePayload_t::set_languageselect(::google::protobuf::uint32 value) {
  set_has_languageselect();
  languageselect_ = value;
}

// optional uint32 region = 14;
inline bool IpcDspProfilePayload_t::has_region() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_region() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IpcDspProfilePayload_t::clear_has_region() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IpcDspProfilePayload_t::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::region() const {
  return region_;
}
inline void IpcDspProfilePayload_t::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
}

// optional uint32 speakerPackage = 15;
inline bool IpcDspProfilePayload_t::has_speakerpackage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_speakerpackage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IpcDspProfilePayload_t::clear_has_speakerpackage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IpcDspProfilePayload_t::clear_speakerpackage() {
  speakerpackage_ = 0u;
  clear_has_speakerpackage();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::speakerpackage() const {
  return speakerpackage_;
}
inline void IpcDspProfilePayload_t::set_speakerpackage(::google::protobuf::uint32 value) {
  set_has_speakerpackage();
  speakerpackage_ = value;
}

// optional uint32 accessoryFlags = 16;
inline bool IpcDspProfilePayload_t::has_accessoryflags() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_accessoryflags() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IpcDspProfilePayload_t::clear_has_accessoryflags() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IpcDspProfilePayload_t::clear_accessoryflags() {
  accessoryflags_ = 0u;
  clear_has_accessoryflags();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::accessoryflags() const {
  return accessoryflags_;
}
inline void IpcDspProfilePayload_t::set_accessoryflags(::google::protobuf::uint32 value) {
  set_has_accessoryflags();
  accessoryflags_ = value;
}

// optional uint32 frontConnector = 17;
inline bool IpcDspProfilePayload_t::has_frontconnector() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_frontconnector() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IpcDspProfilePayload_t::clear_has_frontconnector() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IpcDspProfilePayload_t::clear_frontconnector() {
  frontconnector_ = 0u;
  clear_has_frontconnector();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::frontconnector() const {
  return frontconnector_;
}
inline void IpcDspProfilePayload_t::set_frontconnector(::google::protobuf::uint32 value) {
  set_has_frontconnector();
  frontconnector_ = value;
}

// optional uint32 reserved = 18;
inline bool IpcDspProfilePayload_t::has_reserved() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IpcDspProfilePayload_t::set_has_reserved() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IpcDspProfilePayload_t::clear_has_reserved() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IpcDspProfilePayload_t::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 IpcDspProfilePayload_t::reserved() const {
  return reserved_;
}
inline void IpcDspProfilePayload_t::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
}

// -------------------------------------------------------------------

// IpcDSPAudioMetaDataPayload_t

// repeated uint32 aifData = 1;
inline int IpcDSPAudioMetaDataPayload_t::aifdata_size() const {
  return aifdata_.size();
}
inline void IpcDSPAudioMetaDataPayload_t::clear_aifdata() {
  aifdata_.Clear();
}
inline ::google::protobuf::uint32 IpcDSPAudioMetaDataPayload_t::aifdata(int index) const {
  return aifdata_.Get(index);
}
inline void IpcDSPAudioMetaDataPayload_t::set_aifdata(int index, ::google::protobuf::uint32 value) {
  aifdata_.Set(index, value);
}
inline void IpcDSPAudioMetaDataPayload_t::add_aifdata(::google::protobuf::uint32 value) {
  aifdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcDSPAudioMetaDataPayload_t::aifdata() const {
  return aifdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcDSPAudioMetaDataPayload_t::mutable_aifdata() {
  return &aifdata_;
}

// repeated uint32 csData = 2;
inline int IpcDSPAudioMetaDataPayload_t::csdata_size() const {
  return csdata_.size();
}
inline void IpcDSPAudioMetaDataPayload_t::clear_csdata() {
  csdata_.Clear();
}
inline ::google::protobuf::uint32 IpcDSPAudioMetaDataPayload_t::csdata(int index) const {
  return csdata_.Get(index);
}
inline void IpcDSPAudioMetaDataPayload_t::set_csdata(int index, ::google::protobuf::uint32 value) {
  csdata_.Set(index, value);
}
inline void IpcDSPAudioMetaDataPayload_t::add_csdata(::google::protobuf::uint32 value) {
  csdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcDSPAudioMetaDataPayload_t::csdata() const {
  return csdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcDSPAudioMetaDataPayload_t::mutable_csdata() {
  return &csdata_;
}

// -------------------------------------------------------------------

// IpcDSPVolumePayload

// optional uint32 muteState = 1;
inline bool IpcDSPVolumePayload::has_mutestate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcDSPVolumePayload::set_has_mutestate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcDSPVolumePayload::clear_has_mutestate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcDSPVolumePayload::clear_mutestate() {
  mutestate_ = 0u;
  clear_has_mutestate();
}
inline ::google::protobuf::uint32 IpcDSPVolumePayload::mutestate() const {
  return mutestate_;
}
inline void IpcDSPVolumePayload::set_mutestate(::google::protobuf::uint32 value) {
  set_has_mutestate();
  mutestate_ = value;
}

// optional uint32 muteProfile = 2;
inline bool IpcDSPVolumePayload::has_muteprofile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcDSPVolumePayload::set_has_muteprofile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcDSPVolumePayload::clear_has_muteprofile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcDSPVolumePayload::clear_muteprofile() {
  muteprofile_ = 0u;
  clear_has_muteprofile();
}
inline ::google::protobuf::uint32 IpcDSPVolumePayload::muteprofile() const {
  return muteprofile_;
}
inline void IpcDSPVolumePayload::set_muteprofile(::google::protobuf::uint32 value) {
  set_has_muteprofile();
  muteprofile_ = value;
}

// optional uint32 volume = 3;
inline bool IpcDSPVolumePayload::has_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcDSPVolumePayload::set_has_volume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcDSPVolumePayload::clear_has_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcDSPVolumePayload::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
inline ::google::protobuf::uint32 IpcDSPVolumePayload::volume() const {
  return volume_;
}
inline void IpcDSPVolumePayload::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint32 rampProfile = 4;
inline bool IpcDSPVolumePayload::has_rampprofile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcDSPVolumePayload::set_has_rampprofile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcDSPVolumePayload::clear_has_rampprofile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcDSPVolumePayload::clear_rampprofile() {
  rampprofile_ = 0u;
  clear_has_rampprofile();
}
inline ::google::protobuf::uint32 IpcDSPVolumePayload::rampprofile() const {
  return rampprofile_;
}
inline void IpcDSPVolumePayload::set_rampprofile(::google::protobuf::uint32 value) {
  set_has_rampprofile();
  rampprofile_ = value;
}

// -------------------------------------------------------------------

// IpcEcho_t

// optional uint32 reserved = 1;
inline bool IpcEcho_t::has_reserved() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcEcho_t::set_has_reserved() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcEcho_t::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcEcho_t::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 IpcEcho_t::reserved() const {
  return reserved_;
}
inline void IpcEcho_t::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
}

// optional uint32 count = 2;
inline bool IpcEcho_t::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcEcho_t::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcEcho_t::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcEcho_t::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 IpcEcho_t::count() const {
  return count_;
}
inline void IpcEcho_t::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// IpcF0HealthStatusPayload_t

// optional string swVersion = 1;
inline bool IpcF0HealthStatusPayload_t::has_swversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcF0HealthStatusPayload_t::set_has_swversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcF0HealthStatusPayload_t::clear_has_swversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcF0HealthStatusPayload_t::clear_swversion() {
  if (swversion_ != &::google::protobuf::internal::kEmptyString) {
    swversion_->clear();
  }
  clear_has_swversion();
}
inline const ::std::string& IpcF0HealthStatusPayload_t::swversion() const {
  return *swversion_;
}
inline void IpcF0HealthStatusPayload_t::set_swversion(const ::std::string& value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcF0HealthStatusPayload_t::set_swversion(const char* value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcF0HealthStatusPayload_t::set_swversion(const char* value, size_t size) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcF0HealthStatusPayload_t::mutable_swversion() {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  return swversion_;
}
inline ::std::string* IpcF0HealthStatusPayload_t::release_swversion() {
  clear_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swversion_;
    swversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string swBootloaderVersion = 2;
inline bool IpcF0HealthStatusPayload_t::has_swbootloaderversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcF0HealthStatusPayload_t::set_has_swbootloaderversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcF0HealthStatusPayload_t::clear_has_swbootloaderversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcF0HealthStatusPayload_t::clear_swbootloaderversion() {
  if (swbootloaderversion_ != &::google::protobuf::internal::kEmptyString) {
    swbootloaderversion_->clear();
  }
  clear_has_swbootloaderversion();
}
inline const ::std::string& IpcF0HealthStatusPayload_t::swbootloaderversion() const {
  return *swbootloaderversion_;
}
inline void IpcF0HealthStatusPayload_t::set_swbootloaderversion(const ::std::string& value) {
  set_has_swbootloaderversion();
  if (swbootloaderversion_ == &::google::protobuf::internal::kEmptyString) {
    swbootloaderversion_ = new ::std::string;
  }
  swbootloaderversion_->assign(value);
}
inline void IpcF0HealthStatusPayload_t::set_swbootloaderversion(const char* value) {
  set_has_swbootloaderversion();
  if (swbootloaderversion_ == &::google::protobuf::internal::kEmptyString) {
    swbootloaderversion_ = new ::std::string;
  }
  swbootloaderversion_->assign(value);
}
inline void IpcF0HealthStatusPayload_t::set_swbootloaderversion(const char* value, size_t size) {
  set_has_swbootloaderversion();
  if (swbootloaderversion_ == &::google::protobuf::internal::kEmptyString) {
    swbootloaderversion_ = new ::std::string;
  }
  swbootloaderversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcF0HealthStatusPayload_t::mutable_swbootloaderversion() {
  set_has_swbootloaderversion();
  if (swbootloaderversion_ == &::google::protobuf::internal::kEmptyString) {
    swbootloaderversion_ = new ::std::string;
  }
  return swbootloaderversion_;
}
inline ::std::string* IpcF0HealthStatusPayload_t::release_swbootloaderversion() {
  clear_has_swbootloaderversion();
  if (swbootloaderversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swbootloaderversion_;
    swbootloaderversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string swLongVersion = 3;
inline bool IpcF0HealthStatusPayload_t::has_swlongversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcF0HealthStatusPayload_t::set_has_swlongversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcF0HealthStatusPayload_t::clear_has_swlongversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcF0HealthStatusPayload_t::clear_swlongversion() {
  if (swlongversion_ != &::google::protobuf::internal::kEmptyString) {
    swlongversion_->clear();
  }
  clear_has_swlongversion();
}
inline const ::std::string& IpcF0HealthStatusPayload_t::swlongversion() const {
  return *swlongversion_;
}
inline void IpcF0HealthStatusPayload_t::set_swlongversion(const ::std::string& value) {
  set_has_swlongversion();
  if (swlongversion_ == &::google::protobuf::internal::kEmptyString) {
    swlongversion_ = new ::std::string;
  }
  swlongversion_->assign(value);
}
inline void IpcF0HealthStatusPayload_t::set_swlongversion(const char* value) {
  set_has_swlongversion();
  if (swlongversion_ == &::google::protobuf::internal::kEmptyString) {
    swlongversion_ = new ::std::string;
  }
  swlongversion_->assign(value);
}
inline void IpcF0HealthStatusPayload_t::set_swlongversion(const char* value, size_t size) {
  set_has_swlongversion();
  if (swlongversion_ == &::google::protobuf::internal::kEmptyString) {
    swlongversion_ = new ::std::string;
  }
  swlongversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcF0HealthStatusPayload_t::mutable_swlongversion() {
  set_has_swlongversion();
  if (swlongversion_ == &::google::protobuf::internal::kEmptyString) {
    swlongversion_ = new ::std::string;
  }
  return swlongversion_;
}
inline ::std::string* IpcF0HealthStatusPayload_t::release_swlongversion() {
  clear_has_swlongversion();
  if (swlongversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swlongversion_;
    swlongversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IpcKey_t

// optional uint32 time = 1;
inline bool IpcKey_t::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcKey_t::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcKey_t::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcKey_t::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 IpcKey_t::time() const {
  return time_;
}
inline void IpcKey_t::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 producer = 2;
inline bool IpcKey_t::has_producer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcKey_t::set_has_producer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcKey_t::clear_has_producer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcKey_t::clear_producer() {
  producer_ = 0u;
  clear_has_producer();
}
inline ::google::protobuf::uint32 IpcKey_t::producer() const {
  return producer_;
}
inline void IpcKey_t::set_producer(::google::protobuf::uint32 value) {
  set_has_producer();
  producer_ = value;
}

// optional uint32 room = 3;
inline bool IpcKey_t::has_room() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcKey_t::set_has_room() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcKey_t::clear_has_room() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcKey_t::clear_room() {
  room_ = 0u;
  clear_has_room();
}
inline ::google::protobuf::uint32 IpcKey_t::room() const {
  return room_;
}
inline void IpcKey_t::set_room(::google::protobuf::uint32 value) {
  set_has_room();
  room_ = value;
}

// optional uint32 key = 4;
inline bool IpcKey_t::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcKey_t::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcKey_t::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcKey_t::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 IpcKey_t::key() const {
  return key_;
}
inline void IpcKey_t::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// optional uint32 state = 5;
inline bool IpcKey_t::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcKey_t::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcKey_t::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcKey_t::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IpcKey_t::state() const {
  return state_;
}
inline void IpcKey_t::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// IpcLipSyncDelay_t

// optional uint32 lipSyncDelay = 1;
inline bool IpcLipSyncDelay_t::has_lipsyncdelay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcLipSyncDelay_t::set_has_lipsyncdelay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcLipSyncDelay_t::clear_has_lipsyncdelay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcLipSyncDelay_t::clear_lipsyncdelay() {
  lipsyncdelay_ = 0u;
  clear_has_lipsyncdelay();
}
inline ::google::protobuf::uint32 IpcLipSyncDelay_t::lipsyncdelay() const {
  return lipsyncdelay_;
}
inline void IpcLipSyncDelay_t::set_lipsyncdelay(::google::protobuf::uint32 value) {
  set_has_lipsyncdelay();
  lipsyncdelay_ = value;
}

// -------------------------------------------------------------------

// IpcLpmHealthStatusPayload_t

// optional uint32 image = 1;
inline bool IpcLpmHealthStatusPayload_t::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcLpmHealthStatusPayload_t::clear_image() {
  image_ = 0u;
  clear_has_image();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::image() const {
  return image_;
}
inline void IpcLpmHealthStatusPayload_t::set_image(::google::protobuf::uint32 value) {
  set_has_image();
  image_ = value;
}

// optional string swVersion = 2;
inline bool IpcLpmHealthStatusPayload_t::has_swversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_swversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_swversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcLpmHealthStatusPayload_t::clear_swversion() {
  if (swversion_ != &::google::protobuf::internal::kEmptyString) {
    swversion_->clear();
  }
  clear_has_swversion();
}
inline const ::std::string& IpcLpmHealthStatusPayload_t::swversion() const {
  return *swversion_;
}
inline void IpcLpmHealthStatusPayload_t::set_swversion(const ::std::string& value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcLpmHealthStatusPayload_t::set_swversion(const char* value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcLpmHealthStatusPayload_t::set_swversion(const char* value, size_t size) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcLpmHealthStatusPayload_t::mutable_swversion() {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  return swversion_;
}
inline ::std::string* IpcLpmHealthStatusPayload_t::release_swversion() {
  clear_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swversion_;
    swversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 power = 3;
inline bool IpcLpmHealthStatusPayload_t::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcLpmHealthStatusPayload_t::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::power() const {
  return power_;
}
inline void IpcLpmHealthStatusPayload_t::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// optional uint32 source = 4;
inline bool IpcLpmHealthStatusPayload_t::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcLpmHealthStatusPayload_t::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::source() const {
  return source_;
}
inline void IpcLpmHealthStatusPayload_t::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
}

// optional uint32 volume = 5;
inline bool IpcLpmHealthStatusPayload_t::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcLpmHealthStatusPayload_t::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::volume() const {
  return volume_;
}
inline void IpcLpmHealthStatusPayload_t::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint32 mute = 6;
inline bool IpcLpmHealthStatusPayload_t::has_mute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_mute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_mute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpcLpmHealthStatusPayload_t::clear_mute() {
  mute_ = 0u;
  clear_has_mute();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::mute() const {
  return mute_;
}
inline void IpcLpmHealthStatusPayload_t::set_mute(::google::protobuf::uint32 value) {
  set_has_mute();
  mute_ = value;
}

// optional uint32 uptime = 7;
inline bool IpcLpmHealthStatusPayload_t::has_uptime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_uptime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_uptime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpcLpmHealthStatusPayload_t::clear_uptime() {
  uptime_ = 0u;
  clear_has_uptime();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::uptime() const {
  return uptime_;
}
inline void IpcLpmHealthStatusPayload_t::set_uptime(::google::protobuf::uint32 value) {
  set_has_uptime();
  uptime_ = value;
}

// optional uint32 regionCode = 8;
inline bool IpcLpmHealthStatusPayload_t::has_regioncode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_regioncode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_regioncode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpcLpmHealthStatusPayload_t::clear_regioncode() {
  regioncode_ = 0u;
  clear_has_regioncode();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::regioncode() const {
  return regioncode_;
}
inline void IpcLpmHealthStatusPayload_t::set_regioncode(::google::protobuf::uint32 value) {
  set_has_regioncode();
  regioncode_ = value;
}

// optional uint32 countryCode = 9;
inline bool IpcLpmHealthStatusPayload_t::has_countrycode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_countrycode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpcLpmHealthStatusPayload_t::clear_countrycode() {
  countrycode_ = 0u;
  clear_has_countrycode();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::countrycode() const {
  return countrycode_;
}
inline void IpcLpmHealthStatusPayload_t::set_countrycode(::google::protobuf::uint32 value) {
  set_has_countrycode();
  countrycode_ = value;
}

// optional uint32 speakerPackage = 10;
inline bool IpcLpmHealthStatusPayload_t::has_speakerpackage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_speakerpackage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_speakerpackage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpcLpmHealthStatusPayload_t::clear_speakerpackage() {
  speakerpackage_ = 0u;
  clear_has_speakerpackage();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::speakerpackage() const {
  return speakerpackage_;
}
inline void IpcLpmHealthStatusPayload_t::set_speakerpackage(::google::protobuf::uint32 value) {
  set_has_speakerpackage();
  speakerpackage_ = value;
}

// optional uint32 audioMode = 11;
inline bool IpcLpmHealthStatusPayload_t::has_audiomode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_audiomode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_audiomode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpcLpmHealthStatusPayload_t::clear_audiomode() {
  audiomode_ = 0u;
  clear_has_audiomode();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::audiomode() const {
  return audiomode_;
}
inline void IpcLpmHealthStatusPayload_t::set_audiomode(::google::protobuf::uint32 value) {
  set_has_audiomode();
  audiomode_ = value;
}

// optional int32 bass = 12;
inline bool IpcLpmHealthStatusPayload_t::has_bass() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_bass() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_bass() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpcLpmHealthStatusPayload_t::clear_bass() {
  bass_ = 0;
  clear_has_bass();
}
inline ::google::protobuf::int32 IpcLpmHealthStatusPayload_t::bass() const {
  return bass_;
}
inline void IpcLpmHealthStatusPayload_t::set_bass(::google::protobuf::int32 value) {
  set_has_bass();
  bass_ = value;
}

// optional int32 treble = 13;
inline bool IpcLpmHealthStatusPayload_t::has_treble() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_treble() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_treble() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_treble() {
  treble_ = 0;
  clear_has_treble();
}
inline ::google::protobuf::int32 IpcLpmHealthStatusPayload_t::treble() const {
  return treble_;
}
inline void IpcLpmHealthStatusPayload_t::set_treble(::google::protobuf::int32 value) {
  set_has_treble();
  treble_ = value;
}

// optional int32 center = 14;
inline bool IpcLpmHealthStatusPayload_t::has_center() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_center() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_center() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_center() {
  center_ = 0;
  clear_has_center();
}
inline ::google::protobuf::int32 IpcLpmHealthStatusPayload_t::center() const {
  return center_;
}
inline void IpcLpmHealthStatusPayload_t::set_center(::google::protobuf::int32 value) {
  set_has_center();
  center_ = value;
}

// optional int32 surround = 15;
inline bool IpcLpmHealthStatusPayload_t::has_surround() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_surround() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_surround() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_surround() {
  surround_ = 0;
  clear_has_surround();
}
inline ::google::protobuf::int32 IpcLpmHealthStatusPayload_t::surround() const {
  return surround_;
}
inline void IpcLpmHealthStatusPayload_t::set_surround(::google::protobuf::int32 value) {
  set_has_surround();
  surround_ = value;
}

// optional uint32 minimumOutputLatencyMs = 16;
inline bool IpcLpmHealthStatusPayload_t::has_minimumoutputlatencyms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_minimumoutputlatencyms() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_minimumoutputlatencyms() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_minimumoutputlatencyms() {
  minimumoutputlatencyms_ = 0u;
  clear_has_minimumoutputlatencyms();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::minimumoutputlatencyms() const {
  return minimumoutputlatencyms_;
}
inline void IpcLpmHealthStatusPayload_t::set_minimumoutputlatencyms(::google::protobuf::uint32 value) {
  set_has_minimumoutputlatencyms();
  minimumoutputlatencyms_ = value;
}

// optional uint32 totalLatencyMs = 17;
inline bool IpcLpmHealthStatusPayload_t::has_totallatencyms() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_totallatencyms() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_totallatencyms() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_totallatencyms() {
  totallatencyms_ = 0u;
  clear_has_totallatencyms();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::totallatencyms() const {
  return totallatencyms_;
}
inline void IpcLpmHealthStatusPayload_t::set_totallatencyms(::google::protobuf::uint32 value) {
  set_has_totallatencyms();
  totallatencyms_ = value;
}

// optional uint32 lipSyncDelayMs = 18;
inline bool IpcLpmHealthStatusPayload_t::has_lipsyncdelayms() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_lipsyncdelayms() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_lipsyncdelayms() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_lipsyncdelayms() {
  lipsyncdelayms_ = 0u;
  clear_has_lipsyncdelayms();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::lipsyncdelayms() const {
  return lipsyncdelayms_;
}
inline void IpcLpmHealthStatusPayload_t::set_lipsyncdelayms(::google::protobuf::uint32 value) {
  set_has_lipsyncdelayms();
  lipsyncdelayms_ = value;
}

// optional uint32 systemColor = 19;
inline bool IpcLpmHealthStatusPayload_t::has_systemcolor() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_systemcolor() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_systemcolor() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_systemcolor() {
  systemcolor_ = 0u;
  clear_has_systemcolor();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::systemcolor() const {
  return systemcolor_;
}
inline void IpcLpmHealthStatusPayload_t::set_systemcolor(::google::protobuf::uint32 value) {
  set_has_systemcolor();
  systemcolor_ = value;
}

// optional uint32 language = 20;
inline bool IpcLpmHealthStatusPayload_t::has_language() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_language() {
  _has_bits_[0] |= 0x00080000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_language() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::language() const {
  return language_;
}
inline void IpcLpmHealthStatusPayload_t::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
}

// optional string serial = 21;
inline bool IpcLpmHealthStatusPayload_t::has_serial() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_serial() {
  _has_bits_[0] |= 0x00100000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_serial() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_serial() {
  if (serial_ != &::google::protobuf::internal::kEmptyString) {
    serial_->clear();
  }
  clear_has_serial();
}
inline const ::std::string& IpcLpmHealthStatusPayload_t::serial() const {
  return *serial_;
}
inline void IpcLpmHealthStatusPayload_t::set_serial(const ::std::string& value) {
  set_has_serial();
  if (serial_ == &::google::protobuf::internal::kEmptyString) {
    serial_ = new ::std::string;
  }
  serial_->assign(value);
}
inline void IpcLpmHealthStatusPayload_t::set_serial(const char* value) {
  set_has_serial();
  if (serial_ == &::google::protobuf::internal::kEmptyString) {
    serial_ = new ::std::string;
  }
  serial_->assign(value);
}
inline void IpcLpmHealthStatusPayload_t::set_serial(const char* value, size_t size) {
  set_has_serial();
  if (serial_ == &::google::protobuf::internal::kEmptyString) {
    serial_ = new ::std::string;
  }
  serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcLpmHealthStatusPayload_t::mutable_serial() {
  set_has_serial();
  if (serial_ == &::google::protobuf::internal::kEmptyString) {
    serial_ = new ::std::string;
  }
  return serial_;
}
inline ::std::string* IpcLpmHealthStatusPayload_t::release_serial() {
  clear_has_serial();
  if (serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serial_;
    serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 status = 22;
inline bool IpcLpmHealthStatusPayload_t::has_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_status() {
  _has_bits_[0] |= 0x00200000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_status() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::status() const {
  return status_;
}
inline void IpcLpmHealthStatusPayload_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 outOfBoxStatus = 23;
inline bool IpcLpmHealthStatusPayload_t::has_outofboxstatus() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_outofboxstatus() {
  _has_bits_[0] |= 0x00400000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_outofboxstatus() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_outofboxstatus() {
  outofboxstatus_ = 0u;
  clear_has_outofboxstatus();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::outofboxstatus() const {
  return outofboxstatus_;
}
inline void IpcLpmHealthStatusPayload_t::set_outofboxstatus(::google::protobuf::uint32 value) {
  set_has_outofboxstatus();
  outofboxstatus_ = value;
}

// optional uint32 networkStatus = 24;
inline bool IpcLpmHealthStatusPayload_t::has_networkstatus() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void IpcLpmHealthStatusPayload_t::set_has_networkstatus() {
  _has_bits_[0] |= 0x00800000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_has_networkstatus() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void IpcLpmHealthStatusPayload_t::clear_networkstatus() {
  networkstatus_ = 0u;
  clear_has_networkstatus();
}
inline ::google::protobuf::uint32 IpcLpmHealthStatusPayload_t::networkstatus() const {
  return networkstatus_;
}
inline void IpcLpmHealthStatusPayload_t::set_networkstatus(::google::protobuf::uint32 value) {
  set_has_networkstatus();
  networkstatus_ = value;
}

// -------------------------------------------------------------------

// IpcOperationCompletePayload_t

// optional uint32 opCompleteID = 1;
inline bool IpcOperationCompletePayload_t::has_opcompleteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcOperationCompletePayload_t::set_has_opcompleteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcOperationCompletePayload_t::clear_has_opcompleteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcOperationCompletePayload_t::clear_opcompleteid() {
  opcompleteid_ = 0u;
  clear_has_opcompleteid();
}
inline ::google::protobuf::uint32 IpcOperationCompletePayload_t::opcompleteid() const {
  return opcompleteid_;
}
inline void IpcOperationCompletePayload_t::set_opcompleteid(::google::protobuf::uint32 value) {
  set_has_opcompleteid();
  opcompleteid_ = value;
}

// optional uint32 opCompleteStatus = 2;
inline bool IpcOperationCompletePayload_t::has_opcompletestatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcOperationCompletePayload_t::set_has_opcompletestatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcOperationCompletePayload_t::clear_has_opcompletestatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcOperationCompletePayload_t::clear_opcompletestatus() {
  opcompletestatus_ = 0u;
  clear_has_opcompletestatus();
}
inline ::google::protobuf::uint32 IpcOperationCompletePayload_t::opcompletestatus() const {
  return opcompletestatus_;
}
inline void IpcOperationCompletePayload_t::set_opcompletestatus(::google::protobuf::uint32 value) {
  set_has_opcompletestatus();
  opcompletestatus_ = value;
}

// optional uint32 reserved = 3;
inline bool IpcOperationCompletePayload_t::has_reserved() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcOperationCompletePayload_t::set_has_reserved() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcOperationCompletePayload_t::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcOperationCompletePayload_t::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 IpcOperationCompletePayload_t::reserved() const {
  return reserved_;
}
inline void IpcOperationCompletePayload_t::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
}

// optional string msg = 4;
inline bool IpcOperationCompletePayload_t::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcOperationCompletePayload_t::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcOperationCompletePayload_t::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcOperationCompletePayload_t::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& IpcOperationCompletePayload_t::msg() const {
  return *msg_;
}
inline void IpcOperationCompletePayload_t::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IpcOperationCompletePayload_t::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IpcOperationCompletePayload_t::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcOperationCompletePayload_t::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* IpcOperationCompletePayload_t::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IpcRadioStatus_t

// optional uint32 wlan0 = 1;
inline bool IpcRadioStatus_t::has_wlan0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcRadioStatus_t::set_has_wlan0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcRadioStatus_t::clear_has_wlan0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcRadioStatus_t::clear_wlan0() {
  wlan0_ = 0u;
  clear_has_wlan0();
}
inline ::google::protobuf::uint32 IpcRadioStatus_t::wlan0() const {
  return wlan0_;
}
inline void IpcRadioStatus_t::set_wlan0(::google::protobuf::uint32 value) {
  set_has_wlan0();
  wlan0_ = value;
}

// optional uint32 wlan1 = 2;
inline bool IpcRadioStatus_t::has_wlan1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcRadioStatus_t::set_has_wlan1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcRadioStatus_t::clear_has_wlan1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcRadioStatus_t::clear_wlan1() {
  wlan1_ = 0u;
  clear_has_wlan1();
}
inline ::google::protobuf::uint32 IpcRadioStatus_t::wlan1() const {
  return wlan1_;
}
inline void IpcRadioStatus_t::set_wlan1(::google::protobuf::uint32 value) {
  set_has_wlan1();
  wlan1_ = value;
}

// optional uint32 networkStatus = 3;
inline bool IpcRadioStatus_t::has_networkstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcRadioStatus_t::set_has_networkstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcRadioStatus_t::clear_has_networkstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcRadioStatus_t::clear_networkstatus() {
  networkstatus_ = 0u;
  clear_has_networkstatus();
}
inline ::google::protobuf::uint32 IpcRadioStatus_t::networkstatus() const {
  return networkstatus_;
}
inline void IpcRadioStatus_t::set_networkstatus(::google::protobuf::uint32 value) {
  set_has_networkstatus();
  networkstatus_ = value;
}

// optional uint32 btStatus = 4;
inline bool IpcRadioStatus_t::has_btstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcRadioStatus_t::set_has_btstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcRadioStatus_t::clear_has_btstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcRadioStatus_t::clear_btstatus() {
  btstatus_ = 0u;
  clear_has_btstatus();
}
inline ::google::protobuf::uint32 IpcRadioStatus_t::btstatus() const {
  return btstatus_;
}
inline void IpcRadioStatus_t::set_btstatus(::google::protobuf::uint32 value) {
  set_has_btstatus();
  btstatus_ = value;
}

// optional uint32 loginStatus = 5;
inline bool IpcRadioStatus_t::has_loginstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcRadioStatus_t::set_has_loginstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcRadioStatus_t::clear_has_loginstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcRadioStatus_t::clear_loginstatus() {
  loginstatus_ = 0u;
  clear_has_loginstatus();
}
inline ::google::protobuf::uint32 IpcRadioStatus_t::loginstatus() const {
  return loginstatus_;
}
inline void IpcRadioStatus_t::set_loginstatus(::google::protobuf::uint32 value) {
  set_has_loginstatus();
  loginstatus_ = value;
}

// optional uint32 _open = 6;
inline bool IpcRadioStatus_t::has__open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpcRadioStatus_t::set_has__open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpcRadioStatus_t::clear_has__open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpcRadioStatus_t::clear__open() {
  _open_ = 0u;
  clear_has__open();
}
inline ::google::protobuf::uint32 IpcRadioStatus_t::_open() const {
  return _open_;
}
inline void IpcRadioStatus_t::set__open(::google::protobuf::uint32 value) {
  set_has__open();
  _open_ = value;
}

// -------------------------------------------------------------------

// IpcResponseCECData_t

// optional uint32 sourceID = 1;
inline bool IpcResponseCECData_t::has_sourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcResponseCECData_t::set_has_sourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcResponseCECData_t::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcResponseCECData_t::clear_sourceid() {
  sourceid_ = 0u;
  clear_has_sourceid();
}
inline ::google::protobuf::uint32 IpcResponseCECData_t::sourceid() const {
  return sourceid_;
}
inline void IpcResponseCECData_t::set_sourceid(::google::protobuf::uint32 value) {
  set_has_sourceid();
  sourceid_ = value;
}

// optional uint32 vendorID = 2;
inline bool IpcResponseCECData_t::has_vendorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcResponseCECData_t::set_has_vendorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcResponseCECData_t::clear_has_vendorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcResponseCECData_t::clear_vendorid() {
  vendorid_ = 0u;
  clear_has_vendorid();
}
inline ::google::protobuf::uint32 IpcResponseCECData_t::vendorid() const {
  return vendorid_;
}
inline void IpcResponseCECData_t::set_vendorid(::google::protobuf::uint32 value) {
  set_has_vendorid();
  vendorid_ = value;
}

// optional uint32 logicalAddress = 3;
inline bool IpcResponseCECData_t::has_logicaladdress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcResponseCECData_t::set_has_logicaladdress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcResponseCECData_t::clear_has_logicaladdress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcResponseCECData_t::clear_logicaladdress() {
  logicaladdress_ = 0u;
  clear_has_logicaladdress();
}
inline ::google::protobuf::uint32 IpcResponseCECData_t::logicaladdress() const {
  return logicaladdress_;
}
inline void IpcResponseCECData_t::set_logicaladdress(::google::protobuf::uint32 value) {
  set_has_logicaladdress();
  logicaladdress_ = value;
}

// repeated uint32 osdName = 4;
inline int IpcResponseCECData_t::osdname_size() const {
  return osdname_.size();
}
inline void IpcResponseCECData_t::clear_osdname() {
  osdname_.Clear();
}
inline ::google::protobuf::uint32 IpcResponseCECData_t::osdname(int index) const {
  return osdname_.Get(index);
}
inline void IpcResponseCECData_t::set_osdname(int index, ::google::protobuf::uint32 value) {
  osdname_.Set(index, value);
}
inline void IpcResponseCECData_t::add_osdname(::google::protobuf::uint32 value) {
  osdname_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcResponseCECData_t::osdname() const {
  return osdname_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcResponseCECData_t::mutable_osdname() {
  return &osdname_;
}

// -------------------------------------------------------------------

// IpcResponseCECMode_t

// optional uint32 cecMode = 1;
inline bool IpcResponseCECMode_t::has_cecmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcResponseCECMode_t::set_has_cecmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcResponseCECMode_t::clear_has_cecmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcResponseCECMode_t::clear_cecmode() {
  cecmode_ = 0u;
  clear_has_cecmode();
}
inline ::google::protobuf::uint32 IpcResponseCECMode_t::cecmode() const {
  return cecmode_;
}
inline void IpcResponseCECMode_t::set_cecmode(::google::protobuf::uint32 value) {
  set_has_cecmode();
  cecmode_ = value;
}

// repeated uint32 open = 2;
inline int IpcResponseCECMode_t::open_size() const {
  return open_.size();
}
inline void IpcResponseCECMode_t::clear_open() {
  open_.Clear();
}
inline ::google::protobuf::uint32 IpcResponseCECMode_t::open(int index) const {
  return open_.Get(index);
}
inline void IpcResponseCECMode_t::set_open(int index, ::google::protobuf::uint32 value) {
  open_.Set(index, value);
}
inline void IpcResponseCECMode_t::add_open(::google::protobuf::uint32 value) {
  open_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcResponseCECMode_t::open() const {
  return open_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcResponseCECMode_t::mutable_open() {
  return &open_;
}

// optional uint32 cecModeFineSettings = 3;
inline bool IpcResponseCECMode_t::has_cecmodefinesettings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcResponseCECMode_t::set_has_cecmodefinesettings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcResponseCECMode_t::clear_has_cecmodefinesettings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcResponseCECMode_t::clear_cecmodefinesettings() {
  cecmodefinesettings_ = 0u;
  clear_has_cecmodefinesettings();
}
inline ::google::protobuf::uint32 IpcResponseCECMode_t::cecmodefinesettings() const {
  return cecmodefinesettings_;
}
inline void IpcResponseCECMode_t::set_cecmodefinesettings(::google::protobuf::uint32 value) {
  set_has_cecmodefinesettings();
  cecmodefinesettings_ = value;
}

// optional uint32 cecModeFineSupport = 4;
inline bool IpcResponseCECMode_t::has_cecmodefinesupport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcResponseCECMode_t::set_has_cecmodefinesupport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcResponseCECMode_t::clear_has_cecmodefinesupport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcResponseCECMode_t::clear_cecmodefinesupport() {
  cecmodefinesupport_ = 0u;
  clear_has_cecmodefinesupport();
}
inline ::google::protobuf::uint32 IpcResponseCECMode_t::cecmodefinesupport() const {
  return cecmodefinesupport_;
}
inline void IpcResponseCECMode_t::set_cecmodefinesupport(::google::protobuf::uint32 value) {
  set_has_cecmodefinesupport();
  cecmodefinesupport_ = value;
}

// -------------------------------------------------------------------

// IpcResponseHDMIInputSelection_t

// optional uint32 HDMIInputSelection = 1;
inline bool IpcResponseHDMIInputSelection_t::has_hdmiinputselection() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcResponseHDMIInputSelection_t::set_has_hdmiinputselection() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcResponseHDMIInputSelection_t::clear_has_hdmiinputselection() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcResponseHDMIInputSelection_t::clear_hdmiinputselection() {
  hdmiinputselection_ = 0u;
  clear_has_hdmiinputselection();
}
inline ::google::protobuf::uint32 IpcResponseHDMIInputSelection_t::hdmiinputselection() const {
  return hdmiinputselection_;
}
inline void IpcResponseHDMIInputSelection_t::set_hdmiinputselection(::google::protobuf::uint32 value) {
  set_has_hdmiinputselection();
  hdmiinputselection_ = value;
}

// -------------------------------------------------------------------

// IpcResponseSPDInfoFrame_t

// repeated uint32 vendorName = 1;
inline int IpcResponseSPDInfoFrame_t::vendorname_size() const {
  return vendorname_.size();
}
inline void IpcResponseSPDInfoFrame_t::clear_vendorname() {
  vendorname_.Clear();
}
inline ::google::protobuf::uint32 IpcResponseSPDInfoFrame_t::vendorname(int index) const {
  return vendorname_.Get(index);
}
inline void IpcResponseSPDInfoFrame_t::set_vendorname(int index, ::google::protobuf::uint32 value) {
  vendorname_.Set(index, value);
}
inline void IpcResponseSPDInfoFrame_t::add_vendorname(::google::protobuf::uint32 value) {
  vendorname_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcResponseSPDInfoFrame_t::vendorname() const {
  return vendorname_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcResponseSPDInfoFrame_t::mutable_vendorname() {
  return &vendorname_;
}

// repeated uint32 productDescription = 2;
inline int IpcResponseSPDInfoFrame_t::productdescription_size() const {
  return productdescription_.size();
}
inline void IpcResponseSPDInfoFrame_t::clear_productdescription() {
  productdescription_.Clear();
}
inline ::google::protobuf::uint32 IpcResponseSPDInfoFrame_t::productdescription(int index) const {
  return productdescription_.Get(index);
}
inline void IpcResponseSPDInfoFrame_t::set_productdescription(int index, ::google::protobuf::uint32 value) {
  productdescription_.Set(index, value);
}
inline void IpcResponseSPDInfoFrame_t::add_productdescription(::google::protobuf::uint32 value) {
  productdescription_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcResponseSPDInfoFrame_t::productdescription() const {
  return productdescription_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcResponseSPDInfoFrame_t::mutable_productdescription() {
  return &productdescription_;
}

// optional uint32 sourceInformation = 3;
inline bool IpcResponseSPDInfoFrame_t::has_sourceinformation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcResponseSPDInfoFrame_t::set_has_sourceinformation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcResponseSPDInfoFrame_t::clear_has_sourceinformation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcResponseSPDInfoFrame_t::clear_sourceinformation() {
  sourceinformation_ = 0u;
  clear_has_sourceinformation();
}
inline ::google::protobuf::uint32 IpcResponseSPDInfoFrame_t::sourceinformation() const {
  return sourceinformation_;
}
inline void IpcResponseSPDInfoFrame_t::set_sourceinformation(::google::protobuf::uint32 value) {
  set_has_sourceinformation();
  sourceinformation_ = value;
}

// -------------------------------------------------------------------

// IpcSetDSPAudioMode_t

// optional int32 audioMode = 1;
inline bool IpcSetDSPAudioMode_t::has_audiomode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcSetDSPAudioMode_t::set_has_audiomode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcSetDSPAudioMode_t::clear_has_audiomode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcSetDSPAudioMode_t::clear_audiomode() {
  audiomode_ = 0;
  clear_has_audiomode();
}
inline ::google::protobuf::int32 IpcSetDSPAudioMode_t::audiomode() const {
  return audiomode_;
}
inline void IpcSetDSPAudioMode_t::set_audiomode(::google::protobuf::int32 value) {
  set_has_audiomode();
  audiomode_ = value;
}

// repeated uint32 ExtraSpace = 2;
inline int IpcSetDSPAudioMode_t::extraspace_size() const {
  return extraspace_.size();
}
inline void IpcSetDSPAudioMode_t::clear_extraspace() {
  extraspace_.Clear();
}
inline ::google::protobuf::uint32 IpcSetDSPAudioMode_t::extraspace(int index) const {
  return extraspace_.Get(index);
}
inline void IpcSetDSPAudioMode_t::set_extraspace(int index, ::google::protobuf::uint32 value) {
  extraspace_.Set(index, value);
}
inline void IpcSetDSPAudioMode_t::add_extraspace(::google::protobuf::uint32 value) {
  extraspace_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcSetDSPAudioMode_t::extraspace() const {
  return extraspace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcSetDSPAudioMode_t::mutable_extraspace() {
  return &extraspace_;
}

// -------------------------------------------------------------------

// IpcSetNewLangPayload_t

// optional uint32 language = 1;
inline bool IpcSetNewLangPayload_t::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcSetNewLangPayload_t::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcSetNewLangPayload_t::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcSetNewLangPayload_t::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 IpcSetNewLangPayload_t::language() const {
  return language_;
}
inline void IpcSetNewLangPayload_t::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
}

// optional uint32 reserved = 2;
inline bool IpcSetNewLangPayload_t::has_reserved() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcSetNewLangPayload_t::set_has_reserved() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcSetNewLangPayload_t::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcSetNewLangPayload_t::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 IpcSetNewLangPayload_t::reserved() const {
  return reserved_;
}
inline void IpcSetNewLangPayload_t::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
}

// -------------------------------------------------------------------

// IpcStHealthStatusPayload_t

// optional string swVersion = 1;
inline bool IpcStHealthStatusPayload_t::has_swversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcStHealthStatusPayload_t::set_has_swversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcStHealthStatusPayload_t::clear_has_swversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcStHealthStatusPayload_t::clear_swversion() {
  if (swversion_ != &::google::protobuf::internal::kEmptyString) {
    swversion_->clear();
  }
  clear_has_swversion();
}
inline const ::std::string& IpcStHealthStatusPayload_t::swversion() const {
  return *swversion_;
}
inline void IpcStHealthStatusPayload_t::set_swversion(const ::std::string& value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcStHealthStatusPayload_t::set_swversion(const char* value) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(value);
}
inline void IpcStHealthStatusPayload_t::set_swversion(const char* value, size_t size) {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  swversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcStHealthStatusPayload_t::mutable_swversion() {
  set_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    swversion_ = new ::std::string;
  }
  return swversion_;
}
inline ::std::string* IpcStHealthStatusPayload_t::release_swversion() {
  clear_has_swversion();
  if (swversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = swversion_;
    swversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IpcSystemTemperatureData_t

// optional uint32 reserved1 = 1;
inline bool IpcSystemTemperatureData_t::has_reserved1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcSystemTemperatureData_t::set_has_reserved1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcSystemTemperatureData_t::clear_has_reserved1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcSystemTemperatureData_t::clear_reserved1() {
  reserved1_ = 0u;
  clear_has_reserved1();
}
inline ::google::protobuf::uint32 IpcSystemTemperatureData_t::reserved1() const {
  return reserved1_;
}
inline void IpcSystemTemperatureData_t::set_reserved1(::google::protobuf::uint32 value) {
  set_has_reserved1();
  reserved1_ = value;
}

// optional uint32 numThermistorReadings = 2;
inline bool IpcSystemTemperatureData_t::has_numthermistorreadings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcSystemTemperatureData_t::set_has_numthermistorreadings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcSystemTemperatureData_t::clear_has_numthermistorreadings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcSystemTemperatureData_t::clear_numthermistorreadings() {
  numthermistorreadings_ = 0u;
  clear_has_numthermistorreadings();
}
inline ::google::protobuf::uint32 IpcSystemTemperatureData_t::numthermistorreadings() const {
  return numthermistorreadings_;
}
inline void IpcSystemTemperatureData_t::set_numthermistorreadings(::google::protobuf::uint32 value) {
  set_has_numthermistorreadings();
  numthermistorreadings_ = value;
}

// optional uint32 reserved2 = 3;
inline bool IpcSystemTemperatureData_t::has_reserved2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcSystemTemperatureData_t::set_has_reserved2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcSystemTemperatureData_t::clear_has_reserved2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcSystemTemperatureData_t::clear_reserved2() {
  reserved2_ = 0u;
  clear_has_reserved2();
}
inline ::google::protobuf::uint32 IpcSystemTemperatureData_t::reserved2() const {
  return reserved2_;
}
inline void IpcSystemTemperatureData_t::set_reserved2(::google::protobuf::uint32 value) {
  set_has_reserved2();
  reserved2_ = value;
}

// optional uint32 reserved3 = 4;
inline bool IpcSystemTemperatureData_t::has_reserved3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcSystemTemperatureData_t::set_has_reserved3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcSystemTemperatureData_t::clear_has_reserved3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcSystemTemperatureData_t::clear_reserved3() {
  reserved3_ = 0u;
  clear_has_reserved3();
}
inline ::google::protobuf::uint32 IpcSystemTemperatureData_t::reserved3() const {
  return reserved3_;
}
inline void IpcSystemTemperatureData_t::set_reserved3(::google::protobuf::uint32 value) {
  set_has_reserved3();
  reserved3_ = value;
}

// repeated .lpmservice.IpcThermistorData_t ThermistorData = 5;
inline int IpcSystemTemperatureData_t::thermistordata_size() const {
  return thermistordata_.size();
}
inline void IpcSystemTemperatureData_t::clear_thermistordata() {
  thermistordata_.Clear();
}
inline const ::lpmservice::IpcThermistorData_t& IpcSystemTemperatureData_t::thermistordata(int index) const {
  return thermistordata_.Get(index);
}
inline ::lpmservice::IpcThermistorData_t* IpcSystemTemperatureData_t::mutable_thermistordata(int index) {
  return thermistordata_.Mutable(index);
}
inline ::lpmservice::IpcThermistorData_t* IpcSystemTemperatureData_t::add_thermistordata() {
  return thermistordata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lpmservice::IpcThermistorData_t >&
IpcSystemTemperatureData_t::thermistordata() const {
  return thermistordata_;
}
inline ::google::protobuf::RepeatedPtrField< ::lpmservice::IpcThermistorData_t >*
IpcSystemTemperatureData_t::mutable_thermistordata() {
  return &thermistordata_;
}

// -------------------------------------------------------------------

// IpcThermistorData_t

// optional uint32 thermLocation = 1;
inline bool IpcThermistorData_t::has_thermlocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcThermistorData_t::set_has_thermlocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcThermistorData_t::clear_has_thermlocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcThermistorData_t::clear_thermlocation() {
  thermlocation_ = 0u;
  clear_has_thermlocation();
}
inline ::google::protobuf::uint32 IpcThermistorData_t::thermlocation() const {
  return thermlocation_;
}
inline void IpcThermistorData_t::set_thermlocation(::google::protobuf::uint32 value) {
  set_has_thermlocation();
  thermlocation_ = value;
}

// optional int32 tempDegC = 2;
inline bool IpcThermistorData_t::has_tempdegc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcThermistorData_t::set_has_tempdegc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcThermistorData_t::clear_has_tempdegc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcThermistorData_t::clear_tempdegc() {
  tempdegc_ = 0;
  clear_has_tempdegc();
}
inline ::google::protobuf::int32 IpcThermistorData_t::tempdegc() const {
  return tempdegc_;
}
inline void IpcThermistorData_t::set_tempdegc(::google::protobuf::int32 value) {
  set_has_tempdegc();
  tempdegc_ = value;
}

// -------------------------------------------------------------------

// IpcToneControl_t

// optional int32 bass = 1;
inline bool IpcToneControl_t::has_bass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcToneControl_t::set_has_bass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcToneControl_t::clear_has_bass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcToneControl_t::clear_bass() {
  bass_ = 0;
  clear_has_bass();
}
inline ::google::protobuf::int32 IpcToneControl_t::bass() const {
  return bass_;
}
inline void IpcToneControl_t::set_bass(::google::protobuf::int32 value) {
  set_has_bass();
  bass_ = value;
}

// optional int32 treble = 2;
inline bool IpcToneControl_t::has_treble() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpcToneControl_t::set_has_treble() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpcToneControl_t::clear_has_treble() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpcToneControl_t::clear_treble() {
  treble_ = 0;
  clear_has_treble();
}
inline ::google::protobuf::int32 IpcToneControl_t::treble() const {
  return treble_;
}
inline void IpcToneControl_t::set_treble(::google::protobuf::int32 value) {
  set_has_treble();
  treble_ = value;
}

// optional int32 centerSpeaker = 3;
inline bool IpcToneControl_t::has_centerspeaker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcToneControl_t::set_has_centerspeaker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcToneControl_t::clear_has_centerspeaker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcToneControl_t::clear_centerspeaker() {
  centerspeaker_ = 0;
  clear_has_centerspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::centerspeaker() const {
  return centerspeaker_;
}
inline void IpcToneControl_t::set_centerspeaker(::google::protobuf::int32 value) {
  set_has_centerspeaker();
  centerspeaker_ = value;
}

// optional int32 surroundSpeaker = 4;
inline bool IpcToneControl_t::has_surroundspeaker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcToneControl_t::set_has_surroundspeaker() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcToneControl_t::clear_has_surroundspeaker() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcToneControl_t::clear_surroundspeaker() {
  surroundspeaker_ = 0;
  clear_has_surroundspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::surroundspeaker() const {
  return surroundspeaker_;
}
inline void IpcToneControl_t::set_surroundspeaker(::google::protobuf::int32 value) {
  set_has_surroundspeaker();
  surroundspeaker_ = value;
}

// optional int32 minBass = 5;
inline bool IpcToneControl_t::has_minbass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcToneControl_t::set_has_minbass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcToneControl_t::clear_has_minbass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcToneControl_t::clear_minbass() {
  minbass_ = 0;
  clear_has_minbass();
}
inline ::google::protobuf::int32 IpcToneControl_t::minbass() const {
  return minbass_;
}
inline void IpcToneControl_t::set_minbass(::google::protobuf::int32 value) {
  set_has_minbass();
  minbass_ = value;
}

// optional int32 minTreble = 6;
inline bool IpcToneControl_t::has_mintreble() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpcToneControl_t::set_has_mintreble() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpcToneControl_t::clear_has_mintreble() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpcToneControl_t::clear_mintreble() {
  mintreble_ = 0;
  clear_has_mintreble();
}
inline ::google::protobuf::int32 IpcToneControl_t::mintreble() const {
  return mintreble_;
}
inline void IpcToneControl_t::set_mintreble(::google::protobuf::int32 value) {
  set_has_mintreble();
  mintreble_ = value;
}

// optional int32 minCenterSpeaker = 7;
inline bool IpcToneControl_t::has_mincenterspeaker() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpcToneControl_t::set_has_mincenterspeaker() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpcToneControl_t::clear_has_mincenterspeaker() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpcToneControl_t::clear_mincenterspeaker() {
  mincenterspeaker_ = 0;
  clear_has_mincenterspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::mincenterspeaker() const {
  return mincenterspeaker_;
}
inline void IpcToneControl_t::set_mincenterspeaker(::google::protobuf::int32 value) {
  set_has_mincenterspeaker();
  mincenterspeaker_ = value;
}

// optional int32 minSurroundSpeaker = 8;
inline bool IpcToneControl_t::has_minsurroundspeaker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpcToneControl_t::set_has_minsurroundspeaker() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpcToneControl_t::clear_has_minsurroundspeaker() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpcToneControl_t::clear_minsurroundspeaker() {
  minsurroundspeaker_ = 0;
  clear_has_minsurroundspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::minsurroundspeaker() const {
  return minsurroundspeaker_;
}
inline void IpcToneControl_t::set_minsurroundspeaker(::google::protobuf::int32 value) {
  set_has_minsurroundspeaker();
  minsurroundspeaker_ = value;
}

// optional int32 maxBass = 9;
inline bool IpcToneControl_t::has_maxbass() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpcToneControl_t::set_has_maxbass() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpcToneControl_t::clear_has_maxbass() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpcToneControl_t::clear_maxbass() {
  maxbass_ = 0;
  clear_has_maxbass();
}
inline ::google::protobuf::int32 IpcToneControl_t::maxbass() const {
  return maxbass_;
}
inline void IpcToneControl_t::set_maxbass(::google::protobuf::int32 value) {
  set_has_maxbass();
  maxbass_ = value;
}

// optional int32 maxTreble = 10;
inline bool IpcToneControl_t::has_maxtreble() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpcToneControl_t::set_has_maxtreble() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpcToneControl_t::clear_has_maxtreble() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpcToneControl_t::clear_maxtreble() {
  maxtreble_ = 0;
  clear_has_maxtreble();
}
inline ::google::protobuf::int32 IpcToneControl_t::maxtreble() const {
  return maxtreble_;
}
inline void IpcToneControl_t::set_maxtreble(::google::protobuf::int32 value) {
  set_has_maxtreble();
  maxtreble_ = value;
}

// optional int32 maxCenterSpeaker = 11;
inline bool IpcToneControl_t::has_maxcenterspeaker() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpcToneControl_t::set_has_maxcenterspeaker() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpcToneControl_t::clear_has_maxcenterspeaker() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpcToneControl_t::clear_maxcenterspeaker() {
  maxcenterspeaker_ = 0;
  clear_has_maxcenterspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::maxcenterspeaker() const {
  return maxcenterspeaker_;
}
inline void IpcToneControl_t::set_maxcenterspeaker(::google::protobuf::int32 value) {
  set_has_maxcenterspeaker();
  maxcenterspeaker_ = value;
}

// optional int32 maxSurroundSpeaker = 12;
inline bool IpcToneControl_t::has_maxsurroundspeaker() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpcToneControl_t::set_has_maxsurroundspeaker() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpcToneControl_t::clear_has_maxsurroundspeaker() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpcToneControl_t::clear_maxsurroundspeaker() {
  maxsurroundspeaker_ = 0;
  clear_has_maxsurroundspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::maxsurroundspeaker() const {
  return maxsurroundspeaker_;
}
inline void IpcToneControl_t::set_maxsurroundspeaker(::google::protobuf::int32 value) {
  set_has_maxsurroundspeaker();
  maxsurroundspeaker_ = value;
}

// optional int32 stepBass = 13;
inline bool IpcToneControl_t::has_stepbass() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IpcToneControl_t::set_has_stepbass() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IpcToneControl_t::clear_has_stepbass() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IpcToneControl_t::clear_stepbass() {
  stepbass_ = 0;
  clear_has_stepbass();
}
inline ::google::protobuf::int32 IpcToneControl_t::stepbass() const {
  return stepbass_;
}
inline void IpcToneControl_t::set_stepbass(::google::protobuf::int32 value) {
  set_has_stepbass();
  stepbass_ = value;
}

// optional int32 stepTreble = 14;
inline bool IpcToneControl_t::has_steptreble() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IpcToneControl_t::set_has_steptreble() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IpcToneControl_t::clear_has_steptreble() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IpcToneControl_t::clear_steptreble() {
  steptreble_ = 0;
  clear_has_steptreble();
}
inline ::google::protobuf::int32 IpcToneControl_t::steptreble() const {
  return steptreble_;
}
inline void IpcToneControl_t::set_steptreble(::google::protobuf::int32 value) {
  set_has_steptreble();
  steptreble_ = value;
}

// optional int32 stepCenterSpeaker = 15;
inline bool IpcToneControl_t::has_stepcenterspeaker() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IpcToneControl_t::set_has_stepcenterspeaker() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IpcToneControl_t::clear_has_stepcenterspeaker() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IpcToneControl_t::clear_stepcenterspeaker() {
  stepcenterspeaker_ = 0;
  clear_has_stepcenterspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::stepcenterspeaker() const {
  return stepcenterspeaker_;
}
inline void IpcToneControl_t::set_stepcenterspeaker(::google::protobuf::int32 value) {
  set_has_stepcenterspeaker();
  stepcenterspeaker_ = value;
}

// optional int32 stepSurroundSpeaker = 16;
inline bool IpcToneControl_t::has_stepsurroundspeaker() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IpcToneControl_t::set_has_stepsurroundspeaker() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IpcToneControl_t::clear_has_stepsurroundspeaker() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IpcToneControl_t::clear_stepsurroundspeaker() {
  stepsurroundspeaker_ = 0;
  clear_has_stepsurroundspeaker();
}
inline ::google::protobuf::int32 IpcToneControl_t::stepsurroundspeaker() const {
  return stepsurroundspeaker_;
}
inline void IpcToneControl_t::set_stepsurroundspeaker(::google::protobuf::int32 value) {
  set_has_stepsurroundspeaker();
  stepsurroundspeaker_ = value;
}

// -------------------------------------------------------------------

// IpcVersionResponse_t

// optional uint32 type = 1;
inline bool IpcVersionResponse_t::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpcVersionResponse_t::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpcVersionResponse_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpcVersionResponse_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IpcVersionResponse_t::type() const {
  return type_;
}
inline void IpcVersionResponse_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint32 unused = 2;
inline int IpcVersionResponse_t::unused_size() const {
  return unused_.size();
}
inline void IpcVersionResponse_t::clear_unused() {
  unused_.Clear();
}
inline ::google::protobuf::uint32 IpcVersionResponse_t::unused(int index) const {
  return unused_.Get(index);
}
inline void IpcVersionResponse_t::set_unused(int index, ::google::protobuf::uint32 value) {
  unused_.Set(index, value);
}
inline void IpcVersionResponse_t::add_unused(::google::protobuf::uint32 value) {
  unused_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IpcVersionResponse_t::unused() const {
  return unused_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IpcVersionResponse_t::mutable_unused() {
  return &unused_;
}

// optional string vers1 = 3;
inline bool IpcVersionResponse_t::has_vers1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpcVersionResponse_t::set_has_vers1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpcVersionResponse_t::clear_has_vers1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpcVersionResponse_t::clear_vers1() {
  if (vers1_ != &::google::protobuf::internal::kEmptyString) {
    vers1_->clear();
  }
  clear_has_vers1();
}
inline const ::std::string& IpcVersionResponse_t::vers1() const {
  return *vers1_;
}
inline void IpcVersionResponse_t::set_vers1(const ::std::string& value) {
  set_has_vers1();
  if (vers1_ == &::google::protobuf::internal::kEmptyString) {
    vers1_ = new ::std::string;
  }
  vers1_->assign(value);
}
inline void IpcVersionResponse_t::set_vers1(const char* value) {
  set_has_vers1();
  if (vers1_ == &::google::protobuf::internal::kEmptyString) {
    vers1_ = new ::std::string;
  }
  vers1_->assign(value);
}
inline void IpcVersionResponse_t::set_vers1(const char* value, size_t size) {
  set_has_vers1();
  if (vers1_ == &::google::protobuf::internal::kEmptyString) {
    vers1_ = new ::std::string;
  }
  vers1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcVersionResponse_t::mutable_vers1() {
  set_has_vers1();
  if (vers1_ == &::google::protobuf::internal::kEmptyString) {
    vers1_ = new ::std::string;
  }
  return vers1_;
}
inline ::std::string* IpcVersionResponse_t::release_vers1() {
  clear_has_vers1();
  if (vers1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vers1_;
    vers1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string vers2 = 4;
inline bool IpcVersionResponse_t::has_vers2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpcVersionResponse_t::set_has_vers2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpcVersionResponse_t::clear_has_vers2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpcVersionResponse_t::clear_vers2() {
  if (vers2_ != &::google::protobuf::internal::kEmptyString) {
    vers2_->clear();
  }
  clear_has_vers2();
}
inline const ::std::string& IpcVersionResponse_t::vers2() const {
  return *vers2_;
}
inline void IpcVersionResponse_t::set_vers2(const ::std::string& value) {
  set_has_vers2();
  if (vers2_ == &::google::protobuf::internal::kEmptyString) {
    vers2_ = new ::std::string;
  }
  vers2_->assign(value);
}
inline void IpcVersionResponse_t::set_vers2(const char* value) {
  set_has_vers2();
  if (vers2_ == &::google::protobuf::internal::kEmptyString) {
    vers2_ = new ::std::string;
  }
  vers2_->assign(value);
}
inline void IpcVersionResponse_t::set_vers2(const char* value, size_t size) {
  set_has_vers2();
  if (vers2_ == &::google::protobuf::internal::kEmptyString) {
    vers2_ = new ::std::string;
  }
  vers2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcVersionResponse_t::mutable_vers2() {
  set_has_vers2();
  if (vers2_ == &::google::protobuf::internal::kEmptyString) {
    vers2_ = new ::std::string;
  }
  return vers2_;
}
inline ::std::string* IpcVersionResponse_t::release_vers2() {
  clear_has_vers2();
  if (vers2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vers2_;
    vers2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string vers3 = 5;
inline bool IpcVersionResponse_t::has_vers3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpcVersionResponse_t::set_has_vers3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpcVersionResponse_t::clear_has_vers3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpcVersionResponse_t::clear_vers3() {
  if (vers3_ != &::google::protobuf::internal::kEmptyString) {
    vers3_->clear();
  }
  clear_has_vers3();
}
inline const ::std::string& IpcVersionResponse_t::vers3() const {
  return *vers3_;
}
inline void IpcVersionResponse_t::set_vers3(const ::std::string& value) {
  set_has_vers3();
  if (vers3_ == &::google::protobuf::internal::kEmptyString) {
    vers3_ = new ::std::string;
  }
  vers3_->assign(value);
}
inline void IpcVersionResponse_t::set_vers3(const char* value) {
  set_has_vers3();
  if (vers3_ == &::google::protobuf::internal::kEmptyString) {
    vers3_ = new ::std::string;
  }
  vers3_->assign(value);
}
inline void IpcVersionResponse_t::set_vers3(const char* value, size_t size) {
  set_has_vers3();
  if (vers3_ == &::google::protobuf::internal::kEmptyString) {
    vers3_ = new ::std::string;
  }
  vers3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpcVersionResponse_t::mutable_vers3() {
  set_has_vers3();
  if (vers3_ == &::google::protobuf::internal::kEmptyString) {
    vers3_ = new ::std::string;
  }
  return vers3_;
}
inline ::std::string* IpcVersionResponse_t::release_vers3() {
  clear_has_vers3();
  if (vers3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vers3_;
    vers3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Ipc_TimeoutControl_t

// optional .lpmservice.Ipc_TimeoutCommand_t cmd = 1;
inline bool Ipc_TimeoutControl_t::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ipc_TimeoutControl_t::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ipc_TimeoutControl_t::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ipc_TimeoutControl_t::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline lpmservice::Ipc_TimeoutCommand_t Ipc_TimeoutControl_t::cmd() const {
  return static_cast< lpmservice::Ipc_TimeoutCommand_t >(cmd_);
}
inline void Ipc_TimeoutControl_t::set_cmd(lpmservice::Ipc_TimeoutCommand_t value) {
  GOOGLE_DCHECK(lpmservice::Ipc_TimeoutCommand_t_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 enable = 2;
inline bool Ipc_TimeoutControl_t::has_enable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ipc_TimeoutControl_t::set_has_enable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ipc_TimeoutControl_t::clear_has_enable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ipc_TimeoutControl_t::clear_enable() {
  enable_ = 0u;
  clear_has_enable();
}
inline ::google::protobuf::uint32 Ipc_TimeoutControl_t::enable() const {
  return enable_;
}
inline void Ipc_TimeoutControl_t::set_enable(::google::protobuf::uint32 value) {
  set_has_enable();
  enable_ = value;
}

// optional uint32 timeout_min = 3;
inline bool Ipc_TimeoutControl_t::has_timeout_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ipc_TimeoutControl_t::set_has_timeout_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ipc_TimeoutControl_t::clear_has_timeout_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ipc_TimeoutControl_t::clear_timeout_min() {
  timeout_min_ = 0u;
  clear_has_timeout_min();
}
inline ::google::protobuf::uint32 Ipc_TimeoutControl_t::timeout_min() const {
  return timeout_min_;
}
inline void Ipc_TimeoutControl_t::set_timeout_min(::google::protobuf::uint32 value) {
  set_has_timeout_min();
  timeout_min_ = value;
}

// optional .lpmservice.A4V_IPC_SOURCE_ID source = 4;
inline bool Ipc_TimeoutControl_t::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ipc_TimeoutControl_t::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ipc_TimeoutControl_t::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ipc_TimeoutControl_t::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline lpmservice::A4V_IPC_SOURCE_ID Ipc_TimeoutControl_t::source() const {
  return static_cast< lpmservice::A4V_IPC_SOURCE_ID >(source_);
}
inline void Ipc_TimeoutControl_t::set_source(lpmservice::A4V_IPC_SOURCE_ID value) {
  GOOGLE_DCHECK(lpmservice::A4V_IPC_SOURCE_ID_IsValid(value));
  set_has_source();
  source_ = value;
}

// -------------------------------------------------------------------

// IPCSourceListMessage

// optional uint32 numSources = 1;
inline bool IPCSourceListMessage::has_numsources() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCSourceListMessage::set_has_numsources() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCSourceListMessage::clear_has_numsources() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCSourceListMessage::clear_numsources() {
  numsources_ = 0u;
  clear_has_numsources();
}
inline ::google::protobuf::uint32 IPCSourceListMessage::numsources() const {
  return numsources_;
}
inline void IPCSourceListMessage::set_numsources(::google::protobuf::uint32 value) {
  set_has_numsources();
  numsources_ = value;
}

// optional .lpmservice.IPCSourceStruct sourceListItems = 2;
inline bool IPCSourceListMessage::has_sourcelistitems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCSourceListMessage::set_has_sourcelistitems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCSourceListMessage::clear_has_sourcelistitems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCSourceListMessage::clear_sourcelistitems() {
  if (sourcelistitems_ != NULL) sourcelistitems_->::lpmservice::IPCSourceStruct::Clear();
  clear_has_sourcelistitems();
}
inline const ::lpmservice::IPCSourceStruct& IPCSourceListMessage::sourcelistitems() const {
  return sourcelistitems_ != NULL ? *sourcelistitems_ : *default_instance_->sourcelistitems_;
}
inline ::lpmservice::IPCSourceStruct* IPCSourceListMessage::mutable_sourcelistitems() {
  set_has_sourcelistitems();
  if (sourcelistitems_ == NULL) sourcelistitems_ = new ::lpmservice::IPCSourceStruct;
  return sourcelistitems_;
}
inline ::lpmservice::IPCSourceStruct* IPCSourceListMessage::release_sourcelistitems() {
  clear_has_sourcelistitems();
  ::lpmservice::IPCSourceStruct* temp = sourcelistitems_;
  sourcelistitems_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// IPCSourceStruct

// optional .lpmservice.A4V_IPC_SOURCE_ID sourceID = 1;
inline bool IPCSourceStruct::has_sourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCSourceStruct::set_has_sourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCSourceStruct::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCSourceStruct::clear_sourceid() {
  sourceid_ = 0;
  clear_has_sourceid();
}
inline lpmservice::A4V_IPC_SOURCE_ID IPCSourceStruct::sourceid() const {
  return static_cast< lpmservice::A4V_IPC_SOURCE_ID >(sourceid_);
}
inline void IPCSourceStruct::set_sourceid(lpmservice::A4V_IPC_SOURCE_ID value) {
  GOOGLE_DCHECK(lpmservice::A4V_IPC_SOURCE_ID_IsValid(value));
  set_has_sourceid();
  sourceid_ = value;
}

// optional string ueiKeyRecord = 2;
inline bool IPCSourceStruct::has_ueikeyrecord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCSourceStruct::set_has_ueikeyrecord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCSourceStruct::clear_has_ueikeyrecord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCSourceStruct::clear_ueikeyrecord() {
  if (ueikeyrecord_ != &::google::protobuf::internal::kEmptyString) {
    ueikeyrecord_->clear();
  }
  clear_has_ueikeyrecord();
}
inline const ::std::string& IPCSourceStruct::ueikeyrecord() const {
  return *ueikeyrecord_;
}
inline void IPCSourceStruct::set_ueikeyrecord(const ::std::string& value) {
  set_has_ueikeyrecord();
  if (ueikeyrecord_ == &::google::protobuf::internal::kEmptyString) {
    ueikeyrecord_ = new ::std::string;
  }
  ueikeyrecord_->assign(value);
}
inline void IPCSourceStruct::set_ueikeyrecord(const char* value) {
  set_has_ueikeyrecord();
  if (ueikeyrecord_ == &::google::protobuf::internal::kEmptyString) {
    ueikeyrecord_ = new ::std::string;
  }
  ueikeyrecord_->assign(value);
}
inline void IPCSourceStruct::set_ueikeyrecord(const char* value, size_t size) {
  set_has_ueikeyrecord();
  if (ueikeyrecord_ == &::google::protobuf::internal::kEmptyString) {
    ueikeyrecord_ = new ::std::string;
  }
  ueikeyrecord_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCSourceStruct::mutable_ueikeyrecord() {
  set_has_ueikeyrecord();
  if (ueikeyrecord_ == &::google::protobuf::internal::kEmptyString) {
    ueikeyrecord_ = new ::std::string;
  }
  return ueikeyrecord_;
}
inline ::std::string* IPCSourceStruct::release_ueikeyrecord() {
  clear_has_ueikeyrecord();
  if (ueikeyrecord_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ueikeyrecord_;
    ueikeyrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 sourceType = 3;
inline bool IPCSourceStruct::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPCSourceStruct::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPCSourceStruct::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPCSourceStruct::clear_sourcetype() {
  sourcetype_ = 0u;
  clear_has_sourcetype();
}
inline ::google::protobuf::uint32 IPCSourceStruct::sourcetype() const {
  return sourcetype_;
}
inline void IPCSourceStruct::set_sourcetype(::google::protobuf::uint32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
}

// optional uint32 sourceTypeSeqNum = 4;
inline bool IPCSourceStruct::has_sourcetypeseqnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IPCSourceStruct::set_has_sourcetypeseqnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IPCSourceStruct::clear_has_sourcetypeseqnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IPCSourceStruct::clear_sourcetypeseqnum() {
  sourcetypeseqnum_ = 0u;
  clear_has_sourcetypeseqnum();
}
inline ::google::protobuf::uint32 IPCSourceStruct::sourcetypeseqnum() const {
  return sourcetypeseqnum_;
}
inline void IPCSourceStruct::set_sourcetypeseqnum(::google::protobuf::uint32 value) {
  set_has_sourcetypeseqnum();
  sourcetypeseqnum_ = value;
}

// optional uint32 contentType = 5;
inline bool IPCSourceStruct::has_contenttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IPCSourceStruct::set_has_contenttype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IPCSourceStruct::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IPCSourceStruct::clear_contenttype() {
  contenttype_ = 0u;
  clear_has_contenttype();
}
inline ::google::protobuf::uint32 IPCSourceStruct::contenttype() const {
  return contenttype_;
}
inline void IPCSourceStruct::set_contenttype(::google::protobuf::uint32 value) {
  set_has_contenttype();
  contenttype_ = value;
}

// optional uint32 AVSyncDelay = 6;
inline bool IPCSourceStruct::has_avsyncdelay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IPCSourceStruct::set_has_avsyncdelay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IPCSourceStruct::clear_has_avsyncdelay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IPCSourceStruct::clear_avsyncdelay() {
  avsyncdelay_ = 0u;
  clear_has_avsyncdelay();
}
inline ::google::protobuf::uint32 IPCSourceStruct::avsyncdelay() const {
  return avsyncdelay_;
}
inline void IPCSourceStruct::set_avsyncdelay(::google::protobuf::uint32 value) {
  set_has_avsyncdelay();
  avsyncdelay_ = value;
}

// optional uint32 bassLevel = 7;
inline bool IPCSourceStruct::has_basslevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IPCSourceStruct::set_has_basslevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IPCSourceStruct::clear_has_basslevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IPCSourceStruct::clear_basslevel() {
  basslevel_ = 0u;
  clear_has_basslevel();
}
inline ::google::protobuf::uint32 IPCSourceStruct::basslevel() const {
  return basslevel_;
}
inline void IPCSourceStruct::set_basslevel(::google::protobuf::uint32 value) {
  set_has_basslevel();
  basslevel_ = value;
}

// optional uint32 trebleLevel = 8;
inline bool IPCSourceStruct::has_treblelevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IPCSourceStruct::set_has_treblelevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IPCSourceStruct::clear_has_treblelevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IPCSourceStruct::clear_treblelevel() {
  treblelevel_ = 0u;
  clear_has_treblelevel();
}
inline ::google::protobuf::uint32 IPCSourceStruct::treblelevel() const {
  return treblelevel_;
}
inline void IPCSourceStruct::set_treblelevel(::google::protobuf::uint32 value) {
  set_has_treblelevel();
  treblelevel_ = value;
}

// optional uint32 audioMode = 9;
inline bool IPCSourceStruct::has_audiomode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IPCSourceStruct::set_has_audiomode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IPCSourceStruct::clear_has_audiomode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IPCSourceStruct::clear_audiomode() {
  audiomode_ = 0u;
  clear_has_audiomode();
}
inline ::google::protobuf::uint32 IPCSourceStruct::audiomode() const {
  return audiomode_;
}
inline void IPCSourceStruct::set_audiomode(::google::protobuf::uint32 value) {
  set_has_audiomode();
  audiomode_ = value;
}

// optional bool displayInList = 10;
inline bool IPCSourceStruct::has_displayinlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IPCSourceStruct::set_has_displayinlist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IPCSourceStruct::clear_has_displayinlist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IPCSourceStruct::clear_displayinlist() {
  displayinlist_ = false;
  clear_has_displayinlist();
}
inline bool IPCSourceStruct::displayinlist() const {
  return displayinlist_;
}
inline void IPCSourceStruct::set_displayinlist(bool value) {
  set_has_displayinlist();
  displayinlist_ = value;
}

// optional uint32 audioInput = 11;
inline bool IPCSourceStruct::has_audioinput() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IPCSourceStruct::set_has_audioinput() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IPCSourceStruct::clear_has_audioinput() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IPCSourceStruct::clear_audioinput() {
  audioinput_ = 0u;
  clear_has_audioinput();
}
inline ::google::protobuf::uint32 IPCSourceStruct::audioinput() const {
  return audioinput_;
}
inline void IPCSourceStruct::set_audioinput(::google::protobuf::uint32 value) {
  set_has_audioinput();
  audioinput_ = value;
}

// optional uint32 audioTrack = 12;
inline bool IPCSourceStruct::has_audiotrack() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IPCSourceStruct::set_has_audiotrack() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IPCSourceStruct::clear_has_audiotrack() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IPCSourceStruct::clear_audiotrack() {
  audiotrack_ = 0u;
  clear_has_audiotrack();
}
inline ::google::protobuf::uint32 IPCSourceStruct::audiotrack() const {
  return audiotrack_;
}
inline void IPCSourceStruct::set_audiotrack(::google::protobuf::uint32 value) {
  set_has_audiotrack();
  audiotrack_ = value;
}

// optional string reserved = 13;
inline bool IPCSourceStruct::has_reserved() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IPCSourceStruct::set_has_reserved() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IPCSourceStruct::clear_has_reserved() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IPCSourceStruct::clear_reserved() {
  if (reserved_ != &::google::protobuf::internal::kEmptyString) {
    reserved_->clear();
  }
  clear_has_reserved();
}
inline const ::std::string& IPCSourceStruct::reserved() const {
  return *reserved_;
}
inline void IPCSourceStruct::set_reserved(const ::std::string& value) {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  reserved_->assign(value);
}
inline void IPCSourceStruct::set_reserved(const char* value) {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  reserved_->assign(value);
}
inline void IPCSourceStruct::set_reserved(const char* value, size_t size) {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  reserved_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCSourceStruct::mutable_reserved() {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  return reserved_;
}
inline ::std::string* IPCSourceStruct::release_reserved() {
  clear_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reserved_;
    reserved_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IPCSource_t

// optional .lpmservice.A4V_IPC_SOURCE_ID source = 1;
inline bool IPCSource_t::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCSource_t::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCSource_t::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCSource_t::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline lpmservice::A4V_IPC_SOURCE_ID IPCSource_t::source() const {
  return static_cast< lpmservice::A4V_IPC_SOURCE_ID >(source_);
}
inline void IPCSource_t::set_source(lpmservice::A4V_IPC_SOURCE_ID value) {
  GOOGLE_DCHECK(lpmservice::A4V_IPC_SOURCE_ID_IsValid(value));
  set_has_source();
  source_ = value;
}

// optional uint32 open_field = 2;
inline bool IPCSource_t::has_open_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCSource_t::set_has_open_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCSource_t::clear_has_open_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCSource_t::clear_open_field() {
  open_field_ = 0u;
  clear_has_open_field();
}
inline ::google::protobuf::uint32 IPCSource_t::open_field() const {
  return open_field_;
}
inline void IPCSource_t::set_open_field(::google::protobuf::uint32 value) {
  set_has_open_field();
  open_field_ = value;
}

// optional uint32 status = 3;
inline bool IPCSource_t::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPCSource_t::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPCSource_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPCSource_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 IPCSource_t::status() const {
  return status_;
}
inline void IPCSource_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// RfRemoteHealthStatus_t

// optional .lpmservice.RemoteImage_t image = 1;
inline bool RfRemoteHealthStatus_t::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RfRemoteHealthStatus_t::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RfRemoteHealthStatus_t::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RfRemoteHealthStatus_t::clear_image() {
  image_ = 0;
  clear_has_image();
}
inline lpmservice::RemoteImage_t RfRemoteHealthStatus_t::image() const {
  return static_cast< lpmservice::RemoteImage_t >(image_);
}
inline void RfRemoteHealthStatus_t::set_image(lpmservice::RemoteImage_t value) {
  GOOGLE_DCHECK(lpmservice::RemoteImage_t_IsValid(value));
  set_has_image();
  image_ = value;
}

// optional string rmtSwVersion = 2;
inline bool RfRemoteHealthStatus_t::has_rmtswversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RfRemoteHealthStatus_t::set_has_rmtswversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RfRemoteHealthStatus_t::clear_has_rmtswversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RfRemoteHealthStatus_t::clear_rmtswversion() {
  if (rmtswversion_ != &::google::protobuf::internal::kEmptyString) {
    rmtswversion_->clear();
  }
  clear_has_rmtswversion();
}
inline const ::std::string& RfRemoteHealthStatus_t::rmtswversion() const {
  return *rmtswversion_;
}
inline void RfRemoteHealthStatus_t::set_rmtswversion(const ::std::string& value) {
  set_has_rmtswversion();
  if (rmtswversion_ == &::google::protobuf::internal::kEmptyString) {
    rmtswversion_ = new ::std::string;
  }
  rmtswversion_->assign(value);
}
inline void RfRemoteHealthStatus_t::set_rmtswversion(const char* value) {
  set_has_rmtswversion();
  if (rmtswversion_ == &::google::protobuf::internal::kEmptyString) {
    rmtswversion_ = new ::std::string;
  }
  rmtswversion_->assign(value);
}
inline void RfRemoteHealthStatus_t::set_rmtswversion(const char* value, size_t size) {
  set_has_rmtswversion();
  if (rmtswversion_ == &::google::protobuf::internal::kEmptyString) {
    rmtswversion_ = new ::std::string;
  }
  rmtswversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RfRemoteHealthStatus_t::mutable_rmtswversion() {
  set_has_rmtswversion();
  if (rmtswversion_ == &::google::protobuf::internal::kEmptyString) {
    rmtswversion_ = new ::std::string;
  }
  return rmtswversion_;
}
inline ::std::string* RfRemoteHealthStatus_t::release_rmtswversion() {
  clear_has_rmtswversion();
  if (rmtswversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rmtswversion_;
    rmtswversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .lpmservice.PairingMode_t pairimgMode = 3;
inline bool RfRemoteHealthStatus_t::has_pairimgmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RfRemoteHealthStatus_t::set_has_pairimgmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RfRemoteHealthStatus_t::clear_has_pairimgmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RfRemoteHealthStatus_t::clear_pairimgmode() {
  pairimgmode_ = 0;
  clear_has_pairimgmode();
}
inline lpmservice::PairingMode_t RfRemoteHealthStatus_t::pairimgmode() const {
  return static_cast< lpmservice::PairingMode_t >(pairimgmode_);
}
inline void RfRemoteHealthStatus_t::set_pairimgmode(lpmservice::PairingMode_t value) {
  GOOGLE_DCHECK(lpmservice::PairingMode_t_IsValid(value));
  set_has_pairimgmode();
  pairimgmode_ = value;
}

// optional .lpmservice.PairingStatus_t pairingStatus = 4;
inline bool RfRemoteHealthStatus_t::has_pairingstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RfRemoteHealthStatus_t::set_has_pairingstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RfRemoteHealthStatus_t::clear_has_pairingstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RfRemoteHealthStatus_t::clear_pairingstatus() {
  pairingstatus_ = 0;
  clear_has_pairingstatus();
}
inline lpmservice::PairingStatus_t RfRemoteHealthStatus_t::pairingstatus() const {
  return static_cast< lpmservice::PairingStatus_t >(pairingstatus_);
}
inline void RfRemoteHealthStatus_t::set_pairingstatus(lpmservice::PairingStatus_t value) {
  GOOGLE_DCHECK(lpmservice::PairingStatus_t_IsValid(value));
  set_has_pairingstatus();
  pairingstatus_ = value;
}

// optional uint32 batteryStatus = 5;
inline bool RfRemoteHealthStatus_t::has_batterystatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RfRemoteHealthStatus_t::set_has_batterystatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RfRemoteHealthStatus_t::clear_has_batterystatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RfRemoteHealthStatus_t::clear_batterystatus() {
  batterystatus_ = 0u;
  clear_has_batterystatus();
}
inline ::google::protobuf::uint32 RfRemoteHealthStatus_t::batterystatus() const {
  return batterystatus_;
}
inline void RfRemoteHealthStatus_t::set_batterystatus(::google::protobuf::uint32 value) {
  set_has_batterystatus();
  batterystatus_ = value;
}

// optional uint32 remoteAddress = 6;
inline bool RfRemoteHealthStatus_t::has_remoteaddress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RfRemoteHealthStatus_t::set_has_remoteaddress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RfRemoteHealthStatus_t::clear_has_remoteaddress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RfRemoteHealthStatus_t::clear_remoteaddress() {
  remoteaddress_ = 0u;
  clear_has_remoteaddress();
}
inline ::google::protobuf::uint32 RfRemoteHealthStatus_t::remoteaddress() const {
  return remoteaddress_;
}
inline void RfRemoteHealthStatus_t::set_remoteaddress(::google::protobuf::uint32 value) {
  set_has_remoteaddress();
  remoteaddress_ = value;
}

// -------------------------------------------------------------------

// UpdateEnter_t

// optional uint32 mode = 1;
inline bool UpdateEnter_t::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateEnter_t::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateEnter_t::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateEnter_t::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 UpdateEnter_t::mode() const {
  return mode_;
}
inline void UpdateEnter_t::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// UpdateIncProg_t

// optional uint32 segment = 1;
inline bool UpdateIncProg_t::has_segment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateIncProg_t::set_has_segment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateIncProg_t::clear_has_segment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateIncProg_t::clear_segment() {
  segment_ = 0u;
  clear_has_segment();
}
inline ::google::protobuf::uint32 UpdateIncProg_t::segment() const {
  return segment_;
}
inline void UpdateIncProg_t::set_segment(::google::protobuf::uint32 value) {
  set_has_segment();
  segment_ = value;
}

// optional uint32 totalSegments = 2;
inline bool UpdateIncProg_t::has_totalsegments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateIncProg_t::set_has_totalsegments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateIncProg_t::clear_has_totalsegments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateIncProg_t::clear_totalsegments() {
  totalsegments_ = 0u;
  clear_has_totalsegments();
}
inline ::google::protobuf::uint32 UpdateIncProg_t::totalsegments() const {
  return totalsegments_;
}
inline void UpdateIncProg_t::set_totalsegments(::google::protobuf::uint32 value) {
  set_has_totalsegments();
  totalsegments_ = value;
}

// optional uint32 percentComplete = 3;
inline bool UpdateIncProg_t::has_percentcomplete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateIncProg_t::set_has_percentcomplete() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateIncProg_t::clear_has_percentcomplete() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateIncProg_t::clear_percentcomplete() {
  percentcomplete_ = 0u;
  clear_has_percentcomplete();
}
inline ::google::protobuf::uint32 UpdateIncProg_t::percentcomplete() const {
  return percentcomplete_;
}
inline void UpdateIncProg_t::set_percentcomplete(::google::protobuf::uint32 value) {
  set_has_percentcomplete();
  percentcomplete_ = value;
}

// -------------------------------------------------------------------

// UpdateStatus_t

// optional uint32 status = 1;
inline bool UpdateStatus_t::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStatus_t::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateStatus_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateStatus_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 UpdateStatus_t::status() const {
  return status_;
}
inline void UpdateStatus_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// UpdateUnifiedProg_t

// optional uint32 percentComplete = 1;
inline bool UpdateUnifiedProg_t::has_percentcomplete() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateUnifiedProg_t::set_has_percentcomplete() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateUnifiedProg_t::clear_has_percentcomplete() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateUnifiedProg_t::clear_percentcomplete() {
  percentcomplete_ = 0u;
  clear_has_percentcomplete();
}
inline ::google::protobuf::uint32 UpdateUnifiedProg_t::percentcomplete() const {
  return percentcomplete_;
}
inline void UpdateUnifiedProg_t::set_percentcomplete(::google::protobuf::uint32 value) {
  set_has_percentcomplete();
  percentcomplete_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lpmservice

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::Ipc_Device_t>() {
  return lpmservice::Ipc_Device_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcOpcodes_t>() {
  return lpmservice::IpcOpcodes_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcTapPassthrough_t>() {
  return lpmservice::IpcTapPassthrough_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcOpCompleteID_t>() {
  return lpmservice::IpcOpCompleteID_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcCompleteStatus_t>() {
  return lpmservice::IpcCompleteStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::COUNTRY_VARIANT>() {
  return lpmservice::COUNTRY_VARIANT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::REGION_VARIANT>() {
  return lpmservice::REGION_VARIANT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::SYSTEM_COLOR>() {
  return lpmservice::SYSTEM_COLOR_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::NominalSampleRate_t>() {
  return lpmservice::NominalSampleRate_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::InputAudioFormat_t>() {
  return lpmservice::InputAudioFormat_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::RemoteImage_t>() {
  return lpmservice::RemoteImage_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::PairingMode_t>() {
  return lpmservice::PairingMode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::PairingStatus_t>() {
  return lpmservice::PairingStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::ASOCImage_t>() {
  return lpmservice::ASOCImage_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::ASOCMode_t>() {
  return lpmservice::ASOCMode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::StatusRequest_t>() {
  return lpmservice::StatusRequest_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::LPMImage_t>() {
  return lpmservice::LPMImage_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcPowerState_t>() {
  return lpmservice::IpcPowerState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcLPMPowerState_t>() {
  return lpmservice::IpcLPMPowerState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcMuteState_t>() {
  return lpmservice::IpcMuteState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcEnergyPresent_t>() {
  return lpmservice::IpcEnergyPresent_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAiqCompletion_t>() {
  return lpmservice::IpcAiqCompletion_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAiqInstalled_t>() {
  return lpmservice::IpcAiqInstalled_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::DSPImage_t>() {
  return lpmservice::DSPImage_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcThermistorLocation_t>() {
  return lpmservice::IpcThermistorLocation_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcBulkFileTypes_t>() {
  return lpmservice::IpcBulkFileTypes_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcBulkResponse_t>() {
  return lpmservice::IpcBulkResponse_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcBulkStatus_t>() {
  return lpmservice::IpcBulkStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcBulkResult_t>() {
  return lpmservice::IpcBulkResult_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcUpdateStatus_t>() {
  return lpmservice::IpcUpdateStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::RemoteCmd_t>() {
  return lpmservice::RemoteCmd_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::PairingModeOpcode_t>() {
  return lpmservice::PairingModeOpcode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::A4V_IPC_SOURCE_ID>() {
  return lpmservice::A4V_IPC_SOURCE_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IPCSourceAckStatus_t>() {
  return lpmservice::IPCSourceAckStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::A4V_IPCSrcType_t>() {
  return lpmservice::A4V_IPCSrcType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::A4V_IPCContent_t>() {
  return lpmservice::A4V_IPCContent_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IPCAudioInputSelection_t>() {
  return lpmservice::IPCAudioInputSelection_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAiqCurveSelect_t>() {
  return lpmservice::IpcAiqCurveSelect_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAmpFaultState_t>() {
  return lpmservice::IpcAmpFaultState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcDualMonoMode_t>() {
  return lpmservice::IpcDualMonoMode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcFrontConnectorMode_t>() {
  return lpmservice::IpcFrontConnectorMode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcDSPMuteProfile_t>() {
  return lpmservice::IpcDSPMuteProfile_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAudioMode_t>() {
  return lpmservice::IpcAudioMode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcSpeakerPackage_t>() {
  return lpmservice::IpcSpeakerPackage_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAccessoryFlags_t>() {
  return lpmservice::IpcAccessoryFlags_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcDspToneId_t>() {
  return lpmservice::IpcDspToneId_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcToneLocationBits_t>() {
  return lpmservice::IpcToneLocationBits_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcSTNetworkStatus_t>() {
  return lpmservice::IpcSTNetworkStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcSTBluetoothStatus>() {
  return lpmservice::IpcSTBluetoothStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcLEDControlParams_t>() {
  return lpmservice::IpcLEDControlParams_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcLEDControlCommands_t>() {
  return lpmservice::IpcLEDControlCommands_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcLEDControlLEDNumber_t>() {
  return lpmservice::IpcLEDControlLEDNumber_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcLEDControlArgumentsShort_t>() {
  return lpmservice::IpcLEDControlArgumentsShort_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcLEDControlArgumentsLong_t>() {
  return lpmservice::IpcLEDControlArgumentsLong_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::WhyIsThisAnEnum_t>() {
  return lpmservice::WhyIsThisAnEnum_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcWifiRadioContolCommand_t>() {
  return lpmservice::IpcWifiRadioContolCommand_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcWifiRadioContolTarget_t>() {
  return lpmservice::IpcWifiRadioContolTarget_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcSTContentControlCommand_t>() {
  return lpmservice::IpcSTContentControlCommand_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcSTContentControlAction_t>() {
  return lpmservice::IpcSTContentControlAction_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcControlUpdateCommand_t>() {
  return lpmservice::IpcControlUpdateCommand_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcUpdateDisplayStatus_t>() {
  return lpmservice::IpcUpdateDisplayStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcCECSelectModes_t>() {
  return lpmservice::IpcCECSelectModes_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcHDMIInputSelection_t>() {
  return lpmservice::IpcHDMIInputSelection_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcAudioMuteState_t>() {
  return lpmservice::IpcAudioMuteState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::AccessoryType_t>() {
  return lpmservice::AccessoryType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::AccessoryPosition_t>() {
  return lpmservice::AccessoryPosition_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::AccessoryConnectionStatus_t>() {
  return lpmservice::AccessoryConnectionStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::AccessoryActiveState_t>() {
  return lpmservice::AccessoryActiveState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::F0_PowerDevice_t>() {
  return lpmservice::F0_PowerDevice_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::ST_ControlBT_t>() {
  return lpmservice::ST_ControlBT_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::ST_ControlUpdate_t>() {
  return lpmservice::ST_ControlUpdate_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::Ipc_TimeoutCommand_t>() {
  return lpmservice::Ipc_TimeoutCommand_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcRebootType_t>() {
  return lpmservice::IpcRebootType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcTriStateParam>() {
  return lpmservice::IpcTriStateParam_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lpmservice::IpcVersionType_t>() {
  return lpmservice::IpcVersionType_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LpmService_2eproto__INCLUDED
