////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      LpmInterface.h
///
/// @brief     This header file contains declarations for interfacing
///            with the Low Power Microcontroller or LPM.
///
/// @author
///
/// @date      10/17/2017
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "LpmClientIF.h"
#include "AsyncCallback.h"
#include "AutoLpmServiceMessages.pb.h"
#include "ProductMessage.pb.h"

namespace ProductApp
{
class LpmInterface
{
public:
    //////////////////////////////////////////////////////////////////////////////////////////////
    /// Callback message type to exchange messages between ProductController and LpmInterface
    //////////////////////////////////////////////////////////////////////////////////////////////
    typedef Callback<ProductMessage> ProductMessageCb;

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   LpmInterface
    /// @brief  Constructor of LpmInterface
    /// @param  ProductMessageCb - NotifyProductCb - Callback to receive LPM response
    /// @param  task             - NotifyTargetTaskIF*
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    LpmInterface( ProductMessageCb NotifyProductCb, NotifyTargetTaskIF* task );

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   Initialize
    /// @brief  Connects LpmInterface with Lpm, providing communication interface between
    ///         product controller and Lpm. Responds to the registered Callback
    ///         with ProductMessage set to Id LPM_INTERFACE_UP
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    void Initialize();

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   SetSystemState
    /// @brief  Sets Lpm system state.
    /// @param  state - IpcLpmSystemState_t, as defined in AutoLpmServiceMessages.proto
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    void SetSystemState( LpmServiceMessages::IpcLpmSystemState_t state );

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   SetPowerState
    /// @brief  Sets Lpm power state
    /// @param  state - IpcLPMPowerState_t, as defined in AutoLpmServiceMessages.proto
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    void SetPowerState( LpmServiceMessages::IpcLPMPowerState_t state );

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   isConnected
    /// @brief  Returns if LpmInterface is connected to LPM or not
    /// @param  state - IpcLPMPowerState_t, as defined in AutoLpmServiceMessages.proto
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool isConnected();

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   isConnected
    /// @brief  Returns if LpmInterface is connected to LPM or not
    /// @param  state - IpcLPMPowerState_t, as defined in AutoLpmServiceMessages.proto
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    inline LpmClientIF::LpmClientPtr GetLpmClient()
    {
        return m_LpmClient;
    }

private:

    //////////////////////////////////////////////////////////////////////////////////////////////
    ///@name  Connected
    ///@brief This method is called when an LPM server connection is established. Calls init
    ///       sequences
    //////////////////////////////////////////////////////////////////////////////////////////////
    void Connected();

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   Connect
    /// @brief  Connects to LPM service. When the connection is established
    /// @param  task - NotifyTargetTaskIF*
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    void Connect( NotifyTargetTaskIF* task );

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// @name   HandleLpmStateResponse
    /// @brief  Handles System and Power responses from LPM. LPM is requested to set system/power state
    /// @param  state - IpcLpmStateResponse_t, as defined in AutoLpmServiceMessages.proto
    /// @return none
    //////////////////////////////////////////////////////////////////////////////////////////////
    void HandleLpmStateResponse( LpmServiceMessages::IpcLpmStateResponse_t stateResponse );

private:
    LpmClientIF::LpmClientPtr m_LpmClient  = nullptr;

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// Stores main task that initialized LpmInterface, to facilitate communication to that task
    //////////////////////////////////////////////////////////////////////////////////////////////
    NotifyTargetTaskIF* m_ProductControllerTask = nullptr;

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// Member flag to determine whether a connection to LPM server is established or not
    //////////////////////////////////////////////////////////////////////////////////////////////
    bool m_isConnected = false;
    ProductMessageCb m_NotifyProductCb = nullptr;

private:
    //////////////////////////////////////////////////////////////////////////////////////////////
    /// Disable copying this class
    //////////////////////////////////////////////////////////////////////////////////////////////
    LpmInterface( const LpmInterface& ) = delete;
    LpmInterface& operator=( const LpmInterface& ) = delete;
};
}
// namespace ProductApp
