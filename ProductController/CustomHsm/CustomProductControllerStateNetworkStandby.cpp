////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file      CustomProductControllerStateNetworkStandby.cpp
///
/// @brief     This source code file contains functionality to process events that occur during the
///            product network standby state.
///
/// @attention Copyright (C) 2018 Bose Corporation All Rights Reserved
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
///            Included Header Files
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CustomProductControllerStateNetworkStandby.h"
#include "CustomProductController.h"
#include "ProductControllerStates.h"
#include "ProductLogger.h"
////////////////////////////////////////////////////////////////////////////////////////////////////
///                            Start of Product Application Namespace                            ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{
////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief CustomProductControllerStateNetworkStandby::
///        CustomProductControllerStateNetworkStandby
/// @param ProductControllerHsm& hsm
/// @param CHsmState*            pSuperState
/// @param Hsm::STATE            stateId
/// @param const std::string&    name
////////////////////////////////////////////////////////////////////////////////////////////////////
CustomProductControllerStateNetworkStandby::
CustomProductControllerStateNetworkStandby( ProductControllerHsm& hsm,
                                            CHsmState* pSuperState,
                                            Hsm::STATE stateId,
                                            const std::string& name )
    : ProductControllerStateNetworkStandby( hsm, pSuperState, stateId, name )
{
    BOSE_INFO( s_logger, "The %s state is being constructed.", GetName( ).c_str( ) );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief The CustomProductControllerStateNetworkStandby::HandleEthernetConnectionRemoved
////////////////////////////////////////////////////////////////////////////////////////////////////
bool CustomProductControllerStateNetworkStandby::HandleEthernetConnectionRemoved( )
{
    BOSE_INFO( s_logger, "The %s state is in %s.", GetName( ).c_str( ), __func__ );
    // if eth->no eth we will ifdown eth0
    GetCustomProductController().SetEthernetEnabled( false );
    return true;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}
////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
