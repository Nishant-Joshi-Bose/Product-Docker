////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file      CustomProductControllerStateLowPowerStandbyTransition.cpp
///
/// @brief     This source code file contains functionality to process a low power standby
///            transition in the Product Controller HSM.
///
/// @attention Copyright (C) 2018 Bose Corporation All Rights Reserved
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
///            Included Header Files
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CustomProductControllerStateLowPowerStandbyTransition.h"
#include "CustomProductController.h"
#include "ProductLogger.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
///                            Start of Product Application Namespace                            ///
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ProductApp
{

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief CustomProductControllerStateLowPowerStandbyTransition::
///        CustomProductControllerStateLowPowerStandbyTransition
/// @param ProductControllerHsm& hsm
/// @param CHsmState*            pSuperState
/// @param Hsm::STATE            stateId
/// @param const std::string&    name
////////////////////////////////////////////////////////////////////////////////////////////////////
CustomProductControllerStateLowPowerStandbyTransition::
CustomProductControllerStateLowPowerStandbyTransition( ProductControllerHsm& hsm,
                                                       CHsmState* pSuperState,
                                                       Hsm::STATE stateId,
                                                       const std::string& name )
    : ProductControllerStateLowPowerStandbyTransition( hsm, pSuperState, stateId, name )
{
    BOSE_INFO( s_logger, "%s is being constructed.", GetName( ).c_str( ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief CustomProductControllerStateLowPowerStandbyTransition::HandleStateStart
////////////////////////////////////////////////////////////////////////////////////////////////////
void CustomProductControllerStateLowPowerStandbyTransition::HandleStateStart( )
{
    GetCustomProductController().SetEthernetEnabled( false );
    ProductControllerStateLowPowerStandbyTransition::HandleStateStart( );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           End of the Product Application Namespace                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                         End of File                                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
