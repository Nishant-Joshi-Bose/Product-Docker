////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      ProductMessage.proto
///
/// @brief     This header file declares a Protocol Buffer for creating messages to send as events
///            to the Eddie product controller state machine.
///
/// @author    Stuart J. Lumby
///
/// @attention Copyright (C) 2017 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           Key Actions Protocol Buffer Include                                ///
////////////////////////////////////////////////////////////////////////////////////////////////////
import "KeyActions.proto";

////////////////////////////////////////////////////////////////////////////////////////////////////
///                       LPM Lower Power Microprocessor Message Structure                       ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductLpmStatus
{
        optional bool connected = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                    CAPS Content Audio Playback Services Message Structure                    ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductCapsStatus
{
        optional bool initialized = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                            Audio Path Status Message Structure                               ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductAudioPathStatus
{
        optional bool connected = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                  Select Sources Status and Source Slot Message Structure                     ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductSTSInterfaceStatus
{
        optional bool initialized = 1;
}

message ProductSelectSourceSlot
{
        optional uint32 slot = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                               Network Status Message Structure                               ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductNetworkStatus
{
        enum ProductNetworkType
        {
             Wired    = 1;
             Wireless = 2;
             Unknown  = 3;
        }
        optional ProductNetworkType networktype = 1;
        optional bool               configured  = 2;
        optional bool               connected   = 3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           Network Wireless Status Message Structure                          ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductWirelessStatus
{
        optional bool   configured   = 1;
        optional uint32 frequencykhz = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///              Voice Message Structure for the Virtual Personal Assistant VPA                  ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductVoiceStatus
{
        optional bool microphoneenabled = 1;
        optional bool accountconfigured = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                 Key Data Message Structure                                   ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductKeyData
{
        optional KeyActionPb.KEY_ACTION action = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                             System Language Message Structure                                ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductLanguageData
{
        optional string systemlanguage = 1 [ default = "en" ];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                           Configuration Status Message Structure                             ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductConfigurationStatus
{
        optional bool network  = 1 [ default = false ];
        optional bool language = 2 [ default = false ];
        optional bool account  = 3 [ default = false ];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                              Autowake Status Message Structure                               ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductAutowakeStatus
{
        optional bool active = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                             Now Playing Status Message Structure                             ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductNowPlayingStatus
{
        enum ProductNowPlayingState
        {
             Active   = 1;
             Inactive = 2;
             Unknown  = 3;
        }
        optional ProductNowPlayingState state = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                Base Product Message Structure                                ///
////////////////////////////////////////////////////////////////////////////////////////////////////
message ProductMessage
{
        optional ProductLpmStatus           lpmstatus           =  1;
        optional ProductCapsStatus          capsstatus          =  2;
        optional ProductAudioPathStatus     audiopathstatus     =  3;
        optional ProductSTSInterfaceStatus  stsinterfacestatus  =  4;
        optional ProductSelectSourceSlot    selectsourceslot    =  5;
        optional ProductNetworkStatus       networkstatus       =  6;
        optional ProductWirelessStatus      wirelessstatus      =  7;
        optional ProductVoiceStatus         voicestatus         =  8;
        optional ProductKeyData             keydata             =  9;
        optional ProductLanguageData        languagedata        = 10;
        optional ProductConfigurationStatus configurationstatus = 11;
        optional ProductAutowakeStatus      autowakestatus      = 12;
        optional ProductNowPlayingStatus    nowplayingstatus    = 13;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                        End of File                                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
