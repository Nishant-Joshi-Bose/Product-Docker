////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// @file      Kepler.proto
///
/// @brief     This header file describes the protocol buffer messages associated with 
///            the Kepler remote configuration.
///
/// @attention Copyright (C) 2018 Bose Corporation All Rights Reserved
///
///            Bose Corporation
///            The Mountain Road,
///            Framingham, MA 01701-9168
///            U.S.A.
///
///            This program may not be reproduced, in whole or in part, in any form by any means
///            whatsoever without the written permission of Bose Corporation.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

import "ProductSTS.proto";
import "SystemSourcesProperties.proto";

package KeplerPb;

message KeplerConfig
{
    enum State
    {
        STATE_SOUNDTOUCH            = 1;
        STATE_TV                    = 2;
        STATE_BLUETOOTH             = 3;
        // configurable (SLOT) sources (type determined from activation key)
        STATE_GAME                  = 4;
        STATE_CBL_SAT               = 5;
        STATE_BD_DVD                = 6;
        // setup sources
        STATE_ADAPTIQ               = 7;
        STATE_ACCESSORY_PAIRING     = 8;
        STATE_OOB                   = 9;
        // we are a zone member
        STATE_ZONE                  = 11;
        // we are powered off
        STATE_OFF                   = 12;
    }
    
    enum SourceKey
    {
        KEY_SOUNDTOUCH              = 1;
        KEY_TV                      = 2;
        KEY_BLUETOOTH               = 3;
        KEY_GAME                    = 4;
        KEY_CBL_SAT                 = 5;
        KEY_BD_DVD                  = 6;
    }

    message ZoneConfiguration
    {
        // "zones" are lit unconditionally
        // "zonesUnconfigured" are lit if the source isn't configured
        // "zonesConfigured" are lit if the source is configured
        repeated uint32                                     zones               = 1;
        repeated uint32                                     zonesUnconfigured   = 2;
        repeated uint32                                     zonesConfigured     = 3;
    }

    message StateEntry 
    {
        optional State                                      state               = 1;         
        optional ZoneConfiguration                          zoneConfig          = 2;

        // sourceKey is lit as the active key if it is present
        optional SourceKey                                  sourceKey           = 3;
 
        // The following are used to match this entry to a CAPS source.
        // Entries will match against sourceName and either sourceAccountName 
        // or activationKey.  activationKey takes priority
        // (SLOT sources should have an activationKey)
        optional string                                     sourceName          = 4;
        optional string                                     sourceAccountName   = 5;
        optional SystemSourcesProperties.ACTIVATION_KEY_    activationKey       = 6;        
    }

    // A DeviceEntry specifies zone configuration for a device type 
    // (used for SLOT_n sources)
    message DeviceEntry
    {
        optional SystemSourcesProperties.DEVICE_TYPE_       deviceType          = 1;
        optional ZoneConfiguration                          zoneConfig          = 2;
    }

    repeated StateEntry                                     states              = 1;
    repeated DeviceEntry                                    devices             = 2;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
///                                        End of File                                           ///
////////////////////////////////////////////////////////////////////////////////////////////////////
