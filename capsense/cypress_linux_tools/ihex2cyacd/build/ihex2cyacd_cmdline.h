/** @file ihex2cyacd_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef IHEX2CYACD_CMDLINE_H
#define IHEX2CYACD_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef IHEX2CYACD_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define IHEX2CYACD_CMDLINE_PARSER_PACKAGE "ihex2cyacd"
#endif

#ifndef IHEX2CYACD_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define IHEX2CYACD_CMDLINE_PARSER_PACKAGE_NAME "ihex2cyacd"
#endif

#ifndef IHEX2CYACD_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define IHEX2CYACD_CMDLINE_PARSER_VERSION "0.1"
#endif

enum enum_cpu { cpu__NULL = -1, cpu_arg_CY8C41 = 0, cpu_arg_CY8C42 };

/** @brief Where the command line options are stored */
struct ihex2cyacd_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_arg;	/**< @brief Input ihex file.  */
  char * input_orig;	/**< @brief Input ihex file original value given at command line.  */
  const char *input_help; /**< @brief Input ihex file help description.  */
  int bootloader_size_arg;	/**< @brief Bootloader text size file.  */
  char * bootloader_size_orig;	/**< @brief Bootloader text size file original value given at command line.  */
  const char *bootloader_size_help; /**< @brief Bootloader text size file help description.  */
  char * output_arg;	/**< @brief Output cyacd file.  */
  char * output_orig;	/**< @brief Output cyacd file original value given at command line.  */
  const char *output_help; /**< @brief Output cyacd file help description.  */
  enum enum_cpu cpu_arg;	/**< @brief CPU type (default='CY8C42').  */
  char * cpu_orig;	/**< @brief CPU type original value given at command line.  */
  const char *cpu_help; /**< @brief CPU type help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int bootloader_size_given ;	/**< @brief Whether bootloader_size was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int cpu_given ;	/**< @brief Whether cpu was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct ihex2cyacd_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure ihex2cyacd_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure ihex2cyacd_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *ihex2cyacd_args_info_purpose;
/** @brief the usage string of the program */
extern const char *ihex2cyacd_args_info_usage;
/** @brief the description string of the program */
extern const char *ihex2cyacd_args_info_description;
/** @brief all the lines making the help output */
extern const char *ihex2cyacd_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int ihex2cyacd_cmdline_parser (int argc, char **argv,
  struct ihex2cyacd_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use ihex2cyacd_cmdline_parser_ext() instead
 */
int ihex2cyacd_cmdline_parser2 (int argc, char **argv,
  struct ihex2cyacd_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int ihex2cyacd_cmdline_parser_ext (int argc, char **argv,
  struct ihex2cyacd_args_info *args_info,
  struct ihex2cyacd_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int ihex2cyacd_cmdline_parser_dump(FILE *outfile,
  struct ihex2cyacd_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int ihex2cyacd_cmdline_parser_file_save(const char *filename,
  struct ihex2cyacd_args_info *args_info);

/**
 * Print the help
 */
void ihex2cyacd_cmdline_parser_print_help(void);
/**
 * Print the version
 */
void ihex2cyacd_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a ihex2cyacd_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void ihex2cyacd_cmdline_parser_params_init(struct ihex2cyacd_cmdline_parser_params *params);

/**
 * Allocates dynamically a ihex2cyacd_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized ihex2cyacd_cmdline_parser_params structure
 */
struct ihex2cyacd_cmdline_parser_params *ihex2cyacd_cmdline_parser_params_create(void);

/**
 * Initializes the passed ihex2cyacd_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void ihex2cyacd_cmdline_parser_init (struct ihex2cyacd_args_info *args_info);
/**
 * Deallocates the string fields of the ihex2cyacd_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void ihex2cyacd_cmdline_parser_free (struct ihex2cyacd_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int ihex2cyacd_cmdline_parser_required (struct ihex2cyacd_args_info *args_info,
  const char *prog_name);

extern const char *ihex2cyacd_cmdline_parser_cpu_values[];  /**< @brief Possible values for cpu. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* IHEX2CYACD_CMDLINE_H */
