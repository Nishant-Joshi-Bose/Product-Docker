/** @file cyhostboot_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CYHOSTBOOT_CMDLINE_H
#define CYHOSTBOOT_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CYHOSTBOOT_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CYHOSTBOOT_CMDLINE_PARSER_PACKAGE "cyhostboot"
#endif

#ifndef CYHOSTBOOT_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CYHOSTBOOT_CMDLINE_PARSER_PACKAGE_NAME "cyhostboot"
#endif

#ifndef CYHOSTBOOT_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CYHOSTBOOT_CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct cyhostboot_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int baudrate_arg;	/**< @brief Bootloader baudrate (default='115200').  */
  char * baudrate_orig;	/**< @brief Bootloader baudrate original value given at command line.  */
  const char *baudrate_help; /**< @brief Bootloader baudrate help description.  */
  char * file_arg;	/**< @brief cyacd file to flash.  */
  char * file_orig;	/**< @brief cyacd file to flash original value given at command line.  */
  const char *file_help; /**< @brief cyacd file to flash help description.  */
  char * serial_arg;	/**< @brief Serial port to use (default='/dev/ttyACM0').  */
  char * serial_orig;	/**< @brief Serial port to use original value given at command line.  */
  const char *serial_help; /**< @brief Serial port to use help description.  */
  int app_id_arg;	/**< @brief Application id to use (0 for no change, or 1 or 2) (default='0').  */
  char * app_id_orig;	/**< @brief Application id to use (0 for no change, or 1 or 2) original value given at command line.  */
  const char *app_id_help; /**< @brief Application id to use (0 for no change, or 1 or 2) help description.  */
  const char *program_help; /**< @brief Program the file help description.  */
  const char *erase_help; /**< @brief Erase memory help description.  */
  const char *verify_help; /**< @brief Verify file help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int baudrate_given ;	/**< @brief Whether baudrate was given.  */
  unsigned int file_given ;	/**< @brief Whether file was given.  */
  unsigned int serial_given ;	/**< @brief Whether serial was given.  */
  unsigned int app_id_given ;	/**< @brief Whether app_id was given.  */
  unsigned int program_given ;	/**< @brief Whether program was given.  */
  unsigned int erase_given ;	/**< @brief Whether erase was given.  */
  unsigned int verify_given ;	/**< @brief Whether verify was given.  */

  int Action_group_counter; /**< @brief Counter for group Action */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cyhostboot_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure cyhostboot_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure cyhostboot_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *cyhostboot_args_info_purpose;
/** @brief the usage string of the program */
extern const char *cyhostboot_args_info_usage;
/** @brief the description string of the program */
extern const char *cyhostboot_args_info_description;
/** @brief all the lines making the help output */
extern const char *cyhostboot_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cyhostboot_cmdline_parser (int argc, char **argv,
  struct cyhostboot_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cyhostboot_cmdline_parser_ext() instead
 */
int cyhostboot_cmdline_parser2 (int argc, char **argv,
  struct cyhostboot_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cyhostboot_cmdline_parser_ext (int argc, char **argv,
  struct cyhostboot_args_info *args_info,
  struct cyhostboot_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cyhostboot_cmdline_parser_dump(FILE *outfile,
  struct cyhostboot_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cyhostboot_cmdline_parser_file_save(const char *filename,
  struct cyhostboot_args_info *args_info);

/**
 * Print the help
 */
void cyhostboot_cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cyhostboot_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cyhostboot_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cyhostboot_cmdline_parser_params_init(struct cyhostboot_cmdline_parser_params *params);

/**
 * Allocates dynamically a cyhostboot_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cyhostboot_cmdline_parser_params structure
 */
struct cyhostboot_cmdline_parser_params *cyhostboot_cmdline_parser_params_create(void);

/**
 * Initializes the passed cyhostboot_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cyhostboot_cmdline_parser_init (struct cyhostboot_args_info *args_info);
/**
 * Deallocates the string fields of the cyhostboot_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cyhostboot_cmdline_parser_free (struct cyhostboot_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cyhostboot_cmdline_parser_required (struct cyhostboot_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CYHOSTBOOT_CMDLINE_H */
