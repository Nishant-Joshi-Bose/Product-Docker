#!/usr/bin/python2.7
#
# Validate the manufacturing data to make sure it contains the information the
# SoundTouch daemons require.  If invalid, show how to fix it.
#
# See also:
# https://wiki.bose.com/display/BC/Riviera+Manufacturing+Data+Information
#
import sys
import os
import subprocess
import re

this_script = os.path.basename(sys.argv.pop(0))

if len(sys.argv) > 1:
    raise Exception("wrong usage")

def warn(*args):
    print >>sys.stderr, this_script + ":", " ".join(map(lambda a: str(a), args))

devnull = open(os.devnull, "w")

def get(name):
    """Get the mfgdata value associated with NAME"""
    ph = subprocess.Popen(["mfgdata", "get", name],
                          stdout=subprocess.PIPE, stderr=devnull)
    out = ph.stdout.read()
    if ph.wait() != 0:
        return None
    return out.rstrip("\n")

# GUID standard canonical form is described here:
# https://en.m.wikipedia.org/wiki/Universally_unique_identifier
guid = get("guid")
if guid is None or not re.match(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', guid):
    warn("Invalid guid:", guid)
    warn("You must run the sadi command to give this unit a device identity")
    warn("See: https://wiki.bose.com/pages/viewpage.action?pageId=42202819")
    sys.exit(1)

fixes = []

# "modified" is always present ordinarily.  If missing, means there's no
# manufacturing data at all or it's malformed/corrupt.
if get("modified") is None:
    warn("Manufacturing data is missing or invalid")
    fixes.append("clear")

# 'development' is optional, but if present must be "true" or "false"
optional_dev = True
dev = get("development")
if dev is not None and dev != "true" and dev != "false":
    warn("development field is invalid:", dev)
    fixes.append("set development true")
    optional_dev = False

cc = get("country_code")
if cc is None or not re.match(r'^[A-Z][A-Z]$', cc):
    warn("Invalid country_code", cc)
    fixes.append("set country_code US")

sn = get("snSystem")
if not sn: # allow any non-empty string
    warn("Invalid snSystem:", sn)
    fixes.append("set snSystem RF000000000000000")

pc = get("productColor")
if pc is None or not re.match(r'^\d+$', pc): # allow any integer
    warn("Invalid productColor:", pc)
    fixes.append("set productColor 1  # 1=tripleBlack | 3=luxGray")

vi = get("BMAPVariantID")
if vi is None or not re.match(r'^\d+$', vi): # allow any integer
    warn("Invalid BMAPVariantID: ", vi)
    fixes.append("set BMAPVariantID 1  # 0=NONE | 1=BLACK | 2=WHITE | 3=SILVER")

pi = get("BMAPProductID")
if pi is None or not re.match(r'^0[xX][0-9a-fA-F]{4}$', pi): # allow hex value (2-bytes)
    warn("Invalid BMAPProductID:", pi)
    fixes.append("set BMAPProductID 0x4026  # 0x4026=Eddie | 0x4027=Professor | 0x4028=Ginger-Cheevers")

ai = get("BMAPBleProductID")
if ai is None or not re.match(r'^\d+$', ai): # allow any integer
    warn("Invalid productColor:", ai)
    fixes.append("set BMAPBleProductID 16  # 16=Eddie | 17=Professor | 18=Ginger-Cheevers")

pn = get("productName")
if not pn: # allow any non-empty string
    warn("Invalid productName:", pn)
    fixes.append("set productName 'Bose Home Speaker 500'")

pt = get("productType")
if not pt: # allow any non-empty string
    warn("Invalid productType:", pt)
    fixes.append("set productType eddie")

if not fixes:
    # Validation successful.
    sys.exit()

if optional_dev:
    fixes.append("set development true # (optional)")

print """
To set manufacturing data:

  mount -oremount,rw /persist"""
for fix in fixes:
    print "  mfgdata", fix
print """\
  mount -oremount,ro /persist

See also: https://wiki.bose.com/display/BC/Riviera+Manufacturing+Data+Information
"""
sys.exit(1)
