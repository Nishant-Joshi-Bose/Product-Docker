#!/usr/bin/python2.7
#
# Send a single command to the CLI server and display the resulting output.
#
# Example:
#
#  # tap-command softwareupdate status
#  SwUpStateURLQueryPending
#  # tap-command lpm pt \"lb history\"
#
#  Timestamp: 662, Animation Id: 38, Animation Name: SW_UPDATE, STARTED
#  Timestamp: 36400, Animation Id: 38, Animation Name: SW_UPDATE, STOPPED
#
#  #
#
import os
import sys
import argparse
import subprocess
import select

parser = argparse.ArgumentParser(description="""
Send a single command to the CLI server and display the resulting output.
""")
parser.add_argument("--timeout", "-t", type=float, default=5.0, metavar="SEC",
                    help="""
Maximum time to wait for the second prompt. (default: %(default)s)
""")
parser.add_argument("--debug",
                    help="Enable debug logging",
                    action="store_true")
parser.add_argument("command", nargs="+",
                    help="The command")
opts = parser.parse_args()
del parser

# ----------------------------------------------------------------------------

command = " ".join(opts.command)
if opts.debug:
    print "command", repr(command)

ph = subprocess.Popen("telnet localhost 17000".split(),
                      stdin=subprocess.PIPE,
                      stdout=subprocess.PIPE)
ph.stdin.write(command + "\r")
ph.stdin.flush()

fh = ph.stdout
end_marker = "->OK\n"
out = ""
trouble = False
while True:
    rfds, _, _ = select.select([ fh ], [], [], opts.timeout)
    if not rfds:
        if opts.debug:
            print "Timeout"
        trouble = True
        break

    c = fh.read(1)
    if opts.debug:
        print "read", repr(c)
    if c == "":
        if opts.debug:
            print "EOF"
        trouble = True
        break
    out += c
    if opts.debug:
        print "out", repr(out)
    if out.endswith(end_marker):
        out = out[:-len(end_marker)]
        break

if out.startswith("->"):
    out = out[2:]

if out:
    print out

if trouble:
    sys.exit(1)
