#!/bin/bash
#
# Start/stop shepherdd, the SoundTouch meta-daemon.
#
export PATH=/opt/Bose/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
tag="${0##*/}[$$]"              # for log messages

localtime_symlink=/mnt/nv/localtime
default_timezone=/usr/share/zoneinfo/UTC

function log {
    local pri="$1"; shift
    logger -s -t "$tag" -p "$pri" "$*"
}

function reset_timezone_to_default {
    # if localtime symlink does not exist,
    # create it, and default to UTC
    if ! [ -L "$localtime_symlink" ]; then
        log info "Selecting default time zone ${default_timezone##*/}"
        ln -s "$default_timezone" "$localtime_symlink"
    # if force flag is used, reset to default forcefully
    elif [ "$1" == "force" ]; then
        log info "reseting time zone to ${default_timezone##*/}"
        ln -sfn "$default_timezone" "$localtime_symlink"
    fi
}

cd /opt/Bose/bin || exit

rundir=/var/run/shepherd
pidfile=$rundir/pid
override=false

# The list of daemons to stop while in low power mode.  These daemons are
# typically the ones that don't know how to handle the low power events
# properly.
lowpower=(
    Shepherd-AudioPath.xml
    Shepherd-avs.xml
    Shepherd-vfe.xml
    Shepherd-VPAController.xml
)

# Add GVA xml to lowpower mode only if GVA package is installed
if [ -e /opt/Bose/etc/Shepherd-GVA.xml ]; then
    lowpower+=( Shepherd-GVA.xml )
fi

function validate {
    if ! validate-mfgdata; then
        log warning "Missing or invalid manufacturing data"
        return 1
    fi

    # If device is in restore mode skip checking for low power mode services
    # as voice related services like VFE and AVS will not be available in
    # restore mode.
    if ! [ -e /cache/restore_in_progress ]; then

        # If the lowpower list is wrong, we don't tend to notice until we try
        # to come out of low power mode.  So, validate the list now.
        if ! ( cd /opt/Bose/etc && ls "${lowpower[@]}" >/dev/null ); then
            log critical "lowpower list is not valid"
            return 1
        fi
    fi

    return 0
}

# For testing, make it easy to override what shepherd config files we use.
if [ -d /mnt/nv/shepherd ]; then
    rundir=/mnt/nv/shepherd
    override=true
fi

if (( $# >= 1 )) && [ "$1" = start ]; then
    shift

    # We want our certificates to appear valid even when NTP hasn't yet set
    # our clock (e.g., because there's no network connectivity).
    set-default-time

    log info "* Starting SoundTouch *"

    log info "Re-launching syslogd with a bigger buffer"
    killwait syslogd
    syslogd -C$(( 3 * 1024 )) # units are 1024 bytes (KiB)

    # By default we launch shepherdd into the background (as expected by
    # /etc/init.d).  With --wait we instead invoke sheppherd and wait for it
    # to exit (preferred by systemd).
    wait=false
    if (( $# > 0 )) && [ "$1" = --wait ]; then
        shift
        wait=true
    fi

    if pid=$(cat "$pidfile" 2>/dev/null) && [ -e "/proc/$pid" ]; then
        log warning "shepherdd is already running, PID $pid"
        kill -HUP "$pid" # ask shepherdd to re-examine $rundir
        exit 1
    fi

    if ! is-development; then
        log info "Production mode (core files disabled, recovery enabled)"
        set -- "$@" --recovery
        ulimit -c 0
    else
        log info "Development mode (core files enabled, recovery disabled)"
        [ -e /mnt/nv/force-rndis ] && set-rndis on
        systemctl start adbd.service
        systemctl start sshd.socket
        ulimit -c unlimited
        /opt/Bose/etc/store-core
    fi

    # By default, keep processes off the 4th processor.
    # Override with the `cpuset` attribute in Shepherd*.xml.
    set -- "$@" --default-cpu-set 7

    if ! [ -e /mnt/nv/BoseLog ]; then
        ln -s /data/logs /mnt/nv/BoseLog
    fi
    clean_logs
    mkdir -p /mnt/nv/IoTCerts /mnt/nv/product-persistence

    reset_timezone_to_default

    init-lcd

    init-audio

    cfg=/opt/Bose/etc/KeyConfiguration.json
    if [ -e /mnt/nv/product-persistence/DemoModeOn ]; then
        log info "--DEMO MODE--"
        cfg=/mnt/nv/product-persistence/KeyConfiguration-demo.json
        if ! [ -e "$cfg" ]; then
            cfg=/opt/Bose/etc/KeyConfiguration-demo.json
        fi
    fi
    log info "Key configuration: $cfg"
    ln -nsf "$cfg" /var/run/KeyConfiguration.json || exit

    if ! $override; then
        mkdir -p "$rundir" || exit
        rm -f "$rundir"/*.xml

        if ! validate; then
            log warning "Won't start SoundTouch"
            # Enable access to the LPM CLI.
            ln -s /opt/Bose/etc/Shepherd-LPMService.xml "$rundir" || exit
            ln -s /opt/Bose/etc/Shepherd-CLIServer.xml "$rundir" || exit

            # Enable the PTS server and the rndis interface to facilitate
            # investigation of the manufacturing data.
            ln -s /opt/Bose/etc/Shepherd-pts.xml "$rundir" || exit
            set-usb-mode p2p
        else
            ln -s /opt/Bose/etc/Shepherd*.xml "$rundir" || exit
        fi

        if is-development; then
            cat >"$rundir/Debug.xml" <<\EOF
<ShepherdConfig>
  <daemon name="Telnet"
          exe="/sbin/telnetd">
    <arg>-l/bin/bash</arg>
    <arg>-S</arg> <!-- log to syslog -->
    <arg>-F</arg> <!-- run in foreground -->
  </daemon>
</ShepherdConfig>
EOF
        fi
    fi

    # For testing, shepherdargs can contain additional arguments to pass to
    # shepherdd.  For example, to enable recovery for unexpected daemon death
    # (even in development mode): echo --recovery >/mnt/nv/shepherdargs
    if [ -e /mnt/nv/shepherdargs ]; then
        set -- "$@" $(cat /mnt/nv/shepherdargs)
    fi

    export BOSE_MULTISTRING_DIR=/opt/Bose/etc/multistring

    set -- ./shepherdd "$@" "$rundir"
    log info "Starting $*"

    if $wait; then
        echo "$$" >"$pidfile" || exit
        exec "$@"
    fi
    "$@" &
    echo "$!" >"$pidfile" || exit
    exit 0
fi

if (( $# == 1 )) && [ "$1" = stop ]; then
    if ! pid=$(cat "$pidfile" 2>/dev/null); then
        log warning "shepherdd was not running"
        exit 1
    fi
    log info "Stopping shepherdd"
    kill "$pid"
    i=0
    while [ "$(sleep 1; cat 2>/dev/null "/proc/$pid/comm")" = shepherdd ]; do
        if (( ( i += 1 ) >= 30 )); then
            log warning "giving up, shepherdd is still running, PID $pid"
            exit 1
        fi
    done
    rm -f "$pidfile"
    exit 0
fi

if (( $# == 1 )) && [ "$1" = factory_default ]; then
    log info "Stopping all services for factory default"
    rm -f "$rundir"/*.xml  # remove all daemons from the shepherd configuration
    shepherd-wait "$rundir" "$pidfile"

    log info "Clearing product persistence"
    rm -rfv /mnt/nv/product-persistence/*

    swup-factory-reset

    reset_timezone_to_default force
    sync

    log info "Rebooting"
    reboot
    exit
fi

if (( $# == 1 )) && [ "$1" = enterlowpower ]; then
    log info "Disabling services to enter low power mode"
    cd "$rundir" || exit
    rm -f "${lowpower[@]}"
    shepherd-wait "$rundir" "$pidfile"
    exit
fi

if (( $# == 1 )) && [ "$1" = exitlowpower ]; then
    log info "Enabling services to exit low power mode"
    cd "$rundir" || exit
    for i in "${lowpower[@]}"; do
        ln -sf "/opt/Bose/etc/$i"
    done
    shepherd-wait "$rundir" "$pidfile"
    exit
fi

if (( $# >= 1 )) && [ "$1" = restart ]; then
    shift
    "$0" stop
    exec "$0" start "$@"
fi

if (( $# == 1 )) && [ "$1" = status ]; then
    # shepherdd will show the current status of the daemons
    # on the console and in logread.
    kill -ALRM "$(cat "$pidfile")"
    exit
fi

if (( $# == 1 )) && [ "$1" = snapshot ]; then
    # Ask shepherdd to save a snapshot of the
    # logread buffer in /mnt/nv/BoseLog/
    kill -USR1 "$(cat "$pidfile")"
    exit
fi

echo >&2 "\
usage: $0 start [args...]
   or: $0 stop
   or: $0 restart
   or: $0 status
   or: $0 factory_default
   or: $0 enterlowpower
   or: $0 exitlowpower
   or: $0 snapshot         - save a snapshot of the logread buffer
"
exit 1
