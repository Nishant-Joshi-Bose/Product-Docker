#!/bin/bash
#
# Start/stop shepherdd, the SoundTouch meta-daemon.
#
export PATH=/opt/Bose/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
tag="${0##*/}[$$]"              # for log messages

function log {
    local pri="$1"; shift
    logger -s -t "$tag" -p "$pri" "$*"
}

cd /opt/Bose/bin || exit

rundir=/var/run/shepherd
pidfile=/var/run/shepherd/pids
override=false

# For testing, make it easy to override what shepherd config files we use.
if [ -d /mnt/nv/shepherd ]; then
    rundir=/mnt/nv/shepherd
    override=true
fi

if (( $# >= 1 )) && [ "$1" = start ]; then
    shift

    log info "* Starting SoundTouch *"

    # By default we launch shepherdd into the background (as expected by
    # /etc/init.d).  With --wait we instead invoke sheppherd and wait for it
    # to exit (preferred by systemd).
    wait=false
    if (( $# > 0 )) && [ "$1" = --wait ]; then
        shift
        wait=true
    fi

    if pid=$(pgrep shepherdd); then
        log warning "shepherdd is already running, PID $pid"
        kill -HUP "$pid" # ask shepherdd to re-examine $rundir
        exit 1
    fi

    if ! is-development; then
        set -- "$@" --recovery
        ulimit -c 0
        log info "Production mode (core files disabled, recovery enabled)"
    else
        ulimit -c unlimited
        log info "Development mode (core files enabled, recovery disabled)"
        echo "|/opt/Bose/etc/store-core %e-%u-%g-%p-%t-%s" > \
            /proc/sys/kernel/core_pattern
    fi

    if ! [ -e /mnt/nv/BoseLog ]; then
        ln -s /data/logs /mnt/nv/BoseLog
    fi
    clean_logs
    mkdir -p /mnt/nv/IoTCerts /mnt/nv/BoseApp-Persistence/1 /mnt/nv/product-persistence

    rw --read-only

    /opt/Bose/webkit/target_scripts/lcd/init-lcd.sh

    set_ap.sh

    keyPath=/opt/Bose/etc/KeyConfiguration.json
    if [ -e /mnt/nv/DemoModeOn ]; then
        log info "--DEMO MODE--"
        keyPath=/opt/Bose/etc/KeyConfiguration-demo.json
        if [ -e /mnt/nv/KeyConfiguration-demo.json ]; then
            log info "--USING ALTERNATE KeyConfiguration-demo.json--"
            keyPath=/mnt/nv/KeyConfiguration-demo.json
        fi
    fi
    ln -nsf "$keyPath" /var/run/KeyConfiguration.json || exit

    if ! $override; then
        mkdir -p "$rundir" || exit
        rm -f "$rundir"/*.xml

        if ! validate-mfgdata; then
            log warning "Missing or invalid manufacturing data, won't start SoundTouch"
            # Enable access to the LPM CLI.
            ln -s /opt/Bose/etc/Shepherd-LPMService.xml "$rundir" || exit
            ln -s /opt/Bose/etc/Shepherd-CLIServer.xml "$rundir" || exit
        else
            ln -s /opt/Bose/etc/Shepherd*.xml "$rundir" || exit
        fi

        if is-development; then
            cat >"$rundir/Debug.xml" <<\EOF
<ShepherdConfig>
  <daemon name="Telnet"
          exe="/sbin/telnetd">
    <arg>-l/bin/bash</arg>
    <arg>-S</arg> <!-- log to syslog -->
    <arg>-F</arg> <!-- run in foreground -->
  </daemon>
  <daemon name="Telemetry"
          exe="/opt/Bose/Telemetry/telemetry">
  </daemon>
</ShepherdConfig>
EOF
        fi
    fi

    set -- ./shepherdd "$@" "$rundir"
    log info "Starting $*"

    if $wait; then
        exec "$@"
    fi
    "$@" &
    exit 0
fi

if (( $# == 1 )) && [ "$1" = stop ]; then
    if ! pid=$(pgrep shepherdd); then
        log warning "shepherdd was not running"
        exit 1
    fi
    log info "Stopping shepherdd"
    kill "$pid"
    i=0
    while [ "$(sleep 1; cat 2>/dev/null "/proc/$pid/comm")" = shepherdd ]; do
        if (( ( i += 1 ) >= 30 )); then
            log warning "giving up, shepherdd is still running, PID $pid"
            exit 1
        fi
    done
    exit 0
fi

if (( $# == 1 )) && [ "$1" = factory_default ]; then
    log info "Stopping all services"
    rm -f "$rundir"/*.xml  # remove all daemons from the shepherd configuration
    killall -SIGHUP shepherdd
    
    # give 30 secs to stop all the services
    i=30
    
    # Continue till the pid file becomes empty. empty means no srv running
    while [ -s "$pidfile" ]; do
        srv_running=$(wc -l < "$pidfile")
        
        if (( ( i-- ) <= 0 )); then
            log warning "Timed out. $srv_running service(s) are still running. Proceeding to clear data."
            break
        fi
        
        if (( i < 25 )); then
            log warning "$srv_running service(s) are still running. Waiting for another $i secs"
        fi
        
        sleep 1
    done

    log info "clearing data"
    rm -rfv /mnt/nv/BoseApp-Persistence/* /mnt/nv/product-persistence/*
    sync

    log info "Done clearing data. rebooting"
    ResetUtil SYSTEM # ResetUtil shall indicate to LPM to reboot (without using on LPMService)
    sleep 30
    log warning "LPM didn't reset, asking Linux to reboot"
    reboot
    exit
fi

if (( $# >= 1 )) && [ "$1" = restart ]; then
    shift
    "$0" stop
    exec "$0" start "$@"
fi

if (( $# == 1 )) && [ "$1" = status ]; then
    # shepherdd will show the current status of the daemons
    # on the console and in logread.
    pkill -ALRM shepherdd
    exit
fi

echo >&2 "\
usage: $0 start [args...]
   or: $0 stop
   or: $0 restart
   or: $0 status
   or: $0 factory_default
"
exit 1
