#!/bin/bash
#
# Start/stop shepherdd, the SoundTouch meta-daemon.
#
export PATH=/opt/Bose/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
tag="${0##*/}[$$]"              # for log messages

localtime_symlink=/mnt/nv/localtime
default_timezone=/usr/share/zoneinfo/UTC


function log {
    local pri="$1"; shift
    logger -s -t "$tag" -p "$pri" "$*"
}


function reset_timezone_to_default {
    # if localtime symlink does not exist,
    # create it, and default to UTC
    if ! [ -L "$localtime_symlink" ]; then
        log info "Selecting default time zone ${default_timezone##*/}"
        ln -s "$default_timezone" "$localtime_symlink"
    # if force flag is used, reset to default forcefully
    elif [ "$1" == "force" ]; then
        log info "reseting time zone to ${default_timezone##*/}"
        ln -sfn "$default_timezone" "$localtime_symlink"
    fi
}


cd /opt/Bose/bin || exit

# get product variant for vfe linking on the fly
productType="$(mfgdata get productType)"
echo "Product type is : ${productType}"

# set where vfe should get libs from
if [ "$productType" = "professor" ] || [ "$productType" = "ginger-cheevers" ]; then
    export "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/Bose/bin/$productType"
    echo "LD_LIBRARY_PATH set to $LD_LIBRARY_PATH"
else
    echo "Incorrect mfgdata value for productType, failed to load Vfe"
    echo "Valid values for this repo are:"
    echo "professor"
    echo "ginger-cheevers"
    exit
fi

echo "$LD_LIBRARY_PATH"

rundir=/var/run/shepherd
pidfile=$rundir/pid
override=false

# The list of daemons to stop while in low power mode.  These daemons are
# typically the ones that don't know how to handle the low power events
# properly.
# NOTE : Vfe can not be added here due to dir structure needed to run prof and GC
lowpower=(
    Shepherd-AudioPath.xml
    Shepherd-NetManager.xml
    Shepherd-avs.xml
)

# For testing, make it easy to override what shepherd config files we use.
if [ -d /mnt/nv/shepherd ]; then
    rundir=/mnt/nv/shepherd
    override=true
fi

if (( $# >= 1 )) && [ "$1" = start ]; then
    shift

    # We want our certificates to appear valid even when NTP hasn't yet set
    # our clock (e.g., because there's no network connectivity).
    set-default-time

    log info "* Starting SoundTouch *"

    # By default we launch shepherdd into the background (as expected by
    # /etc/init.d).  With --wait we instead invoke sheppherd and wait for it
    # to exit (preferred by systemd).
    wait=false
    if (( $# > 0 )) && [ "$1" = --wait ]; then
        shift
        wait=true
    fi

    if pid=$(cat "$pidfile") && [ -e "/proc/$pid" ]; then
        log warning "shepherdd is already running, PID $pid"
        kill -HUP "$pid" # ask shepherdd to re-examine $rundir
        exit 1
    fi

    if ! is-development; then
        log info "Production mode (core files disabled, recovery enabled)"
        set -- "$@" --recovery
        ulimit -c 0
    else
        log info "Development mode (core files enabled, recovery disabled)"
        systemctl start adbd.service
        systemctl start sshd.socket
        ulimit -c unlimited
        echo "|/opt/Bose/etc/store-core %e-%u-%g-%p-%t-%s" > \
            /proc/sys/kernel/core_pattern
    fi

    if ! [ -e /mnt/nv/BoseLog ]; then
        ln -s /data/logs /mnt/nv/BoseLog
    fi
    clean_logs
    mkdir -p /mnt/nv/IoTCerts /mnt/nv/product-persistence

    reset_timezone_to_default

    init-audio

    cfg=/opt/Bose/etc/KeyConfiguration.json
    if [ -e /mnt/nv/DemoModeOn ]; then
        log info "--DEMO MODE--"
        cfg=/mnt/nv/KeyConfiguration-demo.json
        if ! [ -e "$cfg" ]; then
            cfg=/opt/Bose/etc/KeyConfiguration-demo.json
        fi
    fi
    log info "Key configuration: $cfg"
    ln -nsf "$cfg" /var/run/KeyConfiguration.json || exit

    if ! $override; then
        mkdir -p "$rundir" || exit
        rm -f "$rundir"/*.xml

        if ! validate-mfgdata; then
            log warning "Missing or invalid manufacturing data, won't start SoundTouch"
            # Enable access to the LPM CLI.
            ln -s /opt/Bose/etc/Shepherd-LPMService.xml "$rundir" || exit
            ln -s /opt/Bose/etc/Shepherd-CLIServer.xml "$rundir" || exit
        else
            ln -s /opt/Bose/etc/Shepherd*.xml "$rundir" || exit

            # vfe only launching
            ln -s "/opt/Bose/etc/$productType/Shepherd-vfe.xml" "$rundir" || exit

        fi

        if is-development; then
            cat >"$rundir/Debug.xml" <<\EOF
<ShepherdConfig>
  <daemon name="Telnet"
          exe="/sbin/telnetd">
    <arg>-l/bin/bash</arg>
    <arg>-S</arg> <!-- log to syslog -->
    <arg>-F</arg> <!-- run in foreground -->
  </daemon>
  <daemon name="Telemetry"
          exe="/opt/Bose/Telemetry/telemetry">
  </daemon>
</ShepherdConfig>
EOF
        fi
    fi

    set -- ./shepherdd "$@" "$rundir"
    log info "Starting $*"

    if $wait; then
        echo "$$" >"$pidfile" || exit
        exec "$@"
    fi
    "$@" &
    echo "$!" >"$pidfile" || exit
    exit 0
fi

if (( $# == 1 )) && [ "$1" = stop ]; then
    if ! pid=$(cat "$pidfile"); then
        log warning "shepherdd was not running"
        exit 1
    fi
    log info "Stopping shepherdd"
    kill "$pid"
    i=0
    while [ "$(sleep 1; cat 2>/dev/null "/proc/$pid/comm")" = shepherdd ]; do
        if (( ( i += 1 ) >= 30 )); then
            log warning "giving up, shepherdd is still running, PID $pid"
            exit 1
        fi
    done
    rm -f "$pidfile"
    exit 0
fi

if (( $# == 1 )) && [ "$1" = factory_default ]; then
    log info "Stopping all services for factory default"
    rm -f "$rundir"/*.xml  # remove all daemons from the shepherd configuration
    shepherd-wait "$rundir" "$pidfile"

    log info "Clearing product persistence"
    rm -rfv /mnt/nv/product-persistence/*
    reset_timezone_to_default force
    sync

    log info "Rebooting"
    ResetUtil SYSTEM # Ask LPM to reboot (without using LPMService)
    sleep 30
    log warning "LPM didn't reset, asking Linux to reboot"
    reboot
    exit
fi

if (( $# == 1 )) && [ "$1" = enterlowpower ]; then
    log info "Disabling services to enter low power mode"
    cd "$rundir" || exit
    rm -f "${lowpower[@]}"

    # also kill vfe
    rm -f Shepherd-vfe.xml

    shepherd-wait "$rundir" "$pidfile"
    exit
fi

if (( $# == 1 )) && [ "$1" = exitlowpower ]; then
    log info "Enabling services to exit low power mode"
    cd "$rundir" || exit
    for i in "${lowpower[@]}"; do
        ln -sf "/opt/Bose/etc/$i"
    done

    # also restart vfe
    ln -s "/opt/Bose/etc/$productType/Shepherd-vfe.xml" "$rundir" || exit

    shepherd-wait "$rundir" "$pidfile"
    exit
fi

if (( $# >= 1 )) && [ "$1" = restart ]; then
    shift
    "$0" stop
    exec "$0" start "$@"
fi

if (( $# == 1 )) && [ "$1" = status ]; then
    # shepherdd will show the current status of the daemons
    # on the console and in logread.
    kill -ALRM "$(cat "$pidfile")"
    exit
fi

if (( $# == 1 )) && [ "$1" = snapshot ]; then
    # Ask shepherdd to save a snapshot of the
    # logread buffer in /mnt/nv/BoseLog/
    kill -USR1 "$(cat "$pidfile")"
    exit
fi

if (( $# == 1 )) && [ "$1" = enterswup ]; then
    log info "Disabling services to enter software update mode"

    # The daemons to stop before starting software upgrade.
    disable=(
        Shepherd-AudioPath.xml
        Shepherd-avs.xml
        Shepherd-Bluetooth.xml
        Shepherd-CLIServer.xml
        Shepherd-DataCollectionService.xml
        Shepherd-DemoController.xml
        Shepherd-FrontDoor.xml
        Shepherd-GalapagosClient.xml
        Shepherd-HTTPProxy.xml
        Shepherd-LPMService.xml
        Shepherd-NetManager.xml
        Shepherd-Passport.xml
        Shepherd-SASSController.xml
        Shepherd-vfe.xml
        Shepherd.xml
    )
    cd "$rundir" || exit
    rm -f "${disable[@]}"
    shepherd-wait "$rundir" "$pidfile"

    # Special handling for dyz-shm started by run_wpe.sh (yuck).
    killwait dyz-shm

    exit
fi

echo >&2 "\
usage: $0 start [args...]
   or: $0 stop
   or: $0 restart
   or: $0 status
   or: $0 factory_default
   or: $0 enterlowpower
   or: $0 exitlowpower
   or: $0 enterswup
   or: $0 snapshot         - save a snapshot of the logread buffer
"
exit 1
