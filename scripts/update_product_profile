#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
:Abstract: This python module is created to automate the process of profile entries for EC release builds.
					 For each release build there needs to be a corresponding entry in the profile database.
					 This python module takes in ProductType, Version and Enviroment, finds the product profile for 
					 the given productType and version as 'latest' and posts the result with given version.
					 Profile data in version  'latest' is used as a template.

:Organization:  BOSE CORPORATION
:Author:  Manasi Bhandare
:Date:  April 12, 2018
:Copyright: COPYRIGHT 2017 BOSE CORPORATION ALL RIGHTS RESERVED.
             This program may not be reproduced, in whole or in part in any
             form or any means whatsoever without the written permission of:
                 BOSE CORPORATION
                 The Mountain,
                 Framingham, MA 01701-9168
"""

import sys
import logging
import time
import argparse
import json

try:
	import requests
except ImportError:
	sys.exit("""You need requests!
							Please run 'pip install requests'""")

PRODUCT_PROFILE = "https://ingress-platform.live-aws-useast1.bose.io/dev/svc-iot-product-profile/%s/iot-product-profile-core"

def update_product_profile(product_type, version, environment):
	
	print "ENVIRONMENT: " + environment
	print "URL: " + PRODUCT_PROFILE % environment
	print "PRODUCT " + product_type
	print "VERSION " + version

	response = requests.get(PRODUCT_PROFILE % environment+"/profiles" + "?productType="+product_type + "&firmwareVersion=latest")
	if response.status_code != requests.codes.ok:
		print "ERROR: failed to get product profile with http code {} and message {}".format(response.status_code, response.reason)
		return
	
	profiles =  response.json()
	if 'results' not in profiles:
		print "ERROR: failed to find profile in profile response: {}".format(json.dumps(profiles))
		return
	
	profile = profiles['results'][0]
	if 'firmwareVersion' not in profile:
		print "ERROR: failed to find firmwareVersion in profile response: {}".format(json.dumps(profile))
		return

	profile['firmwareVersion'] = version
	response = requests.post(PRODUCT_PROFILE % environment+"/profiles", data=json.dumps(profile))
	if not response.ok:
		print "ERROR: failed to post product profile with http code {} and message {}".format(response.status_code, response.reason)
		return
	print "successfully posted data to productType {} and environment {}".format(product_type, environment)
	


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument("--p", help="Product type to bind to", required=True)
  parser.add_argument("--v", help="Release version to bind to", required=True)
  parser.add_argument("--e", help="Environmrnt to bind to", required=True)

  args = parser.parse_args()

  product_type = None
  version = None
  environment = None

  if (args.p):
    product_type = args.p

  if (args.v):
    version = args.v

  if (args.e):
    environment = args.e

  if product_type and version and environment:
    update_product_profile(product_type, version, environment.lower())
    print "Exited"
  else:
  	print "Please read help. Use -h"
main()
