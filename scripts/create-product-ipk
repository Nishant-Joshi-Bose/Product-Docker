#!/bin/bash
#
# Create an IPK file for installing SoundTouch with opkg.
#
# To install:
#   opkg install -d bose product.ipk
#
# The file /etc/opkg/opkg.conf should contain this line:
#   dest bose /opt/Bose
#
# To uninstall:
#   opkg remove SoundTouch
#
this=${0##*/} # this script's name

cfg=Release

tryhelp () {
    echo >&2 "Try '$this --help' for more information."
    exit 1
}
opts=$(getopt --name "$this" --shell sh \
    -o h \
    -l "help" \
    -- "$@") || tryhelp
eval set -- "$opts"
while :; do
    arg="$1"; shift
    case "$arg" in
	(--help | -h)
	    cat <<EOF
Usage: $this [options]

Create an IPK file for installing SoundTouch with opkg.

Options:
EOF
	    exit 0
	    ;;

	(--) break ;;
	(*)  echo >&2 "$this: internal error at '$arg'"; exit 1 ;;
    esac
done

if (( $# != 0 )); then
    echo >&2 "$this: unexpected argument '$1'"
    tryhelp
fi

function put_script {
    local file="$1"; shift
    cat "$@" >"$file" || exit
    chmod 755 "$file" || exit
}

here=$(cd "$(dirname $0)" && echo "$PWD") || exit
wspace=$(cd "$here/.." && echo "$PWD") || exit

riviera_hsp_images_dir=$(components get Riviera-HSP-Images installed_location) || exit
galapagosclient_dir=$(components get GalapagosClient-qc8017_32 installed_location) || exit
httpproxy_dir=$(components get HTTPProxy-qc8017_32 installed_location) || exit
shepherd_dir=$(components get Shepherd-qc8017_32 installed_location) || exit
boselibs_dir=$(components get BoseLibs-qc8017_32 installed_location) || exit
protobuf_dir=$(components get protobuf-qc8017_32 installed_location) || exit
audiopathservice64_dir=$(components get AudioPathService-qc8017_64 installed_location) || exit
audiopathproducts64_dir=$(components get AudioPathProducts-qc8017_64 installed_location) || exit
audiosource_bmx_dir=$(components get AudioSource-BMX-qc8017_32 installed_location) || exit
networkservice_dir=$(components get NetworkService-qc8017_32 installed_location) || exit
sass_dir=$(components get SASS-qc8017_64 installed_location) || exit
passport_dir=$(components get Passport-qc8017_32 installed_location) || exit
wifi_setup_webpage_dir=$(components get bose-web-riviera-ap-page installed_location) || exit
web_update_page_dir=$(components get bose-web-update-page installed_location) || exit
lpmservice_dir=$(components get RivieraLpmService-qc8017_32 installed_location) || exit
cli_dir=$(components get Cli-qc8017_32 installed_location) || exit
democontroller_dir=$(components get DemoController-qc8017_32 installed_location) || exit
webkit_dir=$(components get Webkit installed_location) || exit
productuiassets_dir=$(components get ProductUIAssets installed_location) || exit
frontdoorservice_dir=$(components get FrontDoorService-qc8017_32 installed_location) || exit
frontdoorutility_dir=$(components get FrontDoorUtility-qc8017_32 installed_location) || exit
datacollection_dir=$(components get DataCollectionClient-qc8017_32 installed_location) || exit
datacollectionservice_dir=$(components get DataCollectionService-qc8017_32 installed_location) || exit
bluetooth_dir=$(components get Bluetooth-qc8017_32 installed_location) || exit
bletofrontdoorservice_dir=$(components get BLEToFrontDoorService-qc8017_32 installed_location) || exit
lpmmfgtool_dir=$(components get LpmMfgTool installed_location) || exit
telemetry_dir=$(components get Telemetry-qc8017_32 installed_location) || exit
vpacontroller_dir=$(components get VPAController-qc8017_32 installed_location) || exit
cloudcontrolclient_dir=$(components get CloudControlClient-qc8017_32 installed_location) || exit
opensource_ptp_dir=$(components get opensource-OpenAvnuApple-qc8017_32 installed_location) || exit
opensource_avahi_dir=$(components get opensource-avahi-qc8017_32 installed_location) || exit

stage=$wspace/builds/$cfg/product-ipk-stage
rm -rf "$stage"
echo "Stage directory $stage"

output_dir=$wspace/builds/$cfg
opt_dir=$stage/Bose
mkdir -p "$output_dir" || exit
mkdir -p "$opt_dir/etc" || exit
mkdir -p "$opt_dir/bin" || exit
mkdir -p "$opt_dir/lib" || exit
mkdir -p "$opt_dir/etc/chimes" || exit
mkdir -p "$opt_dir/pts/info.d" || exit
mkdir -p "$opt_dir/pts/logs.d" || exit

rsync -a --exclude='*~' --exclude='*-README.txt' "$wspace/opt-bose-fs/." "$opt_dir/." || exit

components record "$stage" || exit

version_json=$wspace/builds/$cfg/qc8017_32/BoseVersion.json
cp "$version_json" "$opt_dir/etc" || exit
cp "$wspace/components.json" "$opt_dir/etc" || exit

cp "$wspace/builds/$cfg/qc8017_32/bin"/*[!~] "$opt_dir/bin" || exit

# ----------------------------------------------------------------------------
# Legacy SoundTouch-SDK stuff.  This will all go away soon.
soundtouch_sdk=$(components get SoundTouch-SDK-qc8017_32 installed_location) || exit
stfs=$soundtouch_sdk/fs
mkdir -p "$opt_dir/etc/multistring" || exit
cp "$stfs"/opt/Bose/*Strings.txt "$opt_dir/etc/multistring" || exit
cp "$stfs"/opt/Bose/CAPS "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/etc/bonjour.xml "$opt_dir/etc" || exit
cp "$stfs"/opt/Bose/etc/SoundTouchSdkPrivateCfg.xml "$opt_dir/etc" || exit
cp "$stfs"/opt/Bose/etc/CapsMultiroomVersions.json "$opt_dir/etc" || exit
cp "$stfs"/opt/Bose/IoT "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/AirPlay2 "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/Amazon "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/AudioNotification "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/Deezer "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/IHeart "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/SiriusXM "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/Spotify "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/Upnp "$opt_dir/bin" || exit
cp -a "$stfs"/opt/Bose/Xml "$opt_dir/bin" || exit
cp -a "$stfs"/opt/Bose/lib "$opt_dir" || exit
cp -a "$stfs"/var/lib/iot "$opt_dir" || exit
# ----------------------------------------------------------------------------

cp "$boselibs_dir"/services.json "$opt_dir/etc" || exit
cp -a "$boselibs_dir/lib" "$opt_dir" || exit
cp -a "$protobuf_dir/lib" "$opt_dir" || exit
cp "$wspace/PtsServer/pts-handler" "$opt_dir/etc" || exit
cp "$lpmmfgtool_dir/LpmMfgTool" "$opt_dir/bin" || exit

t=$(date +%s)
put_script "$opt_dir/bin/set-default-time" <<EOF
#!/bin/bash
if (( \$(date +%s) < $t )); then
    logger -s -t set-default-time Using default time $(date -u -d@$t)
    date -s@$t
fi
EOF

# Generate the Open Source license list from the Riviera-HSP-licenses.tar.gz file
# Note that for PGC we need to add the -soundbar option when invoking the Perl script
distro=$(lsb_release -is)
if [ "$distro" = "Ubuntu" ]; then
    if dpkg -l libfile-slurp-perl >& /dev/null && dpkg -l libdigest-md5-file-perl >& /dev/null; then
        "$wspace/OpenSourceLicensing/riviera-licenses" -eddie "$riviera_hsp_images_dir/Riviera-HSP-licenses.tar.gz" "$opt_dir/html/licenses" || exit
    else
       echo >&2 "$(basename $0): Error: please run 'sudo apt install libfile-slurp-perl libdigest-md5-file-perl' to support open source license generation"
       exit 1
    fi
elif [ "$distro" = "CentOS" ]; then
    if rpm -q perl-File-Slurp >& /dev/null && rpm -q  perl-Digest-MD5-File >& /dev/null; then
        "$wspace/OpenSourceLicensing/riviera-licenses" -eddie "$riviera_hsp_images_dir/Riviera-HSP-licenses.tar.gz" "$opt_dir/html/licenses" || exit
    else
       echo >&2 "$(basename $0): Error: please run 'sudo yum install perl-File-Slurp perl-Digest-MD5-File' to support open source license generation"
       exit 1
    fi
else
    echo >&2 "$(basename $0): $distro is not a supported distribution"
    exit 1
fi

# Copy public keys in FS for development key. EC will take care of generation for Production
secure_dir=$opt_dir/etc/secure/
if [ -e "$secure_dir" ]; then
    chmod -R 755 "$secure_dir" || exit
fi

mkdir -p "$secure_dir" || exit
cp -r "$wspace/keys/development/publicKeys/" "$secure_dir" || exit
cp -r "$wspace/keys/development/CACerts/" "$secure_dir" || exit
find "$secure_dir" -type d -exec chmod 550 {} \; || exit
find "$secure_dir" -type f -exec chmod 440 {} \; || exit

# On exit, make this dir writeable again to avoid spurious error messages
# from `make clean` and such.
trap 'chmod -R +w "$secure_dir"' EXIT

# ----------------------------------------------------------------------------
# Allow components to add to the staging area.

"$audiopathservice64_dir/stage" --product=eddie "$opt_dir" || exit
"$audiopathservice64_dir/stage" --product=eddie --only-vfe "$opt_dir" || exit
"$audiopathproducts64_dir/stage" --product=eddie "$opt_dir" || exit
"$audiopathproducts64_dir/stage" --product=eddie --only-vfe "$opt_dir" || exit
"$networkservice_dir/stage" "$opt_dir" || exit
"$sass_dir/stage" "$opt_dir" || exit
"$passport_dir/stage" "$opt_dir" || exit
"$shepherd_dir/stage" "$opt_dir" || exit
"$wifi_setup_webpage_dir/stage" "$opt_dir" || exit
"$lpmservice_dir/stage" "$opt_dir" || exit
"$cli_dir/stage" "$opt_dir" || exit
"$democontroller_dir/stage" "$opt_dir" || exit
"$webkit_dir/stage" "$opt_dir" || exit
"$productuiassets_dir/stage" --chimes=HomeSpeaker --type=flac "$opt_dir" || exit
"$frontdoorservice_dir/stage" "$opt_dir" || exit
"$frontdoorutility_dir/stage" "$opt_dir" || exit
"$galapagosclient_dir/stage" "$opt_dir" || exit
"$httpproxy_dir/stage" "$opt_dir" || exit
"$datacollection_dir/stage" "$opt_dir" || exit
"$datacollectionservice_dir/stage" "$opt_dir" || exit
"$bluetooth_dir/stage" --product=eddie --btout="$(jq -r .bluetooth_out "$wspace/features.json")" "$opt_dir" || exit
"$bletofrontdoorservice_dir/stage" "$opt_dir" || exit
"$web_update_page_dir/stage" "$opt_dir/update/html" || exit
"$telemetry_dir/stage" "$opt_dir" || exit
"$cloudcontrolclient_dir/stage" "$opt_dir" || exit
"$audiosource_bmx_dir/stage" "$opt_dir" || exit
"$vpacontroller_dir/stage" "$opt_dir" || exit
"$opensource_ptp_dir/Bose/stage" "$opt_dir" || exit
"$opensource_avahi_dir/Bose/stage" "$opt_dir" || exit

# ----------------------------------------------------------------------------

cd "$opt_dir"/lib || exit
rm -f *.a

"$wspace"/PtsServer/make-static-content-map / /opt/Bose/html $(
  # index.html has special handling in the pts-handler script, so don't
  # include it in the static content map.
  cd "$opt_dir"/html && find ! -name index.html ! -name '*~' -type f
) > "$opt_dir"/etc/static-content-map.txt || exit

PackageName=SoundTouch

package_version=$(make-version-string "$version_json" "{major}.{minor}.{patch}.{build_number}+{abbrev_commit}") || exit
echo "Package version \"$package_version\""
"$wspace"/scripts/validate-version "$package_version" || exit

cat >"$stage/control" <<EOF || exit
Package: $PackageName
Version: $package_version
Description: SoundTouch version $package_version
 The SoundTouch app
Section: soundtouch
Priority: optional
License: Commercial
Architecture: armv7a-vfp-neon
OE: soundtouch
Homepage: http://www.bose.com/
#Depends: libc6 (>= 2.21)
Source: None
EOF

# Installer scripts
put_script "$stage/postinst" <<EOF
#!/bin/sh
echo "SoundTouch postinst"
if [ -x /mnt/nv/postinst ]; then
    /mnt/nv/postinst
fi

# make sure the public key file has read only permission
find /opt/Bose/etc/secure/ -type d -exec /bin/busybox chmod 550 {} \;
find /opt/Bose/etc/secure/ -type f -exec /bin/busybox chmod 440 {} \;

# copy version so it can be used while system is in Restore mode
# Ignore error if any as exiting would fail ipk installation completely
cp /opt/Bose/etc/BoseVersion.json /cache/OriginalFSVersion.json

# Set Progress End
# CASTLE-14239: Currently, though not required by IPK itself
#   every IPK is doing full system reset. This is required to clear
#   LPM install animation - if LPM itself does not update.
#   This should be considered as workaround as any IPK should be able
#   to decide its own reboot requirements
/opt/Bose/bin/ProgressReport -n $PackageName -e 0 -i 0 -r LPM -b 0 -p 100
exit 0
EOF

put_script "$stage/postrm" <<EOF
#!/bin/sh
echo "SoundTouch postrm"
exit 0
EOF

riviera_hsp_ver=$(components get Riviera-HSP-Images selected_version) || exit
riviera_hsp_ver=${riviera_hsp_ver##*/}
put_script "$stage/preinst" <<EOF
#!/bin/sh
echo "SoundTouch preinst"
b="$riviera_hsp_ver"
i="\$(awk '\$1 == "HSP" {print \$2}' /etc/riviera-version)"
if [ "\$b" = "\$i" ]; then
    echo "Riviera-HSP: \$i"
else
    echo "Built for Riviera-HSP: \$b"
    echo "Installed Riviera-HSP: \$i"
fi
# Start Progress
if [ -f /opt/Bose/bin/ProgressReport ]; then
    /opt/Bose/bin/ProgressReport -n $PackageName -e 0 -i 0 -r LPM -b 0 -p 1
fi

exit 0
EOF

put_script "$stage/prerm" <<EOF
#!/bin/sh
echo "SoundTouch prerm"
exit 0
EOF

# -----------------------------------------------------------------------------
# Strip symbols from the executables.
# Save a copy of the unstripped executables for later debugging.

unstripped_dir=$output_dir/product-unstripped
unstripped_tar=$unstripped_dir.tar.gz
rm -rf "$unstripped_dir" "$unstripped_tar"
"$here/strip-symbols" --save="$output_dir/product-unstripped" "$stage"/Bose/{lib,bin}/* || exit
tar --owner=0 --group=0 -czf "$unstripped_tar" \
    -C "$(dirname "$unstripped_dir")" \
    "$(basename "$unstripped_dir")" \
    || exit
echo "Wrote $unstripped_tar"
rm -rf "$unstripped_dir"

# -----------------------------------------------------------------------------
# Stage area is complete.  Package it into a *.ipk file.

cd "$stage" || exit
tar --owner=0 --group=0 -czf control.tar.gz control pre* post* || exit
tar --owner=0 --group=0 -czf data.tar.gz -C "$opt_dir" . || exit
echo "2.0" > debian-binary || exit

ipk=$output_dir/product.ipk
rm -f "$ipk"
ar -crf "$ipk" control.tar.gz data.tar.gz debian-binary || exit
echo "Created $ipk"
