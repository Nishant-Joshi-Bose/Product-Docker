#!/bin/bash
#
# Create a BLOB to be used to update the LPM and its peripherals.
#
#
if (( $# != 2 )); then
    echo >&2 "usage: $0 builds-dir build-type"
    exit 1
fi
builds_dir=$1; shift
build_type=$1; shift

wspace=$(cd "$(dirname $0)" && echo "$PWD")/.. || exit

echo "LPM Package builds_dir = $builds_dir"
echo "LPM Package build_type = $build_type"
echo "LPM Package wspace     = $wspace"

release_xml=$wspace/LpmManifestFiles/release_lpm_package.xml
nightly_xml=$wspace/LpmManifestFiles/nightly_lpm_package.xml
continuous_xml=$wspace/LpmManifestFiles/continuous_lpm_package.xml

if [ ! -z $CONAN_BUILD ]; then
lightBarAnimationTool_dir=$(conan-get-install CastleLedAnimationTool qc8017_32 location) ||exit
else
lightBarAnimationTool_dir=$(components get LedAnimationTool-qc8017_32 installed_location) ||exit
fi
riviera_lpm_tools_dir=$(components get RivieraLPM-Tools installed_location) || exit

# For release builds, we want to the timestamp of the BLOB to reflect that last time the manifest XML file was modified in git. This
# allows for the BLOB version (which includes a timestamp) to stay static across builds where the contents of the BLOB does not change.
# The main draw back is the case where someone changes the the release manifest XML locally and re-builds. In this case, since the changes
# to the manifest file have not been committed in git the timestamp will remain the same instead of changing. To work around this,
# developers will need to remember to bump the version of the BLOB (minor or major revision) in order to generate a BLOB with a different version.
#
# Nightly builds and continuous builds will use the current time during as the timestamp.
#
echo "Running $riviera_lpm_tools_dir/blob/blob_utility.py"
# Generate Lightbar animation db for SoundBar product
mkdir -p $builds_dir/lpm-updater-ipk-stage/lightbar_db/SoundBar
$lightBarAnimationTool_dir/generate_animation_db.py --config="$wspace"/lightBar/Configuration-SoundBar.json --asset="$wspace"/lightBar/SoundBar --manifest="$wspace"/lightBar/SoundBar/output/AnimationManifest.json --odir=$builds_dir/lpm-updater-ipk-stage/lightbar_db/SoundBar  || exit

if [ "$build_type" == "Release" ]; then
    epoch_time=$( git log -1 --format="%ad" --date=raw  -- $release_xml | awk '{print $1;}' ) || exit
    if [ -z $epoch_time ]; then
        echo "WARNING: Could not find $release_xml file history in git log. Using current time for release timestamp"
        epoch_time=$( date +%s )
    fi
    # Apparently we don't use the linux epoch directly for timestamps. We use the minutes since January 1, 2013 12 AM EST...
    adjusted_epoch_time=$(( ( $epoch_time - 1357016400 ) / 60 )) || exit
    cp $release_xml $builds_dir/lpm_package.xml || exit
    python2.7 $riviera_lpm_tools_dir/blob/blob_utility.py --pack $release_xml $builds_dir --build_type $build_type --timestamp $adjusted_epoch_time || exit
elif [ "$build_type" == "Nightly" ]; then
    cp $nightly_xml $builds_dir/lpm_package.xml || exit
    python2.7 $riviera_lpm_tools_dir/blob/blob_utility.py --pack $nightly_xml $builds_dir --build_type $build_type || exit
elif [ "$build_type" == "Continuous" ]; then
    cp $continuous_xml $builds_dir/lpm_package.xml || exit
    python2.7 $riviera_lpm_tools_dir/blob/blob_utility.py --pack $continuous_xml $builds_dir --build_type $build_type || exit
else
    echo >&2 "$0: Error: Please use a build type of Release, Continuous, or Nightly"
    exit 1
fi
