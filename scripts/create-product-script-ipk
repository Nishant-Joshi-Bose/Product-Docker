#!/bin/bash
#
# Create an IPK file to install /opt/Bose/etc/product script.
#
# To install:
#   opkg install product-script.ipk
#
# To uninstall:
#   opkg remove product-script.ipk
#
this=${0##*/} # this script's name

cfg=Release

tryhelp () {
    echo >&2 "Try '$this --help' for more information."
    exit 1
}
opts=$(getopt --name "$this" --shell sh \
    -o uh \
    -l "help" \
    -- "$@") || tryhelp
eval set -- "$opts"
while :; do
    arg="$1"; shift
    case "$arg" in
	(--help | -h)
	    cat <<EOF
Usage: $this [options]

Create an IPK file to install product script.

Options:
EOF
	    exit 0
	    ;;

	(--) break ;;
	(*)  echo >&2 "$this: internal error at '$arg'"; exit 1 ;;
    esac
done

if (( $# != 0 )); then
    echo >&2 "$this: unexpected argument '$1'"
    tryhelp
fi

function put_script {
    local file="$1"; shift
    cat "$@" >"$file" || exit
    chmod 755 "$file" || exit
}

here=$(cd "$(dirname $0)" && echo "$PWD") || exit
wspace=$(cd "$here/.." && echo "$PWD") || exit

stage=$wspace/builds/$cfg/product-script-ipk-stage
rm -rf "$stage"
echo "Stage directory $stage"

output_dir=$wspace/builds/$cfg
opt_dir=$stage/Bose
mkdir -p "$output_dir" "$opt_dir/etc" || exit
# copy minimal image tar to /opt/Bose
cp "$wspace/opt-bose-fs/etc/product"  "$opt_dir/etc/product" || exit
cp "$wspace/opt-bose-fs/.bash_profile" "$opt_dir/.bash_profile" || exit
cp "$wspace/opt-bose-fs/.bashrc" "$opt_dir/.bashrc" || exit

PackageName=product-script

version_json=$wspace/builds/$cfg/qc8017_32/BoseVersion.json
package_version=$(make-version-string "$version_json" "{major}.{minor}.{patch}.{build_number}+{abbrev_commit}") || exit
echo "Package version \"$package_version\""

cat >"$stage/control" <<EOF || exit
Package: $PackageName
Version: $package_version
Description: SoundTouch product script $package_version
Section: soundtouch
Priority: optional
License: Commercial
Architecture: armv7a-vfp-neon
OE: soundtouch
Homepage: http://www.bose.com/
#Depends: libc6 (>= 2.21)
Source: None
EOF

# Installer scripts
put_script "$stage/postinst" <<EOF
#!/bin/sh
echo "Product script postinst"
# Set Progress End
/opt/Bose/bin/ProgressReport -n $PackageName -e 0 -i 0 -r LPM -b 0 -p 100

exit 0
EOF

put_script "$stage/postrm" <<EOF
#!/bin/sh
echo "Product script postrm"
EOF

put_script "$stage/preinst" <<EOF
#!/bin/sh
echo "Product script preinst"
# Set Progress Start
/opt/Bose/bin/ProgressReport -n $PackageName -e 0 -i 0 -r LPM -b 0 -p 1
EOF

put_script "$stage/prerm" <<EOF
#!/bin/sh
echo "Product script prerm"
EOF

# -----------------------------------------------------------------------------
# Stage area is complete.  Package it into a *.ipk file.

cd "$stage" || exit
tar --owner=0 --group=0 -czf control.tar.gz control pre* post* || exit
tar --owner=0 --group=0 -czf data.tar.gz -C "$opt_dir" . || exit
echo "2.0" > debian-binary || exit

ipk=$output_dir/product-script.ipk
rm -f "$ipk"
ar -crf "$ipk" control.tar.gz data.tar.gz debian-binary || exit
echo "Created $ipk"
