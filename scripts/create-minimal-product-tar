#!/bin/bash
#
# Create minimal image for product to update in recovery mode.
# This minimal tar file will be copied in to /cache partition and will be used in recovery mode.
#
this=${0##*/} # this script's name

cfg=Release
if (( $# != 1 )); then
    echo >&2 "usage: $0 product-type"
    exit 1
fi

function put_script {
    local file="$1"; shift
    cat "$@" >"$file" || exit
    chmod 755 "$file" || exit
}
product_type=$1; shift

here=$(cd "$(dirname $0)" && echo "$PWD") || exit
wspace=$(cd "$here/.." && echo "$PWD") || exit

riviera_hsp_images_dir=$(components get Riviera-HSP-Images installed_location) || exit
riviera_toolchain_dir=$(components get Riviera-Toolchain installed_location) || exit
galapagosclient_dir=$(components get GalapagosClient-qc8017_32 installed_location) || exit
httpproxy_dir=$(components get HTTPProxy-qc8017_32 installed_location) || exit
shepherd_dir=$(components get Shepherd-qc8017_32 installed_location) || exit
boselibs_dir=$(components get BoseLibs-qc8017_32 installed_location) || exit
protobuf_dir=$(components get protobuf-qc8017_32 installed_location) || exit
swup_dir=$(components get SoftwareUpdate-qc8017_32 installed_location) || exit
product_startup_dir=$(components get product-startup installed_location) || exit
audiopath64_dir=$(components get AudioPathService-qc8017_64 installed_location) || exit
audiopathproduct64_dir=$(components get AudioPathProducts-qc8017_64 installed_location) || exit
castlenetworkservice_dir=$(components get NetworkService-qc8017_32 installed_location) || exit
castlepassport_dir=$(components get Passport-qc8017_32 installed_location) || exit
web_update_page_dir=$(components get bose-web-update-page installed_location) || exit
wifi_setup_webpage_dir=$(components get bose-web-riviera-ap-page installed_location) || exit
lpmservice_dir=$(components get RivieraLpmService-qc8017_32 installed_location) || exit
cli_dir=$(components get Cli-qc8017_32 installed_location) || exit
frontdoor_dir=$(components get FrontDoorService-qc8017_32 installed_location) || exit
boseopkg_dir=$(components get opensource-opkg-qc8017_32 installed_location) || exit

sysroot=$riviera_toolchain_dir/sdk/sysroots/$(uname -m)-oesdk-linux || exit
tool_prefix=$sysroot/usr/bin/arm-oemllib32-linux/arm-oemllib32-linux-
tool64_prefix=$sysroot/usr/bin/aarch64-oe-linux/aarch64-oe-linux-

destination=$wspace/builds/$cfg
stage=$destination/minimal-product-stage
rm -rf "$stage" || exit
echo "Stage directory $stage"

output_dir=$wspace/builds/$cfg
opt_dir=$stage/Bose
mkdir -p "$output_dir" "$opt_dir/etc" "$opt_dir/bin" "$opt_dir/lib" "$opt_dir/etc/chimes" || exit

rsync -a --exclude='*~' --exclude='*-README.txt' "$wspace/opt-bose-fs/." "$opt_dir/." || exit

components record "$stage" || exit

# Add a ParentBoseVersion.json file that contains the version of the release
# that includes this minimal image.
echo "Creating ParentBoseVersion.json"
gen-version-files $wspace/version.txt $opt_dir/etc || exit
mv $opt_dir/etc/BoseVersion.json $opt_dir/etc/ParentBoseVersion.json || exit

# Generate a version.txt file hardcoded to 0.1.0 to force
# a system running minimal image to download of all components.
version_files_dir=$wspace/builds/$cfg/qc8017_32
echo "0.1.0" > $version_files_dir/version.txt || exit
gen-version-files $version_files_dir/version.txt $opt_dir/etc || exit
rm $version_files_dir/version.txt || exit

cp "$wspace/builds/$cfg/qc8017_32/bin"/*[!~] "$opt_dir/bin" || exit

# ----------------------------------------------------------------------------
# Legacy SoundTouch-SDK stuff.  This will all go away soon.
soundtouch_sdk=$(components get SoundTouch-SDK-qc8017_32 installed_location) || exit
stfs=$soundtouch_sdk/fs
cp "$stfs"/opt/Bose/CAPS "$opt_dir/bin" || exit
cp "$stfs"/opt/Bose/etc/bonjour.xml "$opt_dir/etc" || exit
cp "$stfs"/opt/Bose/etc/SoundTouchSdkPrivateCfg.xml "$opt_dir/etc" || exit
cp -a "$stfs"/opt/Bose/Xml "$opt_dir/bin" || exit
cp -a "$stfs"/opt/Bose/lib "$opt_dir" || exit
# ----------------------------------------------------------------------------

cp "$boselibs_dir"/services.json "$opt_dir/etc" || exit
cp -a "$boselibs_dir/lib" "$opt_dir" || exit
cp -a "$protobuf_dir/lib" "$opt_dir" || exit
cp "$wspace/PtsServer/pts-handler" "$opt_dir/etc" || exit
rm -f "$opt_dir"/lib/*.a

t=$(date +%s)
put_script "$opt_dir/bin/set-default-time" <<EOF
#!/bin/bash
if (( \$(date +%s) < $t )); then
    logger -s -t set-default-time Using default time $(date -u -d@$t)
    date -s@$t
fi
EOF

# Copy public keys in FS for development key.
# EC will take care of generation for production.
secure_dir=$opt_dir/etc/secure
if [ -e "$secure_dir" ]; then
    chmod -R 755 "$secure_dir" || exit
fi

mkdir -p "$secure_dir" || exit
cp -r "$wspace/keys/development/publicKeys/" "$secure_dir" || exit
cp -r "$wspace/keys/development/CACerts/" "$secure_dir" || exit
find "$secure_dir" -type d -exec chmod 550 {} \; || exit
find "$secure_dir" -type f -exec chmod 440 {} \; || exit

# On exit, make this dir writeable again to avoid spurious error messages
# from `make clean` and such.
trap 'chmod -R +w "$secure_dir"' EXIT

cp "$wspace/builds/$cfg/qc8017_32/KeyConfiguration.json" "$opt_dir/etc" || exit
cp "$wspace/builds/$cfg/qc8017_32/BlastConfiguration.json" "$opt_dir/etc" || exit

# ----------------------------------------------------------------------------
# Allow components to add to the staging area.

"$swup_dir/stage" "$opt_dir" "$riviera_toolchain_dir" || exit
"$boseopkg_dir/stage" "$opt_dir"/update/opkg/ || exit
"$audiopath64_dir/stage" --product=$product_type "$opt_dir" || exit
"$audiopathproduct64_dir/stage" --product=$product_type "$opt_dir" || exit
"$castlenetworkservice_dir/stage" "$opt_dir" || exit
"$castlepassport_dir/stage" "$opt_dir" || exit
"$shepherd_dir/stage" "$opt_dir" || exit
"$lpmservice_dir/stage" "$opt_dir" || exit
"$cli_dir/stage" "$opt_dir" || exit
"$frontdoor_dir/stage" "$opt_dir" || exit
"$galapagosclient_dir/stage" "$opt_dir" || exit
"$httpproxy_dir/stage" "$opt_dir" || exit
"$web_update_page_dir/stage" "$opt_dir/update/html" || exit
"$wifi_setup_webpage_dir/stage" "$opt_dir" || exit
"$product_startup_dir/stage" "$opt_dir" || exit

# ----------------------------------------------------------------------------

cd "$opt_dir"/lib || exit
rm -f *.a

"$wspace"/PtsServer/make-static-content-map / /opt/Bose/html $(
  # index.html has special handling in the pts-handler script, so don't
  # include it in the static content map.
  cd "$opt_dir"/html && find ! -name index.html ! -name '*~' -type f
) > "$opt_dir"/etc/static-content-map.txt || exit

for i in "$stage"/Bose/{lib,bin}/*; do
    type=$(file --brief "$i") || exit
    case "$type" in
        (*", stripped")
            echo >&2 "$this: (warning) No debug symbols: $i"
            ;;
        (*", ARM aarch64, "*", not stripped" | *" 64-bit "*", not stripped")
            #cp "$i" "$unstripped_dir" || exit
            # `strip` fails without an error message if the file is empty
            if ! "${tool64_prefix}strip" "$i"; then
                echo >&2 "$this: Failed to strip $i"
                exit 1
            fi
            ;;
        (*", not stripped")
            #cp "$i" "$unstripped_dir" || exit
            # `strip` fails without an error message if the file is empty
            if ! "${tool_prefix}strip" "$i"; then
                echo >&2 "$this: Failed to strip $i"
                exit 1
            fi
            ;;
    esac
done

cd  || exit

# -----------------------------------------------------------------------------
# Stage area is complete.  Package it into a tar file.

minimal_tar=$destination/"Bose_minimal.tar.gz"
cd "$stage" || exit
tar --owner=0 --group=0 -czf $minimal_tar Bose/ || exit

echo "Created $minimal_tar"
