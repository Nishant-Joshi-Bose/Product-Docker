ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_initVar
  18              		.bss
  19              		.type	PWM_initVar, %object
  20              		.size	PWM_initVar, 1
  21              	PWM_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_Init
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_Init, %function
  29              	PWM_Init:
  30              	.LFB0:
  31              		.file 1 "Generated_Source\\PSoC4\\PWM.c"
   1:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/PWM.c **** * File Name: PWM.c
   3:Generated_Source\PSoC4/PWM.c **** * Version 2.0
   4:Generated_Source\PSoC4/PWM.c **** *
   5:Generated_Source\PSoC4/PWM.c **** * Description:
   6:Generated_Source\PSoC4/PWM.c **** *  This file provides the source code to the API for the PWM
   7:Generated_Source\PSoC4/PWM.c **** *  component
   8:Generated_Source\PSoC4/PWM.c **** *
   9:Generated_Source\PSoC4/PWM.c **** * Note:
  10:Generated_Source\PSoC4/PWM.c **** *  None
  11:Generated_Source\PSoC4/PWM.c **** *
  12:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
  13:Generated_Source\PSoC4/PWM.c **** * Copyright 2013-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/PWM.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/PWM.c **** 
  19:Generated_Source\PSoC4/PWM.c **** #include "PWM.h"
  20:Generated_Source\PSoC4/PWM.c **** 
  21:Generated_Source\PSoC4/PWM.c **** uint8 PWM_initVar = 0u;
  22:Generated_Source\PSoC4/PWM.c **** 
  23:Generated_Source\PSoC4/PWM.c **** 
  24:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Init
  26:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 2


  27:Generated_Source\PSoC4/PWM.c **** *
  28:Generated_Source\PSoC4/PWM.c **** * Summary:
  29:Generated_Source\PSoC4/PWM.c **** *  Initialize/Restore default PWM configuration.
  30:Generated_Source\PSoC4/PWM.c **** *
  31:Generated_Source\PSoC4/PWM.c **** * Parameters:
  32:Generated_Source\PSoC4/PWM.c **** *  None
  33:Generated_Source\PSoC4/PWM.c **** *
  34:Generated_Source\PSoC4/PWM.c **** * Return:
  35:Generated_Source\PSoC4/PWM.c **** *  None
  36:Generated_Source\PSoC4/PWM.c **** *
  37:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  38:Generated_Source\PSoC4/PWM.c **** void PWM_Init(void)
  39:Generated_Source\PSoC4/PWM.c **** {
  32              		.loc 1 39 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40:Generated_Source\PSoC4/PWM.c **** 
  41:Generated_Source\PSoC4/PWM.c ****     /* Set values from customizer to CTRL */
  42:Generated_Source\PSoC4/PWM.c ****     #if (PWM__QUAD == PWM_CONFIG)
  43:Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL_REG = PWM_CTRL_QUAD_BASE_CONFIG;
  44:Generated_Source\PSoC4/PWM.c ****         
  45:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL1 */
  46:Generated_Source\PSoC4/PWM.c ****         PWM_TRIG_CONTROL1_REG  = PWM_QUAD_SIGNALS_MODES;
  47:Generated_Source\PSoC4/PWM.c **** 
  48:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to INTR */
  49:Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_QUAD_INTERRUPT_MASK);
  50:Generated_Source\PSoC4/PWM.c ****         
  51:Generated_Source\PSoC4/PWM.c ****          /* Set other values */
  52:Generated_Source\PSoC4/PWM.c ****         PWM_SetCounterMode(PWM_COUNT_DOWN);
  53:Generated_Source\PSoC4/PWM.c ****         PWM_WritePeriod(PWM_QUAD_PERIOD_INIT_VALUE);
  54:Generated_Source\PSoC4/PWM.c ****         PWM_WriteCounter(PWM_QUAD_PERIOD_INIT_VALUE);
  55:Generated_Source\PSoC4/PWM.c ****     #endif  /* (PWM__QUAD == PWM_CONFIG) */
  56:Generated_Source\PSoC4/PWM.c **** 
  57:Generated_Source\PSoC4/PWM.c ****     #if (PWM__TIMER == PWM_CONFIG)
  58:Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL_REG = PWM_CTRL_TIMER_BASE_CONFIG;
  59:Generated_Source\PSoC4/PWM.c ****         
  60:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL1 */
  61:Generated_Source\PSoC4/PWM.c ****         PWM_TRIG_CONTROL1_REG  = PWM_TIMER_SIGNALS_MODES;
  62:Generated_Source\PSoC4/PWM.c ****     
  63:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to INTR */
  64:Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_TC_INTERRUPT_MASK);
  65:Generated_Source\PSoC4/PWM.c ****         
  66:Generated_Source\PSoC4/PWM.c ****         /* Set other values from customizer */
  67:Generated_Source\PSoC4/PWM.c ****         PWM_WritePeriod(PWM_TC_PERIOD_VALUE );
  68:Generated_Source\PSoC4/PWM.c **** 
  69:Generated_Source\PSoC4/PWM.c ****         #if (PWM__COMPARE == PWM_TC_COMP_CAP_MODE)
  70:Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare(PWM_TC_COMPARE_VALUE);
  71:Generated_Source\PSoC4/PWM.c **** 
  72:Generated_Source\PSoC4/PWM.c ****             #if (1u == PWM_TC_COMPARE_SWAP)
  73:Generated_Source\PSoC4/PWM.c ****                 PWM_SetCompareSwap(1u);
  74:Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCompareBuf(PWM_TC_COMPARE_BUF_VALUE);
  75:Generated_Source\PSoC4/PWM.c ****             #endif  /* (1u == PWM_TC_COMPARE_SWAP) */
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 3


  76:Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__COMPARE == PWM_TC_COMP_CAP_MODE) */
  77:Generated_Source\PSoC4/PWM.c **** 
  78:Generated_Source\PSoC4/PWM.c ****         /* Initialize counter value */
  79:Generated_Source\PSoC4/PWM.c ****         #if (PWM_CY_TCPWM_V2 && PWM_TIMER_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000)
  80:Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(1u);
  81:Generated_Source\PSoC4/PWM.c ****         #elif(PWM__COUNT_DOWN == PWM_TC_COUNTER_MODE)
  82:Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(PWM_TC_PERIOD_VALUE);
  83:Generated_Source\PSoC4/PWM.c ****         #else
  84:Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(0u);
  85:Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_CY_TCPWM_V2 && PWM_TIMER_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000) */
  86:Generated_Source\PSoC4/PWM.c ****     #endif  /* (PWM__TIMER == PWM_CONFIG) */
  87:Generated_Source\PSoC4/PWM.c **** 
  88:Generated_Source\PSoC4/PWM.c ****     #if (PWM__PWM_SEL == PWM_CONFIG)
  89:Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL_REG = PWM_CTRL_PWM_BASE_CONFIG;
  40              		.loc 1 89 0
  41 0004 114B     		ldr	r3, .L2
  42 0006 8422     		mov	r2, #132
  43 0008 D204     		lsl	r2, r2, #19
  44 000a 1A60     		str	r2, [r3]
  90:Generated_Source\PSoC4/PWM.c **** 
  91:Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM_PR == PWM_PWM_MODE)
  92:Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_RUN_MODE;
  93:Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(PWM_PWM_PR_INIT_VALUE);
  94:Generated_Source\PSoC4/PWM.c ****         #else
  95:Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_ALIGN | PWM_CTRL_PWM_KILL_EVENT;
  45              		.loc 1 95 0
  46 000c 0F4B     		ldr	r3, .L2
  47 000e 0F4A     		ldr	r2, .L2
  48 0010 1268     		ldr	r2, [r2]
  49 0012 1A60     		str	r2, [r3]
  96:Generated_Source\PSoC4/PWM.c ****             
  97:Generated_Source\PSoC4/PWM.c ****             /* Initialize counter value */
  98:Generated_Source\PSoC4/PWM.c ****             #if (PWM_CY_TCPWM_V2 && PWM_PWM_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000)
  99:Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCounter(1u);
 100:Generated_Source\PSoC4/PWM.c ****             #elif (PWM__RIGHT == PWM_PWM_ALIGN)
 101:Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCounter(PWM_PWM_PERIOD_VALUE);
 102:Generated_Source\PSoC4/PWM.c ****             #else 
 103:Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCounter(0u);
  50              		.loc 1 103 0
  51 0014 0020     		mov	r0, #0
  52 0016 FFF7FEFF 		bl	PWM_WriteCounter
 104:Generated_Source\PSoC4/PWM.c ****             #endif  /* (PWM_CY_TCPWM_V2 && PWM_PWM_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000) */
 105:Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM_PR == PWM_PWM_MODE) */
 106:Generated_Source\PSoC4/PWM.c **** 
 107:Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM_DT == PWM_PWM_MODE)
 108:Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_DEAD_TIME_CYCLE;
 109:Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM_DT == PWM_PWM_MODE) */
 110:Generated_Source\PSoC4/PWM.c **** 
 111:Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM == PWM_PWM_MODE)
 112:Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_PRESCALER;
  53              		.loc 1 112 0
  54 001a 0C4B     		ldr	r3, .L2
  55 001c 0B4A     		ldr	r2, .L2
  56 001e 1268     		ldr	r2, [r2]
  57 0020 1A60     		str	r2, [r3]
 113:Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM == PWM_PWM_MODE) */
 114:Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 4


 115:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL1 */
 116:Generated_Source\PSoC4/PWM.c ****         PWM_TRIG_CONTROL1_REG  = PWM_PWM_SIGNALS_MODES;
  58              		.loc 1 116 0
  59 0022 0B4B     		ldr	r3, .L2+4
  60 0024 C322     		mov	r2, #195
  61 0026 9200     		lsl	r2, r2, #2
  62 0028 1A60     		str	r2, [r3]
 117:Generated_Source\PSoC4/PWM.c ****     
 118:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to INTR */
 119:Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_PWM_INTERRUPT_MASK);
  63              		.loc 1 119 0
  64 002a 0020     		mov	r0, #0
  65 002c FFF7FEFF 		bl	PWM_SetInterruptMode
 120:Generated_Source\PSoC4/PWM.c **** 
 121:Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL2 */
 122:Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM_PR == PWM_PWM_MODE)
 123:Generated_Source\PSoC4/PWM.c ****             PWM_TRIG_CONTROL2_REG =
 124:Generated_Source\PSoC4/PWM.c ****                     (PWM_CC_MATCH_NO_CHANGE    |
 125:Generated_Source\PSoC4/PWM.c ****                     PWM_OVERLOW_NO_CHANGE      |
 126:Generated_Source\PSoC4/PWM.c ****                     PWM_UNDERFLOW_NO_CHANGE);
 127:Generated_Source\PSoC4/PWM.c ****         #else
 128:Generated_Source\PSoC4/PWM.c ****             #if (PWM__LEFT == PWM_PWM_ALIGN)
 129:Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_LEFT;
  66              		.loc 1 129 0
  67 0030 084B     		ldr	r3, .L2+8
  68 0032 3122     		mov	r2, #49
  69 0034 1A60     		str	r2, [r3]
 130:Generated_Source\PSoC4/PWM.c ****             #endif  /* ( PWM_PWM_LEFT == PWM_PWM_ALIGN) */
 131:Generated_Source\PSoC4/PWM.c **** 
 132:Generated_Source\PSoC4/PWM.c ****             #if (PWM__RIGHT == PWM_PWM_ALIGN)
 133:Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_RIGHT;
 134:Generated_Source\PSoC4/PWM.c ****             #endif  /* ( PWM_PWM_RIGHT == PWM_PWM_ALIGN) */
 135:Generated_Source\PSoC4/PWM.c **** 
 136:Generated_Source\PSoC4/PWM.c ****             #if (PWM__CENTER == PWM_PWM_ALIGN)
 137:Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_CENTER;
 138:Generated_Source\PSoC4/PWM.c ****             #endif  /* ( PWM_PWM_CENTER == PWM_PWM_ALIGN) */
 139:Generated_Source\PSoC4/PWM.c **** 
 140:Generated_Source\PSoC4/PWM.c ****             #if (PWM__ASYMMETRIC == PWM_PWM_ALIGN)
 141:Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_ASYM;
 142:Generated_Source\PSoC4/PWM.c ****             #endif  /* (PWM__ASYMMETRIC == PWM_PWM_ALIGN) */
 143:Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM_PR == PWM_PWM_MODE) */
 144:Generated_Source\PSoC4/PWM.c **** 
 145:Generated_Source\PSoC4/PWM.c ****         /* Set other values from customizer */
 146:Generated_Source\PSoC4/PWM.c ****         PWM_WritePeriod(PWM_PWM_PERIOD_VALUE );
  70              		.loc 1 146 0
  71 0036 084B     		ldr	r3, .L2+12
  72 0038 181C     		mov	r0, r3
  73 003a FFF7FEFF 		bl	PWM_WritePeriod
 147:Generated_Source\PSoC4/PWM.c ****         PWM_WriteCompare(PWM_PWM_COMPARE_VALUE);
  74              		.loc 1 147 0
  75 003e 074B     		ldr	r3, .L2+16
  76 0040 181C     		mov	r0, r3
  77 0042 FFF7FEFF 		bl	PWM_WriteCompare
 148:Generated_Source\PSoC4/PWM.c **** 
 149:Generated_Source\PSoC4/PWM.c ****         #if (1u == PWM_PWM_COMPARE_SWAP)
 150:Generated_Source\PSoC4/PWM.c ****             PWM_SetCompareSwap(1u);
 151:Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompareBuf(PWM_PWM_COMPARE_BUF_VALUE);
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 5


 152:Generated_Source\PSoC4/PWM.c ****         #endif  /* (1u == PWM_PWM_COMPARE_SWAP) */
 153:Generated_Source\PSoC4/PWM.c **** 
 154:Generated_Source\PSoC4/PWM.c ****         #if (1u == PWM_PWM_PERIOD_SWAP)
 155:Generated_Source\PSoC4/PWM.c ****             PWM_SetPeriodSwap(1u);
 156:Generated_Source\PSoC4/PWM.c ****             PWM_WritePeriodBuf(PWM_PWM_PERIOD_BUF_VALUE);
 157:Generated_Source\PSoC4/PWM.c ****         #endif  /* (1u == PWM_PWM_PERIOD_SWAP) */
 158:Generated_Source\PSoC4/PWM.c ****     #endif  /* (PWM__PWM_SEL == PWM_CONFIG) */
 159:Generated_Source\PSoC4/PWM.c ****     
 160:Generated_Source\PSoC4/PWM.c **** }
  78              		.loc 1 160 0
  79 0046 BD46     		mov	sp, r7
  80              		@ sp needed
  81 0048 80BD     		pop	{r7, pc}
  82              	.L3:
  83 004a C046     		.align	2
  84              	.L2:
  85 004c 00010540 		.word	1074069760
  86 0050 24010540 		.word	1074069796
  87 0054 28010540 		.word	1074069800
  88 0058 10270000 		.word	10000
  89 005c 88130000 		.word	5000
  90              		.cfi_endproc
  91              	.LFE0:
  92              		.size	PWM_Init, .-PWM_Init
  93              		.section	.text.PWM_Enable,"ax",%progbits
  94              		.align	2
  95              		.global	PWM_Enable
  96              		.code	16
  97              		.thumb_func
  98              		.type	PWM_Enable, %function
  99              	PWM_Enable:
 100              	.LFB1:
 161:Generated_Source\PSoC4/PWM.c **** 
 162:Generated_Source\PSoC4/PWM.c **** 
 163:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Enable
 165:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 166:Generated_Source\PSoC4/PWM.c **** *
 167:Generated_Source\PSoC4/PWM.c **** * Summary:
 168:Generated_Source\PSoC4/PWM.c **** *  Enables the PWM.
 169:Generated_Source\PSoC4/PWM.c **** *
 170:Generated_Source\PSoC4/PWM.c **** * Parameters:
 171:Generated_Source\PSoC4/PWM.c **** *  None
 172:Generated_Source\PSoC4/PWM.c **** *
 173:Generated_Source\PSoC4/PWM.c **** * Return:
 174:Generated_Source\PSoC4/PWM.c **** *  None
 175:Generated_Source\PSoC4/PWM.c **** *
 176:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 177:Generated_Source\PSoC4/PWM.c **** void PWM_Enable(void)
 178:Generated_Source\PSoC4/PWM.c **** {
 101              		.loc 1 178 0
 102              		.cfi_startproc
 103 0000 90B5     		push	{r4, r7, lr}
 104              		.cfi_def_cfa_offset 12
 105              		.cfi_offset 4, -12
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 6


 108 0002 83B0     		sub	sp, sp, #12
 109              		.cfi_def_cfa_offset 24
 110 0004 00AF     		add	r7, sp, #0
 111              		.cfi_def_cfa_register 7
 179:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 180:Generated_Source\PSoC4/PWM.c **** 
 181:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 112              		.loc 1 181 0
 113 0006 FC1D     		add	r4, r7, #7
 114 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 115 000c 031C     		mov	r3, r0
 116 000e 2370     		strb	r3, [r4]
 182:Generated_Source\PSoC4/PWM.c ****     PWM_BLOCK_CONTROL_REG |= PWM_MASK;
 117              		.loc 1 182 0
 118 0010 064B     		ldr	r3, .L5
 119 0012 064A     		ldr	r2, .L5
 120 0014 1268     		ldr	r2, [r2]
 121 0016 0121     		mov	r1, #1
 122 0018 0A43     		orr	r2, r1
 123 001a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 124              		.loc 1 183 0
 125 001c FB1D     		add	r3, r7, #7
 126 001e 1B78     		ldrb	r3, [r3]
 127 0020 181C     		mov	r0, r3
 128 0022 FFF7FEFF 		bl	CyExitCriticalSection
 184:Generated_Source\PSoC4/PWM.c **** 
 185:Generated_Source\PSoC4/PWM.c ****     /* Start Timer or PWM if start input is absent */
 186:Generated_Source\PSoC4/PWM.c ****     #if (PWM__PWM_SEL == PWM_CONFIG)
 187:Generated_Source\PSoC4/PWM.c ****         #if (0u == PWM_PWM_START_SIGNAL_PRESENT)
 188:Generated_Source\PSoC4/PWM.c ****             PWM_TriggerCommand(PWM_MASK, PWM_CMD_START);
 189:Generated_Source\PSoC4/PWM.c ****         #endif /* (0u == PWM_PWM_START_SIGNAL_PRESENT) */
 190:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM__PWM_SEL == PWM_CONFIG) */
 191:Generated_Source\PSoC4/PWM.c **** 
 192:Generated_Source\PSoC4/PWM.c ****     #if (PWM__TIMER == PWM_CONFIG)
 193:Generated_Source\PSoC4/PWM.c ****         #if (0u == PWM_TC_START_SIGNAL_PRESENT)
 194:Generated_Source\PSoC4/PWM.c ****             PWM_TriggerCommand(PWM_MASK, PWM_CMD_START);
 195:Generated_Source\PSoC4/PWM.c ****         #endif /* (0u == PWM_TC_START_SIGNAL_PRESENT) */
 196:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM__TIMER == PWM_CONFIG) */
 197:Generated_Source\PSoC4/PWM.c **** }
 129              		.loc 1 197 0
 130 0026 BD46     		mov	sp, r7
 131 0028 03B0     		add	sp, sp, #12
 132              		@ sp needed
 133 002a 90BD     		pop	{r4, r7, pc}
 134              	.L6:
 135              		.align	2
 136              	.L5:
 137 002c 00000540 		.word	1074069504
 138              		.cfi_endproc
 139              	.LFE1:
 140              		.size	PWM_Enable, .-PWM_Enable
 141              		.section	.text.PWM_Start,"ax",%progbits
 142              		.align	2
 143              		.global	PWM_Start
 144              		.code	16
 145              		.thumb_func
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 7


 146              		.type	PWM_Start, %function
 147              	PWM_Start:
 148              	.LFB2:
 198:Generated_Source\PSoC4/PWM.c **** 
 199:Generated_Source\PSoC4/PWM.c **** 
 200:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 201:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Start
 202:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 203:Generated_Source\PSoC4/PWM.c **** *
 204:Generated_Source\PSoC4/PWM.c **** * Summary:
 205:Generated_Source\PSoC4/PWM.c **** *  Initializes the PWM with default customizer
 206:Generated_Source\PSoC4/PWM.c **** *  values when called the first time and enables the PWM.
 207:Generated_Source\PSoC4/PWM.c **** *  For subsequent calls the configuration is left unchanged and the component is
 208:Generated_Source\PSoC4/PWM.c **** *  just enabled.
 209:Generated_Source\PSoC4/PWM.c **** *
 210:Generated_Source\PSoC4/PWM.c **** * Parameters:
 211:Generated_Source\PSoC4/PWM.c **** *  None
 212:Generated_Source\PSoC4/PWM.c **** *
 213:Generated_Source\PSoC4/PWM.c **** * Return:
 214:Generated_Source\PSoC4/PWM.c **** *  None
 215:Generated_Source\PSoC4/PWM.c **** *
 216:Generated_Source\PSoC4/PWM.c **** * Global variables:
 217:Generated_Source\PSoC4/PWM.c **** *  PWM_initVar: global variable is used to indicate initial
 218:Generated_Source\PSoC4/PWM.c **** *  configuration of this component.  The variable is initialized to zero and set
 219:Generated_Source\PSoC4/PWM.c **** *  to 1 the first time PWM_Start() is called. This allows
 220:Generated_Source\PSoC4/PWM.c **** *  enabling/disabling a component without re-initialization in all subsequent
 221:Generated_Source\PSoC4/PWM.c **** *  calls to the PWM_Start() routine.
 222:Generated_Source\PSoC4/PWM.c **** *
 223:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 224:Generated_Source\PSoC4/PWM.c **** void PWM_Start(void)
 225:Generated_Source\PSoC4/PWM.c **** {
 149              		.loc 1 225 0
 150              		.cfi_startproc
 151 0000 80B5     		push	{r7, lr}
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 226:Generated_Source\PSoC4/PWM.c ****     if (0u == PWM_initVar)
 157              		.loc 1 226 0
 158 0004 064B     		ldr	r3, .L9
 159 0006 1B78     		ldrb	r3, [r3]
 160 0008 002B     		cmp	r3, #0
 161 000a 04D1     		bne	.L8
 227:Generated_Source\PSoC4/PWM.c ****     {
 228:Generated_Source\PSoC4/PWM.c ****         PWM_Init();
 162              		.loc 1 228 0
 163 000c FFF7FEFF 		bl	PWM_Init
 229:Generated_Source\PSoC4/PWM.c ****         PWM_initVar = 1u;
 164              		.loc 1 229 0
 165 0010 034B     		ldr	r3, .L9
 166 0012 0122     		mov	r2, #1
 167 0014 1A70     		strb	r2, [r3]
 168              	.L8:
 230:Generated_Source\PSoC4/PWM.c ****     }
 231:Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 8


 232:Generated_Source\PSoC4/PWM.c ****     PWM_Enable();
 169              		.loc 1 232 0
 170 0016 FFF7FEFF 		bl	PWM_Enable
 233:Generated_Source\PSoC4/PWM.c **** }
 171              		.loc 1 233 0
 172 001a BD46     		mov	sp, r7
 173              		@ sp needed
 174 001c 80BD     		pop	{r7, pc}
 175              	.L10:
 176 001e C046     		.align	2
 177              	.L9:
 178 0020 00000000 		.word	PWM_initVar
 179              		.cfi_endproc
 180              	.LFE2:
 181              		.size	PWM_Start, .-PWM_Start
 182              		.section	.text.PWM_Stop,"ax",%progbits
 183              		.align	2
 184              		.global	PWM_Stop
 185              		.code	16
 186              		.thumb_func
 187              		.type	PWM_Stop, %function
 188              	PWM_Stop:
 189              	.LFB3:
 234:Generated_Source\PSoC4/PWM.c **** 
 235:Generated_Source\PSoC4/PWM.c **** 
 236:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 237:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Stop
 238:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 239:Generated_Source\PSoC4/PWM.c **** *
 240:Generated_Source\PSoC4/PWM.c **** * Summary:
 241:Generated_Source\PSoC4/PWM.c **** *  Disables the PWM.
 242:Generated_Source\PSoC4/PWM.c **** *
 243:Generated_Source\PSoC4/PWM.c **** * Parameters:
 244:Generated_Source\PSoC4/PWM.c **** *  None
 245:Generated_Source\PSoC4/PWM.c **** *
 246:Generated_Source\PSoC4/PWM.c **** * Return:
 247:Generated_Source\PSoC4/PWM.c **** *  None
 248:Generated_Source\PSoC4/PWM.c **** *
 249:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 250:Generated_Source\PSoC4/PWM.c **** void PWM_Stop(void)
 251:Generated_Source\PSoC4/PWM.c **** {
 190              		.loc 1 251 0
 191              		.cfi_startproc
 192 0000 90B5     		push	{r4, r7, lr}
 193              		.cfi_def_cfa_offset 12
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              		.cfi_def_cfa_offset 24
 199 0004 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 252:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 253:Generated_Source\PSoC4/PWM.c **** 
 254:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 201              		.loc 1 254 0
 202 0006 FC1D     		add	r4, r7, #7
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 9


 203 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 204 000c 031C     		mov	r3, r0
 205 000e 2370     		strb	r3, [r4]
 255:Generated_Source\PSoC4/PWM.c **** 
 256:Generated_Source\PSoC4/PWM.c ****     PWM_BLOCK_CONTROL_REG &= (uint32)~PWM_MASK;
 206              		.loc 1 256 0
 207 0010 064B     		ldr	r3, .L12
 208 0012 064A     		ldr	r2, .L12
 209 0014 1268     		ldr	r2, [r2]
 210 0016 0121     		mov	r1, #1
 211 0018 8A43     		bic	r2, r1
 212 001a 1A60     		str	r2, [r3]
 257:Generated_Source\PSoC4/PWM.c **** 
 258:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 213              		.loc 1 258 0
 214 001c FB1D     		add	r3, r7, #7
 215 001e 1B78     		ldrb	r3, [r3]
 216 0020 181C     		mov	r0, r3
 217 0022 FFF7FEFF 		bl	CyExitCriticalSection
 259:Generated_Source\PSoC4/PWM.c **** }
 218              		.loc 1 259 0
 219 0026 BD46     		mov	sp, r7
 220 0028 03B0     		add	sp, sp, #12
 221              		@ sp needed
 222 002a 90BD     		pop	{r4, r7, pc}
 223              	.L13:
 224              		.align	2
 225              	.L12:
 226 002c 00000540 		.word	1074069504
 227              		.cfi_endproc
 228              	.LFE3:
 229              		.size	PWM_Stop, .-PWM_Stop
 230              		.section	.text.PWM_SetMode,"ax",%progbits
 231              		.align	2
 232              		.global	PWM_SetMode
 233              		.code	16
 234              		.thumb_func
 235              		.type	PWM_SetMode, %function
 236              	PWM_SetMode:
 237              	.LFB4:
 260:Generated_Source\PSoC4/PWM.c **** 
 261:Generated_Source\PSoC4/PWM.c **** 
 262:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 263:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetMode
 264:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 265:Generated_Source\PSoC4/PWM.c **** *
 266:Generated_Source\PSoC4/PWM.c **** * Summary:
 267:Generated_Source\PSoC4/PWM.c **** *  Sets the operation mode of the PWM. This function is used when
 268:Generated_Source\PSoC4/PWM.c **** *  configured as a generic PWM and the actual mode of operation is
 269:Generated_Source\PSoC4/PWM.c **** *  set at runtime. The mode must be set while the component is disabled.
 270:Generated_Source\PSoC4/PWM.c **** *
 271:Generated_Source\PSoC4/PWM.c **** * Parameters:
 272:Generated_Source\PSoC4/PWM.c **** *  mode: Mode for the PWM to operate in
 273:Generated_Source\PSoC4/PWM.c **** *   Values:
 274:Generated_Source\PSoC4/PWM.c **** *   - PWM_MODE_TIMER_COMPARE - Timer / Counter with
 275:Generated_Source\PSoC4/PWM.c **** *                                                 compare capability
 276:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_TIMER_CAPTURE - Timer / Counter with
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 10


 277:Generated_Source\PSoC4/PWM.c **** *                                                 capture capability
 278:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_QUAD - Quadrature decoder
 279:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_PWM - PWM
 280:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_PWM_DT - PWM with dead time
 281:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_PWM_PR - PWM with pseudo random capability
 282:Generated_Source\PSoC4/PWM.c **** *
 283:Generated_Source\PSoC4/PWM.c **** * Return:
 284:Generated_Source\PSoC4/PWM.c **** *  None
 285:Generated_Source\PSoC4/PWM.c **** *
 286:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 287:Generated_Source\PSoC4/PWM.c **** void PWM_SetMode(uint32 mode)
 288:Generated_Source\PSoC4/PWM.c **** {
 238              		.loc 1 288 0
 239              		.cfi_startproc
 240 0000 90B5     		push	{r4, r7, lr}
 241              		.cfi_def_cfa_offset 12
 242              		.cfi_offset 4, -12
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 85B0     		sub	sp, sp, #20
 246              		.cfi_def_cfa_offset 32
 247 0004 00AF     		add	r7, sp, #0
 248              		.cfi_def_cfa_register 7
 249 0006 7860     		str	r0, [r7, #4]
 289:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 290:Generated_Source\PSoC4/PWM.c **** 
 291:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 250              		.loc 1 291 0
 251 0008 0F23     		mov	r3, #15
 252 000a FC18     		add	r4, r7, r3
 253 000c FFF7FEFF 		bl	CyEnterCriticalSection
 254 0010 031C     		mov	r3, r0
 255 0012 2370     		strb	r3, [r4]
 292:Generated_Source\PSoC4/PWM.c **** 
 293:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_MODE_MASK;
 256              		.loc 1 293 0
 257 0014 0A4B     		ldr	r3, .L15
 258 0016 0A4A     		ldr	r2, .L15
 259 0018 1268     		ldr	r2, [r2]
 260 001a 0A49     		ldr	r1, .L15+4
 261 001c 0A40     		and	r2, r1
 262 001e 1A60     		str	r2, [r3]
 294:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= mode;
 263              		.loc 1 294 0
 264 0020 074B     		ldr	r3, .L15
 265 0022 074A     		ldr	r2, .L15
 266 0024 1168     		ldr	r1, [r2]
 267 0026 7A68     		ldr	r2, [r7, #4]
 268 0028 0A43     		orr	r2, r1
 269 002a 1A60     		str	r2, [r3]
 295:Generated_Source\PSoC4/PWM.c **** 
 296:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 270              		.loc 1 296 0
 271 002c 0F23     		mov	r3, #15
 272 002e FB18     		add	r3, r7, r3
 273 0030 1B78     		ldrb	r3, [r3]
 274 0032 181C     		mov	r0, r3
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 11


 275 0034 FFF7FEFF 		bl	CyExitCriticalSection
 297:Generated_Source\PSoC4/PWM.c **** }
 276              		.loc 1 297 0
 277 0038 BD46     		mov	sp, r7
 278 003a 05B0     		add	sp, sp, #20
 279              		@ sp needed
 280 003c 90BD     		pop	{r4, r7, pc}
 281              	.L16:
 282 003e C046     		.align	2
 283              	.L15:
 284 0040 00010540 		.word	1074069760
 285 0044 FFFFFFF8 		.word	-117440513
 286              		.cfi_endproc
 287              	.LFE4:
 288              		.size	PWM_SetMode, .-PWM_SetMode
 289              		.section	.text.PWM_SetQDMode,"ax",%progbits
 290              		.align	2
 291              		.global	PWM_SetQDMode
 292              		.code	16
 293              		.thumb_func
 294              		.type	PWM_SetQDMode, %function
 295              	PWM_SetQDMode:
 296              	.LFB5:
 298:Generated_Source\PSoC4/PWM.c **** 
 299:Generated_Source\PSoC4/PWM.c **** 
 300:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 301:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetQDMode
 302:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 303:Generated_Source\PSoC4/PWM.c **** *
 304:Generated_Source\PSoC4/PWM.c **** * Summary:
 305:Generated_Source\PSoC4/PWM.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 306:Generated_Source\PSoC4/PWM.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 307:Generated_Source\PSoC4/PWM.c **** *
 308:Generated_Source\PSoC4/PWM.c **** * Parameters:
 309:Generated_Source\PSoC4/PWM.c **** *  qdMode: Quadrature Decoder mode
 310:Generated_Source\PSoC4/PWM.c **** *   Values:
 311:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_X1 - Counts on phi 1 rising
 312:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_X2 - Counts on both edges of phi1 (2x faster)
 313:Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_X4 - Counts on both edges of phi1 and phi2
 314:Generated_Source\PSoC4/PWM.c **** *                                        (4x faster)
 315:Generated_Source\PSoC4/PWM.c **** *
 316:Generated_Source\PSoC4/PWM.c **** * Return:
 317:Generated_Source\PSoC4/PWM.c **** *  None
 318:Generated_Source\PSoC4/PWM.c **** *
 319:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 320:Generated_Source\PSoC4/PWM.c **** void PWM_SetQDMode(uint32 qdMode)
 321:Generated_Source\PSoC4/PWM.c **** {
 297              		.loc 1 321 0
 298              		.cfi_startproc
 299 0000 90B5     		push	{r4, r7, lr}
 300              		.cfi_def_cfa_offset 12
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 85B0     		sub	sp, sp, #20
 305              		.cfi_def_cfa_offset 32
 306 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 12


 307              		.cfi_def_cfa_register 7
 308 0006 7860     		str	r0, [r7, #4]
 322:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 323:Generated_Source\PSoC4/PWM.c **** 
 324:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 309              		.loc 1 324 0
 310 0008 0F23     		mov	r3, #15
 311 000a FC18     		add	r4, r7, r3
 312 000c FFF7FEFF 		bl	CyEnterCriticalSection
 313 0010 031C     		mov	r3, r0
 314 0012 2370     		strb	r3, [r4]
 325:Generated_Source\PSoC4/PWM.c **** 
 326:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_QUAD_MODE_MASK;
 315              		.loc 1 326 0
 316 0014 0A4B     		ldr	r3, .L18
 317 0016 0A4A     		ldr	r2, .L18
 318 0018 1268     		ldr	r2, [r2]
 319 001a 0A49     		ldr	r1, .L18+4
 320 001c 0A40     		and	r2, r1
 321 001e 1A60     		str	r2, [r3]
 327:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= qdMode;
 322              		.loc 1 327 0
 323 0020 074B     		ldr	r3, .L18
 324 0022 074A     		ldr	r2, .L18
 325 0024 1168     		ldr	r1, [r2]
 326 0026 7A68     		ldr	r2, [r7, #4]
 327 0028 0A43     		orr	r2, r1
 328 002a 1A60     		str	r2, [r3]
 328:Generated_Source\PSoC4/PWM.c **** 
 329:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 329              		.loc 1 329 0
 330 002c 0F23     		mov	r3, #15
 331 002e FB18     		add	r3, r7, r3
 332 0030 1B78     		ldrb	r3, [r3]
 333 0032 181C     		mov	r0, r3
 334 0034 FFF7FEFF 		bl	CyExitCriticalSection
 330:Generated_Source\PSoC4/PWM.c **** }
 335              		.loc 1 330 0
 336 0038 BD46     		mov	sp, r7
 337 003a 05B0     		add	sp, sp, #20
 338              		@ sp needed
 339 003c 90BD     		pop	{r4, r7, pc}
 340              	.L19:
 341 003e C046     		.align	2
 342              	.L18:
 343 0040 00010540 		.word	1074069760
 344 0044 FFFF8FFF 		.word	-7340033
 345              		.cfi_endproc
 346              	.LFE5:
 347              		.size	PWM_SetQDMode, .-PWM_SetQDMode
 348              		.section	.text.PWM_SetPrescaler,"ax",%progbits
 349              		.align	2
 350              		.global	PWM_SetPrescaler
 351              		.code	16
 352              		.thumb_func
 353              		.type	PWM_SetPrescaler, %function
 354              	PWM_SetPrescaler:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 13


 355              	.LFB6:
 331:Generated_Source\PSoC4/PWM.c **** 
 332:Generated_Source\PSoC4/PWM.c **** 
 333:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 334:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPrescaler
 335:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 336:Generated_Source\PSoC4/PWM.c **** *
 337:Generated_Source\PSoC4/PWM.c **** * Summary:
 338:Generated_Source\PSoC4/PWM.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 339:Generated_Source\PSoC4/PWM.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 340:Generated_Source\PSoC4/PWM.c **** *
 341:Generated_Source\PSoC4/PWM.c **** * Parameters:
 342:Generated_Source\PSoC4/PWM.c **** *  prescaler: Prescaler divider value
 343:Generated_Source\PSoC4/PWM.c **** *   Values:
 344:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 345:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY2    - Divide by 2
 346:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY4    - Divide by 4
 347:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY8    - Divide by 8
 348:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY16   - Divide by 16
 349:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY32   - Divide by 32
 350:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY64   - Divide by 64
 351:Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY128  - Divide by 128
 352:Generated_Source\PSoC4/PWM.c **** *
 353:Generated_Source\PSoC4/PWM.c **** * Return:
 354:Generated_Source\PSoC4/PWM.c **** *  None
 355:Generated_Source\PSoC4/PWM.c **** *
 356:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 357:Generated_Source\PSoC4/PWM.c **** void PWM_SetPrescaler(uint32 prescaler)
 358:Generated_Source\PSoC4/PWM.c **** {
 356              		.loc 1 358 0
 357              		.cfi_startproc
 358 0000 90B5     		push	{r4, r7, lr}
 359              		.cfi_def_cfa_offset 12
 360              		.cfi_offset 4, -12
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 85B0     		sub	sp, sp, #20
 364              		.cfi_def_cfa_offset 32
 365 0004 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 367 0006 7860     		str	r0, [r7, #4]
 359:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 360:Generated_Source\PSoC4/PWM.c **** 
 361:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 368              		.loc 1 361 0
 369 0008 0F23     		mov	r3, #15
 370 000a FC18     		add	r4, r7, r3
 371 000c FFF7FEFF 		bl	CyEnterCriticalSection
 372 0010 031C     		mov	r3, r0
 373 0012 2370     		strb	r3, [r4]
 362:Generated_Source\PSoC4/PWM.c **** 
 363:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PRESCALER_MASK;
 374              		.loc 1 363 0
 375 0014 0A4B     		ldr	r3, .L21
 376 0016 0A4A     		ldr	r2, .L21
 377 0018 1268     		ldr	r2, [r2]
 378 001a 0A49     		ldr	r1, .L21+4
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 14


 379 001c 0A40     		and	r2, r1
 380 001e 1A60     		str	r2, [r3]
 364:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= prescaler;
 381              		.loc 1 364 0
 382 0020 074B     		ldr	r3, .L21
 383 0022 074A     		ldr	r2, .L21
 384 0024 1168     		ldr	r1, [r2]
 385 0026 7A68     		ldr	r2, [r7, #4]
 386 0028 0A43     		orr	r2, r1
 387 002a 1A60     		str	r2, [r3]
 365:Generated_Source\PSoC4/PWM.c **** 
 366:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 388              		.loc 1 366 0
 389 002c 0F23     		mov	r3, #15
 390 002e FB18     		add	r3, r7, r3
 391 0030 1B78     		ldrb	r3, [r3]
 392 0032 181C     		mov	r0, r3
 393 0034 FFF7FEFF 		bl	CyExitCriticalSection
 367:Generated_Source\PSoC4/PWM.c **** }
 394              		.loc 1 367 0
 395 0038 BD46     		mov	sp, r7
 396 003a 05B0     		add	sp, sp, #20
 397              		@ sp needed
 398 003c 90BD     		pop	{r4, r7, pc}
 399              	.L22:
 400 003e C046     		.align	2
 401              	.L21:
 402 0040 00010540 		.word	1074069760
 403 0044 FF00FFFF 		.word	-65281
 404              		.cfi_endproc
 405              	.LFE6:
 406              		.size	PWM_SetPrescaler, .-PWM_SetPrescaler
 407              		.section	.text.PWM_SetOneShot,"ax",%progbits
 408              		.align	2
 409              		.global	PWM_SetOneShot
 410              		.code	16
 411              		.thumb_func
 412              		.type	PWM_SetOneShot, %function
 413              	PWM_SetOneShot:
 414              	.LFB7:
 368:Generated_Source\PSoC4/PWM.c **** 
 369:Generated_Source\PSoC4/PWM.c **** 
 370:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 371:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetOneShot
 372:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 373:Generated_Source\PSoC4/PWM.c **** *
 374:Generated_Source\PSoC4/PWM.c **** * Summary:
 375:Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the PWM runs
 376:Generated_Source\PSoC4/PWM.c **** *  continuously or stops when terminal count is reached.  By default the
 377:Generated_Source\PSoC4/PWM.c **** *  PWM operates in the continuous mode.
 378:Generated_Source\PSoC4/PWM.c **** *
 379:Generated_Source\PSoC4/PWM.c **** * Parameters:
 380:Generated_Source\PSoC4/PWM.c **** *  oneShotEnable
 381:Generated_Source\PSoC4/PWM.c **** *   Values:
 382:Generated_Source\PSoC4/PWM.c **** *     - 0 - Continuous
 383:Generated_Source\PSoC4/PWM.c **** *     - 1 - Enable One Shot
 384:Generated_Source\PSoC4/PWM.c **** *
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 15


 385:Generated_Source\PSoC4/PWM.c **** * Return:
 386:Generated_Source\PSoC4/PWM.c **** *  None
 387:Generated_Source\PSoC4/PWM.c **** *
 388:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 389:Generated_Source\PSoC4/PWM.c **** void PWM_SetOneShot(uint32 oneShotEnable)
 390:Generated_Source\PSoC4/PWM.c **** {
 415              		.loc 1 390 0
 416              		.cfi_startproc
 417 0000 90B5     		push	{r4, r7, lr}
 418              		.cfi_def_cfa_offset 12
 419              		.cfi_offset 4, -12
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 85B0     		sub	sp, sp, #20
 423              		.cfi_def_cfa_offset 32
 424 0004 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
 426 0006 7860     		str	r0, [r7, #4]
 391:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 392:Generated_Source\PSoC4/PWM.c **** 
 393:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 427              		.loc 1 393 0
 428 0008 0F23     		mov	r3, #15
 429 000a FC18     		add	r4, r7, r3
 430 000c FFF7FEFF 		bl	CyEnterCriticalSection
 431 0010 031C     		mov	r3, r0
 432 0012 2370     		strb	r3, [r4]
 394:Generated_Source\PSoC4/PWM.c **** 
 395:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_ONESHOT_MASK;
 433              		.loc 1 395 0
 434 0014 0B4B     		ldr	r3, .L24
 435 0016 0B4A     		ldr	r2, .L24
 436 0018 1268     		ldr	r2, [r2]
 437 001a 0B49     		ldr	r1, .L24+4
 438 001c 0A40     		and	r2, r1
 439 001e 1A60     		str	r2, [r3]
 396:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((oneShotEnable & PWM_1BIT_MASK) <<
 440              		.loc 1 396 0
 441 0020 084B     		ldr	r3, .L24
 442 0022 084A     		ldr	r2, .L24
 443 0024 1168     		ldr	r1, [r2]
 444 0026 7A68     		ldr	r2, [r7, #4]
 445 0028 0120     		mov	r0, #1
 446 002a 0240     		and	r2, r0
 447 002c 9204     		lsl	r2, r2, #18
 448 002e 0A43     		orr	r2, r1
 449 0030 1A60     		str	r2, [r3]
 397:Generated_Source\PSoC4/PWM.c ****                                                                PWM_ONESHOT_SHIFT));
 398:Generated_Source\PSoC4/PWM.c **** 
 399:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 450              		.loc 1 399 0
 451 0032 0F23     		mov	r3, #15
 452 0034 FB18     		add	r3, r7, r3
 453 0036 1B78     		ldrb	r3, [r3]
 454 0038 181C     		mov	r0, r3
 455 003a FFF7FEFF 		bl	CyExitCriticalSection
 400:Generated_Source\PSoC4/PWM.c **** }
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 16


 456              		.loc 1 400 0
 457 003e BD46     		mov	sp, r7
 458 0040 05B0     		add	sp, sp, #20
 459              		@ sp needed
 460 0042 90BD     		pop	{r4, r7, pc}
 461              	.L25:
 462              		.align	2
 463              	.L24:
 464 0044 00010540 		.word	1074069760
 465 0048 FFFFFBFF 		.word	-262145
 466              		.cfi_endproc
 467              	.LFE7:
 468              		.size	PWM_SetOneShot, .-PWM_SetOneShot
 469              		.section	.text.PWM_SetPWMMode,"ax",%progbits
 470              		.align	2
 471              		.global	PWM_SetPWMMode
 472              		.code	16
 473              		.thumb_func
 474              		.type	PWM_SetPWMMode, %function
 475              	PWM_SetPWMMode:
 476              	.LFB8:
 401:Generated_Source\PSoC4/PWM.c **** 
 402:Generated_Source\PSoC4/PWM.c **** 
 403:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 404:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMMode
 405:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 406:Generated_Source\PSoC4/PWM.c **** *
 407:Generated_Source\PSoC4/PWM.c **** * Summary:
 408:Generated_Source\PSoC4/PWM.c **** *  Writes the control register that determines what mode of operation the PWM
 409:Generated_Source\PSoC4/PWM.c **** *  output lines are driven in.  There is a setting for what to do on a
 410:Generated_Source\PSoC4/PWM.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 411:Generated_Source\PSoC4/PWM.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
 412:Generated_Source\PSoC4/PWM.c **** *  the mode.
 413:Generated_Source\PSoC4/PWM.c **** *
 414:Generated_Source\PSoC4/PWM.c **** * Parameters:
 415:Generated_Source\PSoC4/PWM.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 416:Generated_Source\PSoC4/PWM.c **** *  for each of the three or use one of the preconfigured PWM settings.
 417:Generated_Source\PSoC4/PWM.c **** *   Values:
 418:Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_SET        - Set on comparison match
 419:Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 420:Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 421:Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 422:Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_SET         - Set on overflow
 423:Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
 424:Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_INVERT      - Invert on overflow
 425:Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 426:Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_SET       - Set on underflow
 427:Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 428:Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 429:Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
 430:Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 431:Generated_Source\PSoC4/PWM.c **** *                             with up counting mode
 432:Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
 433:Generated_Source\PSoC4/PWM.c **** *                             with down counting mode
 434:Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 435:Generated_Source\PSoC4/PWM.c **** *                             combined with up/down 0 mode
 436:Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 17


 437:Generated_Source\PSoC4/PWM.c **** *                             with up/down 1 mode
 438:Generated_Source\PSoC4/PWM.c **** *
 439:Generated_Source\PSoC4/PWM.c **** * Return:
 440:Generated_Source\PSoC4/PWM.c **** *  None
 441:Generated_Source\PSoC4/PWM.c **** *
 442:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 443:Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMMode(uint32 modeMask)
 444:Generated_Source\PSoC4/PWM.c **** {
 477              		.loc 1 444 0
 478              		.cfi_startproc
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 82B0     		sub	sp, sp, #8
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 487 0006 7860     		str	r0, [r7, #4]
 445:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL2_REG = (modeMask & PWM_6BIT_MASK);
 488              		.loc 1 445 0
 489 0008 034B     		ldr	r3, .L27
 490 000a 7A68     		ldr	r2, [r7, #4]
 491 000c 3F21     		mov	r1, #63
 492 000e 0A40     		and	r2, r1
 493 0010 1A60     		str	r2, [r3]
 446:Generated_Source\PSoC4/PWM.c **** }
 494              		.loc 1 446 0
 495 0012 BD46     		mov	sp, r7
 496 0014 02B0     		add	sp, sp, #8
 497              		@ sp needed
 498 0016 80BD     		pop	{r7, pc}
 499              	.L28:
 500              		.align	2
 501              	.L27:
 502 0018 28010540 		.word	1074069800
 503              		.cfi_endproc
 504              	.LFE8:
 505              		.size	PWM_SetPWMMode, .-PWM_SetPWMMode
 506              		.section	.text.PWM_SetPWMSyncKill,"ax",%progbits
 507              		.align	2
 508              		.global	PWM_SetPWMSyncKill
 509              		.code	16
 510              		.thumb_func
 511              		.type	PWM_SetPWMSyncKill, %function
 512              	PWM_SetPWMSyncKill:
 513              	.LFB9:
 447:Generated_Source\PSoC4/PWM.c **** 
 448:Generated_Source\PSoC4/PWM.c **** 
 449:Generated_Source\PSoC4/PWM.c **** 
 450:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 451:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMSyncKill
 452:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 453:Generated_Source\PSoC4/PWM.c **** *
 454:Generated_Source\PSoC4/PWM.c **** * Summary:
 455:Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 456:Generated_Source\PSoC4/PWM.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 18


 457:Generated_Source\PSoC4/PWM.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 458:Generated_Source\PSoC4/PWM.c **** *  and PWM with dead time modes.
 459:Generated_Source\PSoC4/PWM.c **** *
 460:Generated_Source\PSoC4/PWM.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 461:Generated_Source\PSoC4/PWM.c **** *  signals until the next terminal count.
 462:Generated_Source\PSoC4/PWM.c **** *
 463:Generated_Source\PSoC4/PWM.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 464:Generated_Source\PSoC4/PWM.c **** *  signals when the kill signal is present.  This mode should only be used
 465:Generated_Source\PSoC4/PWM.c **** *  when the kill signal (stop input) is configured in the pass through mode
 466:Generated_Source\PSoC4/PWM.c **** *  (Level sensitive signal).
 467:Generated_Source\PSoC4/PWM.c **** 
 468:Generated_Source\PSoC4/PWM.c **** *
 469:Generated_Source\PSoC4/PWM.c **** * Parameters:
 470:Generated_Source\PSoC4/PWM.c **** *  syncKillEnable
 471:Generated_Source\PSoC4/PWM.c **** *   Values:
 472:Generated_Source\PSoC4/PWM.c **** *     - 0 - Asynchronous
 473:Generated_Source\PSoC4/PWM.c **** *     - 1 - Synchronous
 474:Generated_Source\PSoC4/PWM.c **** *
 475:Generated_Source\PSoC4/PWM.c **** * Return:
 476:Generated_Source\PSoC4/PWM.c **** *  None
 477:Generated_Source\PSoC4/PWM.c **** *
 478:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 479:Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMSyncKill(uint32 syncKillEnable)
 480:Generated_Source\PSoC4/PWM.c **** {
 514              		.loc 1 480 0
 515              		.cfi_startproc
 516 0000 90B5     		push	{r4, r7, lr}
 517              		.cfi_def_cfa_offset 12
 518              		.cfi_offset 4, -12
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 85B0     		sub	sp, sp, #20
 522              		.cfi_def_cfa_offset 32
 523 0004 00AF     		add	r7, sp, #0
 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 481:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 482:Generated_Source\PSoC4/PWM.c **** 
 483:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 526              		.loc 1 483 0
 527 0008 0F23     		mov	r3, #15
 528 000a FC18     		add	r4, r7, r3
 529 000c FFF7FEFF 		bl	CyEnterCriticalSection
 530 0010 031C     		mov	r3, r0
 531 0012 2370     		strb	r3, [r4]
 484:Generated_Source\PSoC4/PWM.c **** 
 485:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PWM_SYNC_KILL_MASK;
 532              		.loc 1 485 0
 533 0014 0B4B     		ldr	r3, .L30
 534 0016 0B4A     		ldr	r2, .L30
 535 0018 1268     		ldr	r2, [r2]
 536 001a 0421     		mov	r1, #4
 537 001c 8A43     		bic	r2, r1
 538 001e 1A60     		str	r2, [r3]
 486:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((syncKillEnable & PWM_1BIT_MASK)  <<
 539              		.loc 1 486 0
 540 0020 084B     		ldr	r3, .L30
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 19


 541 0022 084A     		ldr	r2, .L30
 542 0024 1168     		ldr	r1, [r2]
 543 0026 7A68     		ldr	r2, [r7, #4]
 544 0028 0120     		mov	r0, #1
 545 002a 0240     		and	r2, r0
 546 002c 9200     		lsl	r2, r2, #2
 547 002e 0A43     		orr	r2, r1
 548 0030 1A60     		str	r2, [r3]
 487:Generated_Source\PSoC4/PWM.c ****                                                PWM_PWM_SYNC_KILL_SHIFT));
 488:Generated_Source\PSoC4/PWM.c **** 
 489:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 549              		.loc 1 489 0
 550 0032 0F23     		mov	r3, #15
 551 0034 FB18     		add	r3, r7, r3
 552 0036 1B78     		ldrb	r3, [r3]
 553 0038 181C     		mov	r0, r3
 554 003a FFF7FEFF 		bl	CyExitCriticalSection
 490:Generated_Source\PSoC4/PWM.c **** }
 555              		.loc 1 490 0
 556 003e BD46     		mov	sp, r7
 557 0040 05B0     		add	sp, sp, #20
 558              		@ sp needed
 559 0042 90BD     		pop	{r4, r7, pc}
 560              	.L31:
 561              		.align	2
 562              	.L30:
 563 0044 00010540 		.word	1074069760
 564              		.cfi_endproc
 565              	.LFE9:
 566              		.size	PWM_SetPWMSyncKill, .-PWM_SetPWMSyncKill
 567              		.section	.text.PWM_SetPWMStopOnKill,"ax",%progbits
 568              		.align	2
 569              		.global	PWM_SetPWMStopOnKill
 570              		.code	16
 571              		.thumb_func
 572              		.type	PWM_SetPWMStopOnKill, %function
 573              	PWM_SetPWMStopOnKill:
 574              	.LFB10:
 491:Generated_Source\PSoC4/PWM.c **** 
 492:Generated_Source\PSoC4/PWM.c **** 
 493:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 494:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMStopOnKill
 495:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 496:Generated_Source\PSoC4/PWM.c **** *
 497:Generated_Source\PSoC4/PWM.c **** * Summary:
 498:Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 499:Generated_Source\PSoC4/PWM.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 500:Generated_Source\PSoC4/PWM.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 501:Generated_Source\PSoC4/PWM.c **** *
 502:Generated_Source\PSoC4/PWM.c **** *
 503:Generated_Source\PSoC4/PWM.c **** * Parameters:
 504:Generated_Source\PSoC4/PWM.c **** *  stopOnKillEnable
 505:Generated_Source\PSoC4/PWM.c **** *   Values:
 506:Generated_Source\PSoC4/PWM.c **** *     - 0 - Don't stop
 507:Generated_Source\PSoC4/PWM.c **** *     - 1 - Stop
 508:Generated_Source\PSoC4/PWM.c **** *
 509:Generated_Source\PSoC4/PWM.c **** * Return:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 20


 510:Generated_Source\PSoC4/PWM.c **** *  None
 511:Generated_Source\PSoC4/PWM.c **** *
 512:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 513:Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMStopOnKill(uint32 stopOnKillEnable)
 514:Generated_Source\PSoC4/PWM.c **** {
 575              		.loc 1 514 0
 576              		.cfi_startproc
 577 0000 90B5     		push	{r4, r7, lr}
 578              		.cfi_def_cfa_offset 12
 579              		.cfi_offset 4, -12
 580              		.cfi_offset 7, -8
 581              		.cfi_offset 14, -4
 582 0002 85B0     		sub	sp, sp, #20
 583              		.cfi_def_cfa_offset 32
 584 0004 00AF     		add	r7, sp, #0
 585              		.cfi_def_cfa_register 7
 586 0006 7860     		str	r0, [r7, #4]
 515:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 516:Generated_Source\PSoC4/PWM.c **** 
 517:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 587              		.loc 1 517 0
 588 0008 0F23     		mov	r3, #15
 589 000a FC18     		add	r4, r7, r3
 590 000c FFF7FEFF 		bl	CyEnterCriticalSection
 591 0010 031C     		mov	r3, r0
 592 0012 2370     		strb	r3, [r4]
 518:Generated_Source\PSoC4/PWM.c **** 
 519:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PWM_STOP_KILL_MASK;
 593              		.loc 1 519 0
 594 0014 0B4B     		ldr	r3, .L33
 595 0016 0B4A     		ldr	r2, .L33
 596 0018 1268     		ldr	r2, [r2]
 597 001a 0821     		mov	r1, #8
 598 001c 8A43     		bic	r2, r1
 599 001e 1A60     		str	r2, [r3]
 520:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((stopOnKillEnable & PWM_1BIT_MASK)  <<
 600              		.loc 1 520 0
 601 0020 084B     		ldr	r3, .L33
 602 0022 084A     		ldr	r2, .L33
 603 0024 1168     		ldr	r1, [r2]
 604 0026 7A68     		ldr	r2, [r7, #4]
 605 0028 0120     		mov	r0, #1
 606 002a 0240     		and	r2, r0
 607 002c D200     		lsl	r2, r2, #3
 608 002e 0A43     		orr	r2, r1
 609 0030 1A60     		str	r2, [r3]
 521:Generated_Source\PSoC4/PWM.c ****                                                          PWM_PWM_STOP_KILL_SHIFT));
 522:Generated_Source\PSoC4/PWM.c **** 
 523:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 610              		.loc 1 523 0
 611 0032 0F23     		mov	r3, #15
 612 0034 FB18     		add	r3, r7, r3
 613 0036 1B78     		ldrb	r3, [r3]
 614 0038 181C     		mov	r0, r3
 615 003a FFF7FEFF 		bl	CyExitCriticalSection
 524:Generated_Source\PSoC4/PWM.c **** }
 616              		.loc 1 524 0
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 21


 617 003e BD46     		mov	sp, r7
 618 0040 05B0     		add	sp, sp, #20
 619              		@ sp needed
 620 0042 90BD     		pop	{r4, r7, pc}
 621              	.L34:
 622              		.align	2
 623              	.L33:
 624 0044 00010540 		.word	1074069760
 625              		.cfi_endproc
 626              	.LFE10:
 627              		.size	PWM_SetPWMStopOnKill, .-PWM_SetPWMStopOnKill
 628              		.section	.text.PWM_SetPWMDeadTime,"ax",%progbits
 629              		.align	2
 630              		.global	PWM_SetPWMDeadTime
 631              		.code	16
 632              		.thumb_func
 633              		.type	PWM_SetPWMDeadTime, %function
 634              	PWM_SetPWMDeadTime:
 635              	.LFB11:
 525:Generated_Source\PSoC4/PWM.c **** 
 526:Generated_Source\PSoC4/PWM.c **** 
 527:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 528:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMDeadTime
 529:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 530:Generated_Source\PSoC4/PWM.c **** *
 531:Generated_Source\PSoC4/PWM.c **** * Summary:
 532:Generated_Source\PSoC4/PWM.c **** *  Writes the dead time control value.  This value delays the rising edge of
 533:Generated_Source\PSoC4/PWM.c **** *  both the line and line_n signals the designated number of cycles resulting
 534:Generated_Source\PSoC4/PWM.c **** *  in both signals being inactive for that many cycles.  This functionality is
 535:Generated_Source\PSoC4/PWM.c **** *  only applicable to the PWM in the dead time mode.
 536:Generated_Source\PSoC4/PWM.c **** 
 537:Generated_Source\PSoC4/PWM.c **** *
 538:Generated_Source\PSoC4/PWM.c **** * Parameters:
 539:Generated_Source\PSoC4/PWM.c **** *  Dead time to insert
 540:Generated_Source\PSoC4/PWM.c **** *   Values: 0 to 255
 541:Generated_Source\PSoC4/PWM.c **** *
 542:Generated_Source\PSoC4/PWM.c **** * Return:
 543:Generated_Source\PSoC4/PWM.c **** *  None
 544:Generated_Source\PSoC4/PWM.c **** *
 545:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 546:Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMDeadTime(uint32 deadTime)
 547:Generated_Source\PSoC4/PWM.c **** {
 636              		.loc 1 547 0
 637              		.cfi_startproc
 638 0000 90B5     		push	{r4, r7, lr}
 639              		.cfi_def_cfa_offset 12
 640              		.cfi_offset 4, -12
 641              		.cfi_offset 7, -8
 642              		.cfi_offset 14, -4
 643 0002 85B0     		sub	sp, sp, #20
 644              		.cfi_def_cfa_offset 32
 645 0004 00AF     		add	r7, sp, #0
 646              		.cfi_def_cfa_register 7
 647 0006 7860     		str	r0, [r7, #4]
 548:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 549:Generated_Source\PSoC4/PWM.c **** 
 550:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 22


 648              		.loc 1 550 0
 649 0008 0F23     		mov	r3, #15
 650 000a FC18     		add	r4, r7, r3
 651 000c FFF7FEFF 		bl	CyEnterCriticalSection
 652 0010 031C     		mov	r3, r0
 653 0012 2370     		strb	r3, [r4]
 551:Generated_Source\PSoC4/PWM.c **** 
 552:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PRESCALER_MASK;
 654              		.loc 1 552 0
 655 0014 0B4B     		ldr	r3, .L36
 656 0016 0B4A     		ldr	r2, .L36
 657 0018 1268     		ldr	r2, [r2]
 658 001a 0B49     		ldr	r1, .L36+4
 659 001c 0A40     		and	r2, r1
 660 001e 1A60     		str	r2, [r3]
 553:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((deadTime & PWM_8BIT_MASK) <<
 661              		.loc 1 553 0
 662 0020 084B     		ldr	r3, .L36
 663 0022 084A     		ldr	r2, .L36
 664 0024 1168     		ldr	r1, [r2]
 665 0026 7A68     		ldr	r2, [r7, #4]
 666 0028 1202     		lsl	r2, r2, #8
 667 002a 1204     		lsl	r2, r2, #16
 668 002c 120C     		lsr	r2, r2, #16
 669 002e 0A43     		orr	r2, r1
 670 0030 1A60     		str	r2, [r3]
 554:Generated_Source\PSoC4/PWM.c ****                                                           PWM_PRESCALER_SHIFT));
 555:Generated_Source\PSoC4/PWM.c **** 
 556:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 671              		.loc 1 556 0
 672 0032 0F23     		mov	r3, #15
 673 0034 FB18     		add	r3, r7, r3
 674 0036 1B78     		ldrb	r3, [r3]
 675 0038 181C     		mov	r0, r3
 676 003a FFF7FEFF 		bl	CyExitCriticalSection
 557:Generated_Source\PSoC4/PWM.c **** }
 677              		.loc 1 557 0
 678 003e BD46     		mov	sp, r7
 679 0040 05B0     		add	sp, sp, #20
 680              		@ sp needed
 681 0042 90BD     		pop	{r4, r7, pc}
 682              	.L37:
 683              		.align	2
 684              	.L36:
 685 0044 00010540 		.word	1074069760
 686 0048 FF00FFFF 		.word	-65281
 687              		.cfi_endproc
 688              	.LFE11:
 689              		.size	PWM_SetPWMDeadTime, .-PWM_SetPWMDeadTime
 690              		.section	.text.PWM_SetPWMInvert,"ax",%progbits
 691              		.align	2
 692              		.global	PWM_SetPWMInvert
 693              		.code	16
 694              		.thumb_func
 695              		.type	PWM_SetPWMInvert, %function
 696              	PWM_SetPWMInvert:
 697              	.LFB12:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 23


 558:Generated_Source\PSoC4/PWM.c **** 
 559:Generated_Source\PSoC4/PWM.c **** 
 560:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 561:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMInvert
 562:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 563:Generated_Source\PSoC4/PWM.c **** *
 564:Generated_Source\PSoC4/PWM.c **** * Summary:
 565:Generated_Source\PSoC4/PWM.c **** *  Writes the bits that control whether the line and line_n outputs are
 566:Generated_Source\PSoC4/PWM.c **** *  inverted from their normal output values.  This functionality is only
 567:Generated_Source\PSoC4/PWM.c **** *  applicable to the three PWM modes.
 568:Generated_Source\PSoC4/PWM.c **** *
 569:Generated_Source\PSoC4/PWM.c **** * Parameters:
 570:Generated_Source\PSoC4/PWM.c **** *  mask: Mask of outputs to invert.
 571:Generated_Source\PSoC4/PWM.c **** *   Values:
 572:Generated_Source\PSoC4/PWM.c **** *         - PWM_INVERT_LINE   - Inverts the line output
 573:Generated_Source\PSoC4/PWM.c **** *         - PWM_INVERT_LINE_N - Inverts the line_n output
 574:Generated_Source\PSoC4/PWM.c **** *
 575:Generated_Source\PSoC4/PWM.c **** * Return:
 576:Generated_Source\PSoC4/PWM.c **** *  None
 577:Generated_Source\PSoC4/PWM.c **** *
 578:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 579:Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMInvert(uint32 mask)
 580:Generated_Source\PSoC4/PWM.c **** {
 698              		.loc 1 580 0
 699              		.cfi_startproc
 700 0000 90B5     		push	{r4, r7, lr}
 701              		.cfi_def_cfa_offset 12
 702              		.cfi_offset 4, -12
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0002 85B0     		sub	sp, sp, #20
 706              		.cfi_def_cfa_offset 32
 707 0004 00AF     		add	r7, sp, #0
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 581:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 582:Generated_Source\PSoC4/PWM.c **** 
 583:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 710              		.loc 1 583 0
 711 0008 0F23     		mov	r3, #15
 712 000a FC18     		add	r4, r7, r3
 713 000c FFF7FEFF 		bl	CyEnterCriticalSection
 714 0010 031C     		mov	r3, r0
 715 0012 2370     		strb	r3, [r4]
 584:Generated_Source\PSoC4/PWM.c **** 
 585:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_INV_OUT_MASK;
 716              		.loc 1 585 0
 717 0014 0A4B     		ldr	r3, .L39
 718 0016 0A4A     		ldr	r2, .L39
 719 0018 1268     		ldr	r2, [r2]
 720 001a 0A49     		ldr	r1, .L39+4
 721 001c 0A40     		and	r2, r1
 722 001e 1A60     		str	r2, [r3]
 586:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= mask;
 723              		.loc 1 586 0
 724 0020 074B     		ldr	r3, .L39
 725 0022 074A     		ldr	r2, .L39
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 24


 726 0024 1168     		ldr	r1, [r2]
 727 0026 7A68     		ldr	r2, [r7, #4]
 728 0028 0A43     		orr	r2, r1
 729 002a 1A60     		str	r2, [r3]
 587:Generated_Source\PSoC4/PWM.c **** 
 588:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 730              		.loc 1 588 0
 731 002c 0F23     		mov	r3, #15
 732 002e FB18     		add	r3, r7, r3
 733 0030 1B78     		ldrb	r3, [r3]
 734 0032 181C     		mov	r0, r3
 735 0034 FFF7FEFF 		bl	CyExitCriticalSection
 589:Generated_Source\PSoC4/PWM.c **** }
 736              		.loc 1 589 0
 737 0038 BD46     		mov	sp, r7
 738 003a 05B0     		add	sp, sp, #20
 739              		@ sp needed
 740 003c 90BD     		pop	{r4, r7, pc}
 741              	.L40:
 742 003e C046     		.align	2
 743              	.L39:
 744 0040 00010540 		.word	1074069760
 745 0044 FFFFCFFF 		.word	-3145729
 746              		.cfi_endproc
 747              	.LFE12:
 748              		.size	PWM_SetPWMInvert, .-PWM_SetPWMInvert
 749              		.section	.text.PWM_WriteCounter,"ax",%progbits
 750              		.align	2
 751              		.global	PWM_WriteCounter
 752              		.code	16
 753              		.thumb_func
 754              		.type	PWM_WriteCounter, %function
 755              	PWM_WriteCounter:
 756              	.LFB13:
 590:Generated_Source\PSoC4/PWM.c **** 
 591:Generated_Source\PSoC4/PWM.c **** 
 592:Generated_Source\PSoC4/PWM.c **** 
 593:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 594:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WriteCounter
 595:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 596:Generated_Source\PSoC4/PWM.c **** *
 597:Generated_Source\PSoC4/PWM.c **** * Summary:
 598:Generated_Source\PSoC4/PWM.c **** *  Writes a new 16bit counter value directly into the counter register, thus
 599:Generated_Source\PSoC4/PWM.c **** *  setting the counter (not the period) to the value written. It is not
 600:Generated_Source\PSoC4/PWM.c **** *  advised to write to this field when the counter is running.
 601:Generated_Source\PSoC4/PWM.c **** *
 602:Generated_Source\PSoC4/PWM.c **** * Parameters:
 603:Generated_Source\PSoC4/PWM.c **** *  count: value to write
 604:Generated_Source\PSoC4/PWM.c **** *
 605:Generated_Source\PSoC4/PWM.c **** * Return:
 606:Generated_Source\PSoC4/PWM.c **** *  None
 607:Generated_Source\PSoC4/PWM.c **** *
 608:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 609:Generated_Source\PSoC4/PWM.c **** void PWM_WriteCounter(uint32 count)
 610:Generated_Source\PSoC4/PWM.c **** {
 757              		.loc 1 610 0
 758              		.cfi_startproc
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 25


 759 0000 80B5     		push	{r7, lr}
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 7, -8
 762              		.cfi_offset 14, -4
 763 0002 82B0     		sub	sp, sp, #8
 764              		.cfi_def_cfa_offset 16
 765 0004 00AF     		add	r7, sp, #0
 766              		.cfi_def_cfa_register 7
 767 0006 7860     		str	r0, [r7, #4]
 611:Generated_Source\PSoC4/PWM.c ****     PWM_COUNTER_REG = (count & PWM_16BIT_MASK);
 768              		.loc 1 611 0
 769 0008 034B     		ldr	r3, .L42
 770 000a 7A68     		ldr	r2, [r7, #4]
 771 000c 1204     		lsl	r2, r2, #16
 772 000e 120C     		lsr	r2, r2, #16
 773 0010 1A60     		str	r2, [r3]
 612:Generated_Source\PSoC4/PWM.c **** }
 774              		.loc 1 612 0
 775 0012 BD46     		mov	sp, r7
 776 0014 02B0     		add	sp, sp, #8
 777              		@ sp needed
 778 0016 80BD     		pop	{r7, pc}
 779              	.L43:
 780              		.align	2
 781              	.L42:
 782 0018 08010540 		.word	1074069768
 783              		.cfi_endproc
 784              	.LFE13:
 785              		.size	PWM_WriteCounter, .-PWM_WriteCounter
 786              		.section	.text.PWM_ReadCounter,"ax",%progbits
 787              		.align	2
 788              		.global	PWM_ReadCounter
 789              		.code	16
 790              		.thumb_func
 791              		.type	PWM_ReadCounter, %function
 792              	PWM_ReadCounter:
 793              	.LFB14:
 613:Generated_Source\PSoC4/PWM.c **** 
 614:Generated_Source\PSoC4/PWM.c **** 
 615:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 616:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCounter
 617:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 618:Generated_Source\PSoC4/PWM.c **** *
 619:Generated_Source\PSoC4/PWM.c **** * Summary:
 620:Generated_Source\PSoC4/PWM.c **** *  Reads the current counter value.
 621:Generated_Source\PSoC4/PWM.c **** *
 622:Generated_Source\PSoC4/PWM.c **** * Parameters:
 623:Generated_Source\PSoC4/PWM.c **** *  None
 624:Generated_Source\PSoC4/PWM.c **** *
 625:Generated_Source\PSoC4/PWM.c **** * Return:
 626:Generated_Source\PSoC4/PWM.c **** *  Current counter value
 627:Generated_Source\PSoC4/PWM.c **** *
 628:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 629:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCounter(void)
 630:Generated_Source\PSoC4/PWM.c **** {
 794              		.loc 1 630 0
 795              		.cfi_startproc
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 26


 796 0000 80B5     		push	{r7, lr}
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 00AF     		add	r7, sp, #0
 801              		.cfi_def_cfa_register 7
 631:Generated_Source\PSoC4/PWM.c ****     return (PWM_COUNTER_REG & PWM_16BIT_MASK);
 802              		.loc 1 631 0
 803 0004 034B     		ldr	r3, .L46
 804 0006 1B68     		ldr	r3, [r3]
 805 0008 1B04     		lsl	r3, r3, #16
 806 000a 1B0C     		lsr	r3, r3, #16
 632:Generated_Source\PSoC4/PWM.c **** }
 807              		.loc 1 632 0
 808 000c 181C     		mov	r0, r3
 809 000e BD46     		mov	sp, r7
 810              		@ sp needed
 811 0010 80BD     		pop	{r7, pc}
 812              	.L47:
 813 0012 C046     		.align	2
 814              	.L46:
 815 0014 08010540 		.word	1074069768
 816              		.cfi_endproc
 817              	.LFE14:
 818              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 819              		.section	.text.PWM_SetCounterMode,"ax",%progbits
 820              		.align	2
 821              		.global	PWM_SetCounterMode
 822              		.code	16
 823              		.thumb_func
 824              		.type	PWM_SetCounterMode, %function
 825              	PWM_SetCounterMode:
 826              	.LFB15:
 633:Generated_Source\PSoC4/PWM.c **** 
 634:Generated_Source\PSoC4/PWM.c **** 
 635:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 636:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCounterMode
 637:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 638:Generated_Source\PSoC4/PWM.c **** *
 639:Generated_Source\PSoC4/PWM.c **** * Summary:
 640:Generated_Source\PSoC4/PWM.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 641:Generated_Source\PSoC4/PWM.c **** *  and the PWM with a pseudo random output.
 642:Generated_Source\PSoC4/PWM.c **** *
 643:Generated_Source\PSoC4/PWM.c **** * Parameters:
 644:Generated_Source\PSoC4/PWM.c **** *  counterMode: Enumerated counter type values
 645:Generated_Source\PSoC4/PWM.c **** *   Values:
 646:Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_UP       - Counts up
 647:Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_DOWN     - Counts down
 648:Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_UPDOWN0  - Counts up and down. Terminal count
 649:Generated_Source\PSoC4/PWM.c **** *                                         generated when counter reaches 0
 650:Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_UPDOWN1  - Counts up and down. Terminal count
 651:Generated_Source\PSoC4/PWM.c **** *                                         generated both when counter reaches 0
 652:Generated_Source\PSoC4/PWM.c **** *                                         and period
 653:Generated_Source\PSoC4/PWM.c **** *
 654:Generated_Source\PSoC4/PWM.c **** * Return:
 655:Generated_Source\PSoC4/PWM.c **** *  None
 656:Generated_Source\PSoC4/PWM.c **** *
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 27


 657:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 658:Generated_Source\PSoC4/PWM.c **** void PWM_SetCounterMode(uint32 counterMode)
 659:Generated_Source\PSoC4/PWM.c **** {
 827              		.loc 1 659 0
 828              		.cfi_startproc
 829 0000 90B5     		push	{r4, r7, lr}
 830              		.cfi_def_cfa_offset 12
 831              		.cfi_offset 4, -12
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 85B0     		sub	sp, sp, #20
 835              		.cfi_def_cfa_offset 32
 836 0004 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 838 0006 7860     		str	r0, [r7, #4]
 660:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 661:Generated_Source\PSoC4/PWM.c **** 
 662:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 839              		.loc 1 662 0
 840 0008 0F23     		mov	r3, #15
 841 000a FC18     		add	r4, r7, r3
 842 000c FFF7FEFF 		bl	CyEnterCriticalSection
 843 0010 031C     		mov	r3, r0
 844 0012 2370     		strb	r3, [r4]
 663:Generated_Source\PSoC4/PWM.c **** 
 664:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_UPDOWN_MASK;
 845              		.loc 1 664 0
 846 0014 0A4B     		ldr	r3, .L49
 847 0016 0A4A     		ldr	r2, .L49
 848 0018 1268     		ldr	r2, [r2]
 849 001a 0A49     		ldr	r1, .L49+4
 850 001c 0A40     		and	r2, r1
 851 001e 1A60     		str	r2, [r3]
 665:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= counterMode;
 852              		.loc 1 665 0
 853 0020 074B     		ldr	r3, .L49
 854 0022 074A     		ldr	r2, .L49
 855 0024 1168     		ldr	r1, [r2]
 856 0026 7A68     		ldr	r2, [r7, #4]
 857 0028 0A43     		orr	r2, r1
 858 002a 1A60     		str	r2, [r3]
 666:Generated_Source\PSoC4/PWM.c **** 
 667:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 859              		.loc 1 667 0
 860 002c 0F23     		mov	r3, #15
 861 002e FB18     		add	r3, r7, r3
 862 0030 1B78     		ldrb	r3, [r3]
 863 0032 181C     		mov	r0, r3
 864 0034 FFF7FEFF 		bl	CyExitCriticalSection
 668:Generated_Source\PSoC4/PWM.c **** }
 865              		.loc 1 668 0
 866 0038 BD46     		mov	sp, r7
 867 003a 05B0     		add	sp, sp, #20
 868              		@ sp needed
 869 003c 90BD     		pop	{r4, r7, pc}
 870              	.L50:
 871 003e C046     		.align	2
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 28


 872              	.L49:
 873 0040 00010540 		.word	1074069760
 874 0044 FFFFFCFF 		.word	-196609
 875              		.cfi_endproc
 876              	.LFE15:
 877              		.size	PWM_SetCounterMode, .-PWM_SetCounterMode
 878              		.section	.text.PWM_WritePeriod,"ax",%progbits
 879              		.align	2
 880              		.global	PWM_WritePeriod
 881              		.code	16
 882              		.thumb_func
 883              		.type	PWM_WritePeriod, %function
 884              	PWM_WritePeriod:
 885              	.LFB16:
 669:Generated_Source\PSoC4/PWM.c **** 
 670:Generated_Source\PSoC4/PWM.c **** 
 671:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 672:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WritePeriod
 673:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 674:Generated_Source\PSoC4/PWM.c **** *
 675:Generated_Source\PSoC4/PWM.c **** * Summary:
 676:Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit period register with the new period value.
 677:Generated_Source\PSoC4/PWM.c **** *  To cause the counter to count for N cycles this register should be written
 678:Generated_Source\PSoC4/PWM.c **** *  with N-1 (counts from 0 to period inclusive).
 679:Generated_Source\PSoC4/PWM.c **** *
 680:Generated_Source\PSoC4/PWM.c **** * Parameters:
 681:Generated_Source\PSoC4/PWM.c **** *  period: Period value
 682:Generated_Source\PSoC4/PWM.c **** *
 683:Generated_Source\PSoC4/PWM.c **** * Return:
 684:Generated_Source\PSoC4/PWM.c **** *  None
 685:Generated_Source\PSoC4/PWM.c **** *
 686:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 687:Generated_Source\PSoC4/PWM.c **** void PWM_WritePeriod(uint32 period)
 688:Generated_Source\PSoC4/PWM.c **** {
 886              		.loc 1 688 0
 887              		.cfi_startproc
 888 0000 80B5     		push	{r7, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 82B0     		sub	sp, sp, #8
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
 689:Generated_Source\PSoC4/PWM.c ****     PWM_PERIOD_REG = (period & PWM_16BIT_MASK);
 897              		.loc 1 689 0
 898 0008 034B     		ldr	r3, .L52
 899 000a 7A68     		ldr	r2, [r7, #4]
 900 000c 1204     		lsl	r2, r2, #16
 901 000e 120C     		lsr	r2, r2, #16
 902 0010 1A60     		str	r2, [r3]
 690:Generated_Source\PSoC4/PWM.c **** }
 903              		.loc 1 690 0
 904 0012 BD46     		mov	sp, r7
 905 0014 02B0     		add	sp, sp, #8
 906              		@ sp needed
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 29


 907 0016 80BD     		pop	{r7, pc}
 908              	.L53:
 909              		.align	2
 910              	.L52:
 911 0018 14010540 		.word	1074069780
 912              		.cfi_endproc
 913              	.LFE16:
 914              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 915              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 916              		.align	2
 917              		.global	PWM_ReadPeriod
 918              		.code	16
 919              		.thumb_func
 920              		.type	PWM_ReadPeriod, %function
 921              	PWM_ReadPeriod:
 922              	.LFB17:
 691:Generated_Source\PSoC4/PWM.c **** 
 692:Generated_Source\PSoC4/PWM.c **** 
 693:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 694:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadPeriod
 695:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 696:Generated_Source\PSoC4/PWM.c **** *
 697:Generated_Source\PSoC4/PWM.c **** * Summary:
 698:Generated_Source\PSoC4/PWM.c **** *  Reads the 16 bit period register.
 699:Generated_Source\PSoC4/PWM.c **** *
 700:Generated_Source\PSoC4/PWM.c **** * Parameters:
 701:Generated_Source\PSoC4/PWM.c **** *  None
 702:Generated_Source\PSoC4/PWM.c **** *
 703:Generated_Source\PSoC4/PWM.c **** * Return:
 704:Generated_Source\PSoC4/PWM.c **** *  Period value
 705:Generated_Source\PSoC4/PWM.c **** *
 706:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 707:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadPeriod(void)
 708:Generated_Source\PSoC4/PWM.c **** {
 923              		.loc 1 708 0
 924              		.cfi_startproc
 925 0000 80B5     		push	{r7, lr}
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 709:Generated_Source\PSoC4/PWM.c ****     return (PWM_PERIOD_REG & PWM_16BIT_MASK);
 931              		.loc 1 709 0
 932 0004 034B     		ldr	r3, .L56
 933 0006 1B68     		ldr	r3, [r3]
 934 0008 1B04     		lsl	r3, r3, #16
 935 000a 1B0C     		lsr	r3, r3, #16
 710:Generated_Source\PSoC4/PWM.c **** }
 936              		.loc 1 710 0
 937 000c 181C     		mov	r0, r3
 938 000e BD46     		mov	sp, r7
 939              		@ sp needed
 940 0010 80BD     		pop	{r7, pc}
 941              	.L57:
 942 0012 C046     		.align	2
 943              	.L56:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 30


 944 0014 14010540 		.word	1074069780
 945              		.cfi_endproc
 946              	.LFE17:
 947              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 948              		.section	.text.PWM_SetCompareSwap,"ax",%progbits
 949              		.align	2
 950              		.global	PWM_SetCompareSwap
 951              		.code	16
 952              		.thumb_func
 953              		.type	PWM_SetCompareSwap, %function
 954              	PWM_SetCompareSwap:
 955              	.LFB18:
 711:Generated_Source\PSoC4/PWM.c **** 
 712:Generated_Source\PSoC4/PWM.c **** 
 713:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 714:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCompareSwap
 715:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 716:Generated_Source\PSoC4/PWM.c **** *
 717:Generated_Source\PSoC4/PWM.c **** * Summary:
 718:Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the compare registers are
 719:Generated_Source\PSoC4/PWM.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 720:Generated_Source\PSoC4/PWM.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 721:Generated_Source\PSoC4/PWM.c **** *  following a hardware switch event.
 722:Generated_Source\PSoC4/PWM.c **** *
 723:Generated_Source\PSoC4/PWM.c **** * Parameters:
 724:Generated_Source\PSoC4/PWM.c **** *  swapEnable
 725:Generated_Source\PSoC4/PWM.c **** *   Values:
 726:Generated_Source\PSoC4/PWM.c **** *     - 0 - Disable swap
 727:Generated_Source\PSoC4/PWM.c **** *     - 1 - Enable swap
 728:Generated_Source\PSoC4/PWM.c **** *
 729:Generated_Source\PSoC4/PWM.c **** * Return:
 730:Generated_Source\PSoC4/PWM.c **** *  None
 731:Generated_Source\PSoC4/PWM.c **** *
 732:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 733:Generated_Source\PSoC4/PWM.c **** void PWM_SetCompareSwap(uint32 swapEnable)
 734:Generated_Source\PSoC4/PWM.c **** {
 956              		.loc 1 734 0
 957              		.cfi_startproc
 958 0000 90B5     		push	{r4, r7, lr}
 959              		.cfi_def_cfa_offset 12
 960              		.cfi_offset 4, -12
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 0002 85B0     		sub	sp, sp, #20
 964              		.cfi_def_cfa_offset 32
 965 0004 00AF     		add	r7, sp, #0
 966              		.cfi_def_cfa_register 7
 967 0006 7860     		str	r0, [r7, #4]
 735:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 736:Generated_Source\PSoC4/PWM.c **** 
 737:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 968              		.loc 1 737 0
 969 0008 0F23     		mov	r3, #15
 970 000a FC18     		add	r4, r7, r3
 971 000c FFF7FEFF 		bl	CyEnterCriticalSection
 972 0010 031C     		mov	r3, r0
 973 0012 2370     		strb	r3, [r4]
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 31


 738:Generated_Source\PSoC4/PWM.c **** 
 739:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_RELOAD_CC_MASK;
 974              		.loc 1 739 0
 975 0014 0B4B     		ldr	r3, .L59
 976 0016 0B4A     		ldr	r2, .L59
 977 0018 1268     		ldr	r2, [r2]
 978 001a 0121     		mov	r1, #1
 979 001c 8A43     		bic	r2, r1
 980 001e 1A60     		str	r2, [r3]
 740:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= (swapEnable & PWM_1BIT_MASK);
 981              		.loc 1 740 0
 982 0020 084B     		ldr	r3, .L59
 983 0022 084A     		ldr	r2, .L59
 984 0024 1168     		ldr	r1, [r2]
 985 0026 7A68     		ldr	r2, [r7, #4]
 986 0028 0120     		mov	r0, #1
 987 002a 0240     		and	r2, r0
 988 002c 0A43     		orr	r2, r1
 989 002e 1A60     		str	r2, [r3]
 741:Generated_Source\PSoC4/PWM.c **** 
 742:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 990              		.loc 1 742 0
 991 0030 0F23     		mov	r3, #15
 992 0032 FB18     		add	r3, r7, r3
 993 0034 1B78     		ldrb	r3, [r3]
 994 0036 181C     		mov	r0, r3
 995 0038 FFF7FEFF 		bl	CyExitCriticalSection
 743:Generated_Source\PSoC4/PWM.c **** }
 996              		.loc 1 743 0
 997 003c BD46     		mov	sp, r7
 998 003e 05B0     		add	sp, sp, #20
 999              		@ sp needed
 1000 0040 90BD     		pop	{r4, r7, pc}
 1001              	.L60:
 1002 0042 C046     		.align	2
 1003              	.L59:
 1004 0044 00010540 		.word	1074069760
 1005              		.cfi_endproc
 1006              	.LFE18:
 1007              		.size	PWM_SetCompareSwap, .-PWM_SetCompareSwap
 1008              		.section	.text.PWM_WritePeriodBuf,"ax",%progbits
 1009              		.align	2
 1010              		.global	PWM_WritePeriodBuf
 1011              		.code	16
 1012              		.thumb_func
 1013              		.type	PWM_WritePeriodBuf, %function
 1014              	PWM_WritePeriodBuf:
 1015              	.LFB19:
 744:Generated_Source\PSoC4/PWM.c **** 
 745:Generated_Source\PSoC4/PWM.c **** 
 746:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 747:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WritePeriodBuf
 748:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 749:Generated_Source\PSoC4/PWM.c **** *
 750:Generated_Source\PSoC4/PWM.c **** * Summary:
 751:Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit period buf register with the new period value.
 752:Generated_Source\PSoC4/PWM.c **** *
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 32


 753:Generated_Source\PSoC4/PWM.c **** * Parameters:
 754:Generated_Source\PSoC4/PWM.c **** *  periodBuf: Period value
 755:Generated_Source\PSoC4/PWM.c **** *
 756:Generated_Source\PSoC4/PWM.c **** * Return:
 757:Generated_Source\PSoC4/PWM.c **** *  None
 758:Generated_Source\PSoC4/PWM.c **** *
 759:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 760:Generated_Source\PSoC4/PWM.c **** void PWM_WritePeriodBuf(uint32 periodBuf)
 761:Generated_Source\PSoC4/PWM.c **** {
 1016              		.loc 1 761 0
 1017              		.cfi_startproc
 1018 0000 80B5     		push	{r7, lr}
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 7, -8
 1021              		.cfi_offset 14, -4
 1022 0002 82B0     		sub	sp, sp, #8
 1023              		.cfi_def_cfa_offset 16
 1024 0004 00AF     		add	r7, sp, #0
 1025              		.cfi_def_cfa_register 7
 1026 0006 7860     		str	r0, [r7, #4]
 762:Generated_Source\PSoC4/PWM.c ****     PWM_PERIOD_BUF_REG = (periodBuf & PWM_16BIT_MASK);
 1027              		.loc 1 762 0
 1028 0008 034B     		ldr	r3, .L62
 1029 000a 7A68     		ldr	r2, [r7, #4]
 1030 000c 1204     		lsl	r2, r2, #16
 1031 000e 120C     		lsr	r2, r2, #16
 1032 0010 1A60     		str	r2, [r3]
 763:Generated_Source\PSoC4/PWM.c **** }
 1033              		.loc 1 763 0
 1034 0012 BD46     		mov	sp, r7
 1035 0014 02B0     		add	sp, sp, #8
 1036              		@ sp needed
 1037 0016 80BD     		pop	{r7, pc}
 1038              	.L63:
 1039              		.align	2
 1040              	.L62:
 1041 0018 18010540 		.word	1074069784
 1042              		.cfi_endproc
 1043              	.LFE19:
 1044              		.size	PWM_WritePeriodBuf, .-PWM_WritePeriodBuf
 1045              		.section	.text.PWM_ReadPeriodBuf,"ax",%progbits
 1046              		.align	2
 1047              		.global	PWM_ReadPeriodBuf
 1048              		.code	16
 1049              		.thumb_func
 1050              		.type	PWM_ReadPeriodBuf, %function
 1051              	PWM_ReadPeriodBuf:
 1052              	.LFB20:
 764:Generated_Source\PSoC4/PWM.c **** 
 765:Generated_Source\PSoC4/PWM.c **** 
 766:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 767:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadPeriodBuf
 768:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 769:Generated_Source\PSoC4/PWM.c **** *
 770:Generated_Source\PSoC4/PWM.c **** * Summary:
 771:Generated_Source\PSoC4/PWM.c **** *  Reads the 16 bit period buf register.
 772:Generated_Source\PSoC4/PWM.c **** *
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 33


 773:Generated_Source\PSoC4/PWM.c **** * Parameters:
 774:Generated_Source\PSoC4/PWM.c **** *  None
 775:Generated_Source\PSoC4/PWM.c **** *
 776:Generated_Source\PSoC4/PWM.c **** * Return:
 777:Generated_Source\PSoC4/PWM.c **** *  Period value
 778:Generated_Source\PSoC4/PWM.c **** *
 779:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 780:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadPeriodBuf(void)
 781:Generated_Source\PSoC4/PWM.c **** {
 1053              		.loc 1 781 0
 1054              		.cfi_startproc
 1055 0000 80B5     		push	{r7, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 782:Generated_Source\PSoC4/PWM.c ****     return (PWM_PERIOD_BUF_REG & PWM_16BIT_MASK);
 1061              		.loc 1 782 0
 1062 0004 034B     		ldr	r3, .L66
 1063 0006 1B68     		ldr	r3, [r3]
 1064 0008 1B04     		lsl	r3, r3, #16
 1065 000a 1B0C     		lsr	r3, r3, #16
 783:Generated_Source\PSoC4/PWM.c **** }
 1066              		.loc 1 783 0
 1067 000c 181C     		mov	r0, r3
 1068 000e BD46     		mov	sp, r7
 1069              		@ sp needed
 1070 0010 80BD     		pop	{r7, pc}
 1071              	.L67:
 1072 0012 C046     		.align	2
 1073              	.L66:
 1074 0014 18010540 		.word	1074069784
 1075              		.cfi_endproc
 1076              	.LFE20:
 1077              		.size	PWM_ReadPeriodBuf, .-PWM_ReadPeriodBuf
 1078              		.section	.text.PWM_SetPeriodSwap,"ax",%progbits
 1079              		.align	2
 1080              		.global	PWM_SetPeriodSwap
 1081              		.code	16
 1082              		.thumb_func
 1083              		.type	PWM_SetPeriodSwap, %function
 1084              	PWM_SetPeriodSwap:
 1085              	.LFB21:
 784:Generated_Source\PSoC4/PWM.c **** 
 785:Generated_Source\PSoC4/PWM.c **** 
 786:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 787:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPeriodSwap
 788:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 789:Generated_Source\PSoC4/PWM.c **** *
 790:Generated_Source\PSoC4/PWM.c **** * Summary:
 791:Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the period registers are
 792:Generated_Source\PSoC4/PWM.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
 793:Generated_Source\PSoC4/PWM.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 794:Generated_Source\PSoC4/PWM.c **** *  switch event.
 795:Generated_Source\PSoC4/PWM.c **** *
 796:Generated_Source\PSoC4/PWM.c **** * Parameters:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 34


 797:Generated_Source\PSoC4/PWM.c **** *  swapEnable
 798:Generated_Source\PSoC4/PWM.c **** *   Values:
 799:Generated_Source\PSoC4/PWM.c **** *     - 0 - Disable swap
 800:Generated_Source\PSoC4/PWM.c **** *     - 1 - Enable swap
 801:Generated_Source\PSoC4/PWM.c **** *
 802:Generated_Source\PSoC4/PWM.c **** * Return:
 803:Generated_Source\PSoC4/PWM.c **** *  None
 804:Generated_Source\PSoC4/PWM.c **** *
 805:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 806:Generated_Source\PSoC4/PWM.c **** void PWM_SetPeriodSwap(uint32 swapEnable)
 807:Generated_Source\PSoC4/PWM.c **** {
 1086              		.loc 1 807 0
 1087              		.cfi_startproc
 1088 0000 90B5     		push	{r4, r7, lr}
 1089              		.cfi_def_cfa_offset 12
 1090              		.cfi_offset 4, -12
 1091              		.cfi_offset 7, -8
 1092              		.cfi_offset 14, -4
 1093 0002 85B0     		sub	sp, sp, #20
 1094              		.cfi_def_cfa_offset 32
 1095 0004 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 0006 7860     		str	r0, [r7, #4]
 808:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 809:Generated_Source\PSoC4/PWM.c **** 
 810:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1098              		.loc 1 810 0
 1099 0008 0F23     		mov	r3, #15
 1100 000a FC18     		add	r4, r7, r3
 1101 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1102 0010 031C     		mov	r3, r0
 1103 0012 2370     		strb	r3, [r4]
 811:Generated_Source\PSoC4/PWM.c **** 
 812:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_RELOAD_PERIOD_MASK;
 1104              		.loc 1 812 0
 1105 0014 0B4B     		ldr	r3, .L69
 1106 0016 0B4A     		ldr	r2, .L69
 1107 0018 1268     		ldr	r2, [r2]
 1108 001a 0221     		mov	r1, #2
 1109 001c 8A43     		bic	r2, r1
 1110 001e 1A60     		str	r2, [r3]
 813:Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((swapEnable & PWM_1BIT_MASK) <<
 1111              		.loc 1 813 0
 1112 0020 084B     		ldr	r3, .L69
 1113 0022 084A     		ldr	r2, .L69
 1114 0024 1168     		ldr	r1, [r2]
 1115 0026 7A68     		ldr	r2, [r7, #4]
 1116 0028 0120     		mov	r0, #1
 1117 002a 0240     		and	r2, r0
 1118 002c 5200     		lsl	r2, r2, #1
 1119 002e 0A43     		orr	r2, r1
 1120 0030 1A60     		str	r2, [r3]
 814:Generated_Source\PSoC4/PWM.c ****                                                             PWM_RELOAD_PERIOD_SHIFT));
 815:Generated_Source\PSoC4/PWM.c **** 
 816:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1121              		.loc 1 816 0
 1122 0032 0F23     		mov	r3, #15
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 35


 1123 0034 FB18     		add	r3, r7, r3
 1124 0036 1B78     		ldrb	r3, [r3]
 1125 0038 181C     		mov	r0, r3
 1126 003a FFF7FEFF 		bl	CyExitCriticalSection
 817:Generated_Source\PSoC4/PWM.c **** }
 1127              		.loc 1 817 0
 1128 003e BD46     		mov	sp, r7
 1129 0040 05B0     		add	sp, sp, #20
 1130              		@ sp needed
 1131 0042 90BD     		pop	{r4, r7, pc}
 1132              	.L70:
 1133              		.align	2
 1134              	.L69:
 1135 0044 00010540 		.word	1074069760
 1136              		.cfi_endproc
 1137              	.LFE21:
 1138              		.size	PWM_SetPeriodSwap, .-PWM_SetPeriodSwap
 1139              		.section	.text.PWM_WriteCompare,"ax",%progbits
 1140              		.align	2
 1141              		.global	PWM_WriteCompare
 1142              		.code	16
 1143              		.thumb_func
 1144              		.type	PWM_WriteCompare, %function
 1145              	PWM_WriteCompare:
 1146              	.LFB22:
 818:Generated_Source\PSoC4/PWM.c **** 
 819:Generated_Source\PSoC4/PWM.c **** 
 820:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 821:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WriteCompare
 822:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 823:Generated_Source\PSoC4/PWM.c **** *
 824:Generated_Source\PSoC4/PWM.c **** * Summary:
 825:Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit compare register with the new compare value. Not
 826:Generated_Source\PSoC4/PWM.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 827:Generated_Source\PSoC4/PWM.c **** *
 828:Generated_Source\PSoC4/PWM.c **** * Parameters:
 829:Generated_Source\PSoC4/PWM.c **** *  compare: Compare value
 830:Generated_Source\PSoC4/PWM.c **** *
 831:Generated_Source\PSoC4/PWM.c **** * Return:
 832:Generated_Source\PSoC4/PWM.c **** *  None
 833:Generated_Source\PSoC4/PWM.c **** *
 834:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 835:Generated_Source\PSoC4/PWM.c **** void PWM_WriteCompare(uint32 compare)
 836:Generated_Source\PSoC4/PWM.c **** {
 1147              		.loc 1 836 0
 1148              		.cfi_startproc
 1149 0000 80B5     		push	{r7, lr}
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 7, -8
 1152              		.cfi_offset 14, -4
 1153 0002 82B0     		sub	sp, sp, #8
 1154              		.cfi_def_cfa_offset 16
 1155 0004 00AF     		add	r7, sp, #0
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
 837:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 838:Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 36


 839:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 840:Generated_Source\PSoC4/PWM.c **** 
 841:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 842:Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 843:Generated_Source\PSoC4/PWM.c **** 
 844:Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0xFFFFu != compare))
 845:Generated_Source\PSoC4/PWM.c ****         {
 846:Generated_Source\PSoC4/PWM.c ****             compare++;
 847:Generated_Source\PSoC4/PWM.c ****         }
 848:Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0u != compare))
 849:Generated_Source\PSoC4/PWM.c ****         {
 850:Generated_Source\PSoC4/PWM.c ****             compare--;
 851:Generated_Source\PSoC4/PWM.c ****         }
 852:Generated_Source\PSoC4/PWM.c ****         else
 853:Generated_Source\PSoC4/PWM.c ****         {
 854:Generated_Source\PSoC4/PWM.c ****         }
 855:Generated_Source\PSoC4/PWM.c ****         
 856:Generated_Source\PSoC4/PWM.c ****     
 857:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 858:Generated_Source\PSoC4/PWM.c ****     
 859:Generated_Source\PSoC4/PWM.c ****     PWM_COMP_CAP_REG = (compare & PWM_16BIT_MASK);
 1158              		.loc 1 859 0
 1159 0008 034B     		ldr	r3, .L72
 1160 000a 7A68     		ldr	r2, [r7, #4]
 1161 000c 1204     		lsl	r2, r2, #16
 1162 000e 120C     		lsr	r2, r2, #16
 1163 0010 1A60     		str	r2, [r3]
 860:Generated_Source\PSoC4/PWM.c **** }
 1164              		.loc 1 860 0
 1165 0012 BD46     		mov	sp, r7
 1166 0014 02B0     		add	sp, sp, #8
 1167              		@ sp needed
 1168 0016 80BD     		pop	{r7, pc}
 1169              	.L73:
 1170              		.align	2
 1171              	.L72:
 1172 0018 0C010540 		.word	1074069772
 1173              		.cfi_endproc
 1174              	.LFE22:
 1175              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 1176              		.section	.text.PWM_ReadCompare,"ax",%progbits
 1177              		.align	2
 1178              		.global	PWM_ReadCompare
 1179              		.code	16
 1180              		.thumb_func
 1181              		.type	PWM_ReadCompare, %function
 1182              	PWM_ReadCompare:
 1183              	.LFB23:
 861:Generated_Source\PSoC4/PWM.c **** 
 862:Generated_Source\PSoC4/PWM.c **** 
 863:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 864:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCompare
 865:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 866:Generated_Source\PSoC4/PWM.c **** *
 867:Generated_Source\PSoC4/PWM.c **** * Summary:
 868:Generated_Source\PSoC4/PWM.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 869:Generated_Source\PSoC4/PWM.c **** *  or in Quadrature Decoder modes.
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 37


 870:Generated_Source\PSoC4/PWM.c **** *
 871:Generated_Source\PSoC4/PWM.c **** * Parameters:
 872:Generated_Source\PSoC4/PWM.c **** *  None
 873:Generated_Source\PSoC4/PWM.c **** *
 874:Generated_Source\PSoC4/PWM.c **** * Return:
 875:Generated_Source\PSoC4/PWM.c **** *  Compare value
 876:Generated_Source\PSoC4/PWM.c **** *
 877:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 878:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCompare(void)
 879:Generated_Source\PSoC4/PWM.c **** {
 1184              		.loc 1 879 0
 1185              		.cfi_startproc
 1186 0000 80B5     		push	{r7, lr}
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 7, -8
 1189              		.cfi_offset 14, -4
 1190 0002 00AF     		add	r7, sp, #0
 1191              		.cfi_def_cfa_register 7
 880:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 881:Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 882:Generated_Source\PSoC4/PWM.c ****         uint32 regVal;
 883:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 884:Generated_Source\PSoC4/PWM.c **** 
 885:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 886:Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 887:Generated_Source\PSoC4/PWM.c ****         
 888:Generated_Source\PSoC4/PWM.c ****         regVal = PWM_COMP_CAP_REG;
 889:Generated_Source\PSoC4/PWM.c ****         
 890:Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0u != regVal))
 891:Generated_Source\PSoC4/PWM.c ****         {
 892:Generated_Source\PSoC4/PWM.c ****             regVal--;
 893:Generated_Source\PSoC4/PWM.c ****         }
 894:Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 895:Generated_Source\PSoC4/PWM.c ****         {
 896:Generated_Source\PSoC4/PWM.c ****             regVal++;
 897:Generated_Source\PSoC4/PWM.c ****         }
 898:Generated_Source\PSoC4/PWM.c ****         else
 899:Generated_Source\PSoC4/PWM.c ****         {
 900:Generated_Source\PSoC4/PWM.c ****         }
 901:Generated_Source\PSoC4/PWM.c **** 
 902:Generated_Source\PSoC4/PWM.c ****         return (regVal & PWM_16BIT_MASK);
 903:Generated_Source\PSoC4/PWM.c ****     #else
 904:Generated_Source\PSoC4/PWM.c ****         return (PWM_COMP_CAP_REG & PWM_16BIT_MASK);
 1192              		.loc 1 904 0
 1193 0004 034B     		ldr	r3, .L76
 1194 0006 1B68     		ldr	r3, [r3]
 1195 0008 1B04     		lsl	r3, r3, #16
 1196 000a 1B0C     		lsr	r3, r3, #16
 905:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 906:Generated_Source\PSoC4/PWM.c **** }
 1197              		.loc 1 906 0
 1198 000c 181C     		mov	r0, r3
 1199 000e BD46     		mov	sp, r7
 1200              		@ sp needed
 1201 0010 80BD     		pop	{r7, pc}
 1202              	.L77:
 1203 0012 C046     		.align	2
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 38


 1204              	.L76:
 1205 0014 0C010540 		.word	1074069772
 1206              		.cfi_endproc
 1207              	.LFE23:
 1208              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 1209              		.section	.text.PWM_WriteCompareBuf,"ax",%progbits
 1210              		.align	2
 1211              		.global	PWM_WriteCompareBuf
 1212              		.code	16
 1213              		.thumb_func
 1214              		.type	PWM_WriteCompareBuf, %function
 1215              	PWM_WriteCompareBuf:
 1216              	.LFB24:
 907:Generated_Source\PSoC4/PWM.c **** 
 908:Generated_Source\PSoC4/PWM.c **** 
 909:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 910:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WriteCompareBuf
 911:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 912:Generated_Source\PSoC4/PWM.c **** *
 913:Generated_Source\PSoC4/PWM.c **** * Summary:
 914:Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 915:Generated_Source\PSoC4/PWM.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 916:Generated_Source\PSoC4/PWM.c **** *
 917:Generated_Source\PSoC4/PWM.c **** * Parameters:
 918:Generated_Source\PSoC4/PWM.c **** *  compareBuf: Compare value
 919:Generated_Source\PSoC4/PWM.c **** *
 920:Generated_Source\PSoC4/PWM.c **** * Return:
 921:Generated_Source\PSoC4/PWM.c **** *  None
 922:Generated_Source\PSoC4/PWM.c **** *
 923:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 924:Generated_Source\PSoC4/PWM.c **** void PWM_WriteCompareBuf(uint32 compareBuf)
 925:Generated_Source\PSoC4/PWM.c **** {
 1217              		.loc 1 925 0
 1218              		.cfi_startproc
 1219 0000 80B5     		push	{r7, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 0002 82B0     		sub	sp, sp, #8
 1224              		.cfi_def_cfa_offset 16
 1225 0004 00AF     		add	r7, sp, #0
 1226              		.cfi_def_cfa_register 7
 1227 0006 7860     		str	r0, [r7, #4]
 926:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 927:Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 928:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 929:Generated_Source\PSoC4/PWM.c **** 
 930:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 931:Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 932:Generated_Source\PSoC4/PWM.c **** 
 933:Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0xFFFFu != compareBuf))
 934:Generated_Source\PSoC4/PWM.c ****         {
 935:Generated_Source\PSoC4/PWM.c ****             compareBuf++;
 936:Generated_Source\PSoC4/PWM.c ****         }
 937:Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0u != compareBuf))
 938:Generated_Source\PSoC4/PWM.c ****         {
 939:Generated_Source\PSoC4/PWM.c ****             compareBuf --;
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 39


 940:Generated_Source\PSoC4/PWM.c ****         }
 941:Generated_Source\PSoC4/PWM.c ****         else
 942:Generated_Source\PSoC4/PWM.c ****         {
 943:Generated_Source\PSoC4/PWM.c ****         }
 944:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 945:Generated_Source\PSoC4/PWM.c ****     
 946:Generated_Source\PSoC4/PWM.c ****     PWM_COMP_CAP_BUF_REG = (compareBuf & PWM_16BIT_MASK);
 1228              		.loc 1 946 0
 1229 0008 034B     		ldr	r3, .L79
 1230 000a 7A68     		ldr	r2, [r7, #4]
 1231 000c 1204     		lsl	r2, r2, #16
 1232 000e 120C     		lsr	r2, r2, #16
 1233 0010 1A60     		str	r2, [r3]
 947:Generated_Source\PSoC4/PWM.c **** }
 1234              		.loc 1 947 0
 1235 0012 BD46     		mov	sp, r7
 1236 0014 02B0     		add	sp, sp, #8
 1237              		@ sp needed
 1238 0016 80BD     		pop	{r7, pc}
 1239              	.L80:
 1240              		.align	2
 1241              	.L79:
 1242 0018 10010540 		.word	1074069776
 1243              		.cfi_endproc
 1244              	.LFE24:
 1245              		.size	PWM_WriteCompareBuf, .-PWM_WriteCompareBuf
 1246              		.section	.text.PWM_ReadCompareBuf,"ax",%progbits
 1247              		.align	2
 1248              		.global	PWM_ReadCompareBuf
 1249              		.code	16
 1250              		.thumb_func
 1251              		.type	PWM_ReadCompareBuf, %function
 1252              	PWM_ReadCompareBuf:
 1253              	.LFB25:
 948:Generated_Source\PSoC4/PWM.c **** 
 949:Generated_Source\PSoC4/PWM.c **** 
 950:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 951:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCompareBuf
 952:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 953:Generated_Source\PSoC4/PWM.c **** *
 954:Generated_Source\PSoC4/PWM.c **** * Summary:
 955:Generated_Source\PSoC4/PWM.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
 956:Generated_Source\PSoC4/PWM.c **** *  Capture or in Quadrature Decoder modes.
 957:Generated_Source\PSoC4/PWM.c **** *
 958:Generated_Source\PSoC4/PWM.c **** * Parameters:
 959:Generated_Source\PSoC4/PWM.c **** *  None
 960:Generated_Source\PSoC4/PWM.c **** *
 961:Generated_Source\PSoC4/PWM.c **** * Return:
 962:Generated_Source\PSoC4/PWM.c **** *  Compare buffer value
 963:Generated_Source\PSoC4/PWM.c **** *
 964:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 965:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCompareBuf(void)
 966:Generated_Source\PSoC4/PWM.c **** {
 1254              		.loc 1 966 0
 1255              		.cfi_startproc
 1256 0000 80B5     		push	{r7, lr}
 1257              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 40


 1258              		.cfi_offset 7, -8
 1259              		.cfi_offset 14, -4
 1260 0002 00AF     		add	r7, sp, #0
 1261              		.cfi_def_cfa_register 7
 967:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 968:Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 969:Generated_Source\PSoC4/PWM.c ****         uint32 regVal;
 970:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 971:Generated_Source\PSoC4/PWM.c **** 
 972:Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 973:Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 974:Generated_Source\PSoC4/PWM.c **** 
 975:Generated_Source\PSoC4/PWM.c ****         regVal = PWM_COMP_CAP_BUF_REG;
 976:Generated_Source\PSoC4/PWM.c ****         
 977:Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0u != regVal))
 978:Generated_Source\PSoC4/PWM.c ****         {
 979:Generated_Source\PSoC4/PWM.c ****             regVal--;
 980:Generated_Source\PSoC4/PWM.c ****         }
 981:Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 982:Generated_Source\PSoC4/PWM.c ****         {
 983:Generated_Source\PSoC4/PWM.c ****             regVal++;
 984:Generated_Source\PSoC4/PWM.c ****         }
 985:Generated_Source\PSoC4/PWM.c ****         else
 986:Generated_Source\PSoC4/PWM.c ****         {
 987:Generated_Source\PSoC4/PWM.c ****         }
 988:Generated_Source\PSoC4/PWM.c **** 
 989:Generated_Source\PSoC4/PWM.c ****         return (regVal & PWM_16BIT_MASK);
 990:Generated_Source\PSoC4/PWM.c ****     #else
 991:Generated_Source\PSoC4/PWM.c ****         return (PWM_COMP_CAP_BUF_REG & PWM_16BIT_MASK);
 1262              		.loc 1 991 0
 1263 0004 034B     		ldr	r3, .L83
 1264 0006 1B68     		ldr	r3, [r3]
 1265 0008 1B04     		lsl	r3, r3, #16
 1266 000a 1B0C     		lsr	r3, r3, #16
 992:Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 993:Generated_Source\PSoC4/PWM.c **** }
 1267              		.loc 1 993 0
 1268 000c 181C     		mov	r0, r3
 1269 000e BD46     		mov	sp, r7
 1270              		@ sp needed
 1271 0010 80BD     		pop	{r7, pc}
 1272              	.L84:
 1273 0012 C046     		.align	2
 1274              	.L83:
 1275 0014 10010540 		.word	1074069776
 1276              		.cfi_endproc
 1277              	.LFE25:
 1278              		.size	PWM_ReadCompareBuf, .-PWM_ReadCompareBuf
 1279              		.section	.text.PWM_ReadCapture,"ax",%progbits
 1280              		.align	2
 1281              		.global	PWM_ReadCapture
 1282              		.code	16
 1283              		.thumb_func
 1284              		.type	PWM_ReadCapture, %function
 1285              	PWM_ReadCapture:
 1286              	.LFB26:
 994:Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 41


 995:Generated_Source\PSoC4/PWM.c **** 
 996:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 997:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCapture
 998:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 999:Generated_Source\PSoC4/PWM.c **** *
1000:Generated_Source\PSoC4/PWM.c **** * Summary:
1001:Generated_Source\PSoC4/PWM.c **** *  Reads the captured counter value. This API is applicable only for
1002:Generated_Source\PSoC4/PWM.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1003:Generated_Source\PSoC4/PWM.c **** *
1004:Generated_Source\PSoC4/PWM.c **** * Parameters:
1005:Generated_Source\PSoC4/PWM.c **** *  None
1006:Generated_Source\PSoC4/PWM.c **** *
1007:Generated_Source\PSoC4/PWM.c **** * Return:
1008:Generated_Source\PSoC4/PWM.c **** *  Capture value
1009:Generated_Source\PSoC4/PWM.c **** *
1010:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1011:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCapture(void)
1012:Generated_Source\PSoC4/PWM.c **** {
 1287              		.loc 1 1012 0
 1288              		.cfi_startproc
 1289 0000 80B5     		push	{r7, lr}
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 7, -8
 1292              		.cfi_offset 14, -4
 1293 0002 00AF     		add	r7, sp, #0
 1294              		.cfi_def_cfa_register 7
1013:Generated_Source\PSoC4/PWM.c ****     return (PWM_COMP_CAP_REG & PWM_16BIT_MASK);
 1295              		.loc 1 1013 0
 1296 0004 034B     		ldr	r3, .L87
 1297 0006 1B68     		ldr	r3, [r3]
 1298 0008 1B04     		lsl	r3, r3, #16
 1299 000a 1B0C     		lsr	r3, r3, #16
1014:Generated_Source\PSoC4/PWM.c **** }
 1300              		.loc 1 1014 0
 1301 000c 181C     		mov	r0, r3
 1302 000e BD46     		mov	sp, r7
 1303              		@ sp needed
 1304 0010 80BD     		pop	{r7, pc}
 1305              	.L88:
 1306 0012 C046     		.align	2
 1307              	.L87:
 1308 0014 0C010540 		.word	1074069772
 1309              		.cfi_endproc
 1310              	.LFE26:
 1311              		.size	PWM_ReadCapture, .-PWM_ReadCapture
 1312              		.section	.text.PWM_ReadCaptureBuf,"ax",%progbits
 1313              		.align	2
 1314              		.global	PWM_ReadCaptureBuf
 1315              		.code	16
 1316              		.thumb_func
 1317              		.type	PWM_ReadCaptureBuf, %function
 1318              	PWM_ReadCaptureBuf:
 1319              	.LFB27:
1015:Generated_Source\PSoC4/PWM.c **** 
1016:Generated_Source\PSoC4/PWM.c **** 
1017:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1018:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCaptureBuf
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 42


1019:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1020:Generated_Source\PSoC4/PWM.c **** *
1021:Generated_Source\PSoC4/PWM.c **** * Summary:
1022:Generated_Source\PSoC4/PWM.c **** *  Reads the capture buffer register. This API is applicable only for
1023:Generated_Source\PSoC4/PWM.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1024:Generated_Source\PSoC4/PWM.c **** *
1025:Generated_Source\PSoC4/PWM.c **** * Parameters:
1026:Generated_Source\PSoC4/PWM.c **** *  None
1027:Generated_Source\PSoC4/PWM.c **** *
1028:Generated_Source\PSoC4/PWM.c **** * Return:
1029:Generated_Source\PSoC4/PWM.c **** *  Capture buffer value
1030:Generated_Source\PSoC4/PWM.c **** *
1031:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1032:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCaptureBuf(void)
1033:Generated_Source\PSoC4/PWM.c **** {
 1320              		.loc 1 1033 0
 1321              		.cfi_startproc
 1322 0000 80B5     		push	{r7, lr}
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 7, -8
 1325              		.cfi_offset 14, -4
 1326 0002 00AF     		add	r7, sp, #0
 1327              		.cfi_def_cfa_register 7
1034:Generated_Source\PSoC4/PWM.c ****     return (PWM_COMP_CAP_BUF_REG & PWM_16BIT_MASK);
 1328              		.loc 1 1034 0
 1329 0004 034B     		ldr	r3, .L91
 1330 0006 1B68     		ldr	r3, [r3]
 1331 0008 1B04     		lsl	r3, r3, #16
 1332 000a 1B0C     		lsr	r3, r3, #16
1035:Generated_Source\PSoC4/PWM.c **** }
 1333              		.loc 1 1035 0
 1334 000c 181C     		mov	r0, r3
 1335 000e BD46     		mov	sp, r7
 1336              		@ sp needed
 1337 0010 80BD     		pop	{r7, pc}
 1338              	.L92:
 1339 0012 C046     		.align	2
 1340              	.L91:
 1341 0014 10010540 		.word	1074069776
 1342              		.cfi_endproc
 1343              	.LFE27:
 1344              		.size	PWM_ReadCaptureBuf, .-PWM_ReadCaptureBuf
 1345              		.section	.text.PWM_SetCaptureMode,"ax",%progbits
 1346              		.align	2
 1347              		.global	PWM_SetCaptureMode
 1348              		.code	16
 1349              		.thumb_func
 1350              		.type	PWM_SetCaptureMode, %function
 1351              	PWM_SetCaptureMode:
 1352              	.LFB28:
1036:Generated_Source\PSoC4/PWM.c **** 
1037:Generated_Source\PSoC4/PWM.c **** 
1038:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1039:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCaptureMode
1040:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1041:Generated_Source\PSoC4/PWM.c **** *
1042:Generated_Source\PSoC4/PWM.c **** * Summary:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 43


1043:Generated_Source\PSoC4/PWM.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1044:Generated_Source\PSoC4/PWM.c **** *  This input is not applicable to the Timer/Counter without Capture and
1045:Generated_Source\PSoC4/PWM.c **** *  Quadrature Decoder modes.
1046:Generated_Source\PSoC4/PWM.c **** *
1047:Generated_Source\PSoC4/PWM.c **** * Parameters:
1048:Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1049:Generated_Source\PSoC4/PWM.c **** *   Values:
1050:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1051:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1052:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1053:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1054:Generated_Source\PSoC4/PWM.c **** *
1055:Generated_Source\PSoC4/PWM.c **** * Return:
1056:Generated_Source\PSoC4/PWM.c **** *  None
1057:Generated_Source\PSoC4/PWM.c **** *
1058:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1059:Generated_Source\PSoC4/PWM.c **** void PWM_SetCaptureMode(uint32 triggerMode)
1060:Generated_Source\PSoC4/PWM.c **** {
 1353              		.loc 1 1060 0
 1354              		.cfi_startproc
 1355 0000 90B5     		push	{r4, r7, lr}
 1356              		.cfi_def_cfa_offset 12
 1357              		.cfi_offset 4, -12
 1358              		.cfi_offset 7, -8
 1359              		.cfi_offset 14, -4
 1360 0002 85B0     		sub	sp, sp, #20
 1361              		.cfi_def_cfa_offset 32
 1362 0004 00AF     		add	r7, sp, #0
 1363              		.cfi_def_cfa_register 7
 1364 0006 7860     		str	r0, [r7, #4]
1061:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1062:Generated_Source\PSoC4/PWM.c **** 
1063:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1365              		.loc 1 1063 0
 1366 0008 0F23     		mov	r3, #15
 1367 000a FC18     		add	r4, r7, r3
 1368 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1369 0010 031C     		mov	r3, r0
 1370 0012 2370     		strb	r3, [r4]
1064:Generated_Source\PSoC4/PWM.c **** 
1065:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_CAPTURE_MASK;
 1371              		.loc 1 1065 0
 1372 0014 0A4B     		ldr	r3, .L94
 1373 0016 0A4A     		ldr	r2, .L94
 1374 0018 1268     		ldr	r2, [r2]
 1375 001a 0321     		mov	r1, #3
 1376 001c 8A43     		bic	r2, r1
 1377 001e 1A60     		str	r2, [r3]
1066:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= triggerMode;
 1378              		.loc 1 1066 0
 1379 0020 074B     		ldr	r3, .L94
 1380 0022 074A     		ldr	r2, .L94
 1381 0024 1168     		ldr	r1, [r2]
 1382 0026 7A68     		ldr	r2, [r7, #4]
 1383 0028 0A43     		orr	r2, r1
 1384 002a 1A60     		str	r2, [r3]
1067:Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 44


1068:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1385              		.loc 1 1068 0
 1386 002c 0F23     		mov	r3, #15
 1387 002e FB18     		add	r3, r7, r3
 1388 0030 1B78     		ldrb	r3, [r3]
 1389 0032 181C     		mov	r0, r3
 1390 0034 FFF7FEFF 		bl	CyExitCriticalSection
1069:Generated_Source\PSoC4/PWM.c **** }
 1391              		.loc 1 1069 0
 1392 0038 BD46     		mov	sp, r7
 1393 003a 05B0     		add	sp, sp, #20
 1394              		@ sp needed
 1395 003c 90BD     		pop	{r4, r7, pc}
 1396              	.L95:
 1397 003e C046     		.align	2
 1398              	.L94:
 1399 0040 24010540 		.word	1074069796
 1400              		.cfi_endproc
 1401              	.LFE28:
 1402              		.size	PWM_SetCaptureMode, .-PWM_SetCaptureMode
 1403              		.section	.text.PWM_SetReloadMode,"ax",%progbits
 1404              		.align	2
 1405              		.global	PWM_SetReloadMode
 1406              		.code	16
 1407              		.thumb_func
 1408              		.type	PWM_SetReloadMode, %function
 1409              	PWM_SetReloadMode:
 1410              	.LFB29:
1070:Generated_Source\PSoC4/PWM.c **** 
1071:Generated_Source\PSoC4/PWM.c **** 
1072:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1073:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetReloadMode
1074:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1075:Generated_Source\PSoC4/PWM.c **** *
1076:Generated_Source\PSoC4/PWM.c **** * Summary:
1077:Generated_Source\PSoC4/PWM.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1078:Generated_Source\PSoC4/PWM.c **** *  input.
1079:Generated_Source\PSoC4/PWM.c **** *
1080:Generated_Source\PSoC4/PWM.c **** * Parameters:
1081:Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1082:Generated_Source\PSoC4/PWM.c **** *   Values:
1083:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1084:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1085:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1086:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1087:Generated_Source\PSoC4/PWM.c **** *
1088:Generated_Source\PSoC4/PWM.c **** * Return:
1089:Generated_Source\PSoC4/PWM.c **** *  None
1090:Generated_Source\PSoC4/PWM.c **** *
1091:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1092:Generated_Source\PSoC4/PWM.c **** void PWM_SetReloadMode(uint32 triggerMode)
1093:Generated_Source\PSoC4/PWM.c **** {
 1411              		.loc 1 1093 0
 1412              		.cfi_startproc
 1413 0000 90B5     		push	{r4, r7, lr}
 1414              		.cfi_def_cfa_offset 12
 1415              		.cfi_offset 4, -12
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 45


 1416              		.cfi_offset 7, -8
 1417              		.cfi_offset 14, -4
 1418 0002 85B0     		sub	sp, sp, #20
 1419              		.cfi_def_cfa_offset 32
 1420 0004 00AF     		add	r7, sp, #0
 1421              		.cfi_def_cfa_register 7
 1422 0006 7860     		str	r0, [r7, #4]
1094:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1095:Generated_Source\PSoC4/PWM.c **** 
1096:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1423              		.loc 1 1096 0
 1424 0008 0F23     		mov	r3, #15
 1425 000a FC18     		add	r4, r7, r3
 1426 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1427 0010 031C     		mov	r3, r0
 1428 0012 2370     		strb	r3, [r4]
1097:Generated_Source\PSoC4/PWM.c **** 
1098:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_RELOAD_MASK;
 1429              		.loc 1 1098 0
 1430 0014 0A4B     		ldr	r3, .L97
 1431 0016 0A4A     		ldr	r2, .L97
 1432 0018 1268     		ldr	r2, [r2]
 1433 001a 3021     		mov	r1, #48
 1434 001c 8A43     		bic	r2, r1
 1435 001e 1A60     		str	r2, [r3]
1099:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_RELOAD_SHIFT));
 1436              		.loc 1 1099 0
 1437 0020 074B     		ldr	r3, .L97
 1438 0022 074A     		ldr	r2, .L97
 1439 0024 1168     		ldr	r1, [r2]
 1440 0026 7A68     		ldr	r2, [r7, #4]
 1441 0028 1201     		lsl	r2, r2, #4
 1442 002a 0A43     		orr	r2, r1
 1443 002c 1A60     		str	r2, [r3]
1100:Generated_Source\PSoC4/PWM.c **** 
1101:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1444              		.loc 1 1101 0
 1445 002e 0F23     		mov	r3, #15
 1446 0030 FB18     		add	r3, r7, r3
 1447 0032 1B78     		ldrb	r3, [r3]
 1448 0034 181C     		mov	r0, r3
 1449 0036 FFF7FEFF 		bl	CyExitCriticalSection
1102:Generated_Source\PSoC4/PWM.c **** }
 1450              		.loc 1 1102 0
 1451 003a BD46     		mov	sp, r7
 1452 003c 05B0     		add	sp, sp, #20
 1453              		@ sp needed
 1454 003e 90BD     		pop	{r4, r7, pc}
 1455              	.L98:
 1456              		.align	2
 1457              	.L97:
 1458 0040 24010540 		.word	1074069796
 1459              		.cfi_endproc
 1460              	.LFE29:
 1461              		.size	PWM_SetReloadMode, .-PWM_SetReloadMode
 1462              		.section	.text.PWM_SetStartMode,"ax",%progbits
 1463              		.align	2
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 46


 1464              		.global	PWM_SetStartMode
 1465              		.code	16
 1466              		.thumb_func
 1467              		.type	PWM_SetStartMode, %function
 1468              	PWM_SetStartMode:
 1469              	.LFB30:
1103:Generated_Source\PSoC4/PWM.c **** 
1104:Generated_Source\PSoC4/PWM.c **** 
1105:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1106:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetStartMode
1107:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1108:Generated_Source\PSoC4/PWM.c **** *
1109:Generated_Source\PSoC4/PWM.c **** * Summary:
1110:Generated_Source\PSoC4/PWM.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1111:Generated_Source\PSoC4/PWM.c **** *  phiB input.
1112:Generated_Source\PSoC4/PWM.c **** *
1113:Generated_Source\PSoC4/PWM.c **** * Parameters:
1114:Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1115:Generated_Source\PSoC4/PWM.c **** *   Values:
1116:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1117:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1118:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1119:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1120:Generated_Source\PSoC4/PWM.c **** *
1121:Generated_Source\PSoC4/PWM.c **** * Return:
1122:Generated_Source\PSoC4/PWM.c **** *  None
1123:Generated_Source\PSoC4/PWM.c **** *
1124:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1125:Generated_Source\PSoC4/PWM.c **** void PWM_SetStartMode(uint32 triggerMode)
1126:Generated_Source\PSoC4/PWM.c **** {
 1470              		.loc 1 1126 0
 1471              		.cfi_startproc
 1472 0000 90B5     		push	{r4, r7, lr}
 1473              		.cfi_def_cfa_offset 12
 1474              		.cfi_offset 4, -12
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0002 85B0     		sub	sp, sp, #20
 1478              		.cfi_def_cfa_offset 32
 1479 0004 00AF     		add	r7, sp, #0
 1480              		.cfi_def_cfa_register 7
 1481 0006 7860     		str	r0, [r7, #4]
1127:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1128:Generated_Source\PSoC4/PWM.c **** 
1129:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1482              		.loc 1 1129 0
 1483 0008 0F23     		mov	r3, #15
 1484 000a FC18     		add	r4, r7, r3
 1485 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1486 0010 031C     		mov	r3, r0
 1487 0012 2370     		strb	r3, [r4]
1130:Generated_Source\PSoC4/PWM.c **** 
1131:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_START_MASK;
 1488              		.loc 1 1131 0
 1489 0014 0A4B     		ldr	r3, .L100
 1490 0016 0A4A     		ldr	r2, .L100
 1491 0018 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 47


 1492 001a 0A49     		ldr	r1, .L100+4
 1493 001c 0A40     		and	r2, r1
 1494 001e 1A60     		str	r2, [r3]
1132:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_START_SHIFT));
 1495              		.loc 1 1132 0
 1496 0020 074B     		ldr	r3, .L100
 1497 0022 074A     		ldr	r2, .L100
 1498 0024 1168     		ldr	r1, [r2]
 1499 0026 7A68     		ldr	r2, [r7, #4]
 1500 0028 1202     		lsl	r2, r2, #8
 1501 002a 0A43     		orr	r2, r1
 1502 002c 1A60     		str	r2, [r3]
1133:Generated_Source\PSoC4/PWM.c **** 
1134:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1503              		.loc 1 1134 0
 1504 002e 0F23     		mov	r3, #15
 1505 0030 FB18     		add	r3, r7, r3
 1506 0032 1B78     		ldrb	r3, [r3]
 1507 0034 181C     		mov	r0, r3
 1508 0036 FFF7FEFF 		bl	CyExitCriticalSection
1135:Generated_Source\PSoC4/PWM.c **** }
 1509              		.loc 1 1135 0
 1510 003a BD46     		mov	sp, r7
 1511 003c 05B0     		add	sp, sp, #20
 1512              		@ sp needed
 1513 003e 90BD     		pop	{r4, r7, pc}
 1514              	.L101:
 1515              		.align	2
 1516              	.L100:
 1517 0040 24010540 		.word	1074069796
 1518 0044 FFFCFFFF 		.word	-769
 1519              		.cfi_endproc
 1520              	.LFE30:
 1521              		.size	PWM_SetStartMode, .-PWM_SetStartMode
 1522              		.section	.text.PWM_SetStopMode,"ax",%progbits
 1523              		.align	2
 1524              		.global	PWM_SetStopMode
 1525              		.code	16
 1526              		.thumb_func
 1527              		.type	PWM_SetStopMode, %function
 1528              	PWM_SetStopMode:
 1529              	.LFB31:
1136:Generated_Source\PSoC4/PWM.c **** 
1137:Generated_Source\PSoC4/PWM.c **** 
1138:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1139:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetStopMode
1140:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1141:Generated_Source\PSoC4/PWM.c **** *
1142:Generated_Source\PSoC4/PWM.c **** * Summary:
1143:Generated_Source\PSoC4/PWM.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1144:Generated_Source\PSoC4/PWM.c **** *
1145:Generated_Source\PSoC4/PWM.c **** * Parameters:
1146:Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1147:Generated_Source\PSoC4/PWM.c **** *   Values:
1148:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1149:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1150:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 48


1151:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1152:Generated_Source\PSoC4/PWM.c **** *
1153:Generated_Source\PSoC4/PWM.c **** * Return:
1154:Generated_Source\PSoC4/PWM.c **** *  None
1155:Generated_Source\PSoC4/PWM.c **** *
1156:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1157:Generated_Source\PSoC4/PWM.c **** void PWM_SetStopMode(uint32 triggerMode)
1158:Generated_Source\PSoC4/PWM.c **** {
 1530              		.loc 1 1158 0
 1531              		.cfi_startproc
 1532 0000 90B5     		push	{r4, r7, lr}
 1533              		.cfi_def_cfa_offset 12
 1534              		.cfi_offset 4, -12
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 14, -4
 1537 0002 85B0     		sub	sp, sp, #20
 1538              		.cfi_def_cfa_offset 32
 1539 0004 00AF     		add	r7, sp, #0
 1540              		.cfi_def_cfa_register 7
 1541 0006 7860     		str	r0, [r7, #4]
1159:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1160:Generated_Source\PSoC4/PWM.c **** 
1161:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1542              		.loc 1 1161 0
 1543 0008 0F23     		mov	r3, #15
 1544 000a FC18     		add	r4, r7, r3
 1545 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1546 0010 031C     		mov	r3, r0
 1547 0012 2370     		strb	r3, [r4]
1162:Generated_Source\PSoC4/PWM.c **** 
1163:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_STOP_MASK;
 1548              		.loc 1 1163 0
 1549 0014 0A4B     		ldr	r3, .L103
 1550 0016 0A4A     		ldr	r2, .L103
 1551 0018 1268     		ldr	r2, [r2]
 1552 001a C021     		mov	r1, #192
 1553 001c 8A43     		bic	r2, r1
 1554 001e 1A60     		str	r2, [r3]
1164:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_STOP_SHIFT));
 1555              		.loc 1 1164 0
 1556 0020 074B     		ldr	r3, .L103
 1557 0022 074A     		ldr	r2, .L103
 1558 0024 1168     		ldr	r1, [r2]
 1559 0026 7A68     		ldr	r2, [r7, #4]
 1560 0028 9201     		lsl	r2, r2, #6
 1561 002a 0A43     		orr	r2, r1
 1562 002c 1A60     		str	r2, [r3]
1165:Generated_Source\PSoC4/PWM.c **** 
1166:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1563              		.loc 1 1166 0
 1564 002e 0F23     		mov	r3, #15
 1565 0030 FB18     		add	r3, r7, r3
 1566 0032 1B78     		ldrb	r3, [r3]
 1567 0034 181C     		mov	r0, r3
 1568 0036 FFF7FEFF 		bl	CyExitCriticalSection
1167:Generated_Source\PSoC4/PWM.c **** }
 1569              		.loc 1 1167 0
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 49


 1570 003a BD46     		mov	sp, r7
 1571 003c 05B0     		add	sp, sp, #20
 1572              		@ sp needed
 1573 003e 90BD     		pop	{r4, r7, pc}
 1574              	.L104:
 1575              		.align	2
 1576              	.L103:
 1577 0040 24010540 		.word	1074069796
 1578              		.cfi_endproc
 1579              	.LFE31:
 1580              		.size	PWM_SetStopMode, .-PWM_SetStopMode
 1581              		.section	.text.PWM_SetCountMode,"ax",%progbits
 1582              		.align	2
 1583              		.global	PWM_SetCountMode
 1584              		.code	16
 1585              		.thumb_func
 1586              		.type	PWM_SetCountMode, %function
 1587              	PWM_SetCountMode:
 1588              	.LFB32:
1168:Generated_Source\PSoC4/PWM.c **** 
1169:Generated_Source\PSoC4/PWM.c **** 
1170:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1171:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCountMode
1172:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1173:Generated_Source\PSoC4/PWM.c **** *
1174:Generated_Source\PSoC4/PWM.c **** * Summary:
1175:Generated_Source\PSoC4/PWM.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1176:Generated_Source\PSoC4/PWM.c **** *  input.
1177:Generated_Source\PSoC4/PWM.c **** *
1178:Generated_Source\PSoC4/PWM.c **** * Parameters:
1179:Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1180:Generated_Source\PSoC4/PWM.c **** *   Values:
1181:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1182:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1183:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1184:Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1185:Generated_Source\PSoC4/PWM.c **** *
1186:Generated_Source\PSoC4/PWM.c **** * Return:
1187:Generated_Source\PSoC4/PWM.c **** *  None
1188:Generated_Source\PSoC4/PWM.c **** *
1189:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1190:Generated_Source\PSoC4/PWM.c **** void PWM_SetCountMode(uint32 triggerMode)
1191:Generated_Source\PSoC4/PWM.c **** {
 1589              		.loc 1 1191 0
 1590              		.cfi_startproc
 1591 0000 90B5     		push	{r4, r7, lr}
 1592              		.cfi_def_cfa_offset 12
 1593              		.cfi_offset 4, -12
 1594              		.cfi_offset 7, -8
 1595              		.cfi_offset 14, -4
 1596 0002 85B0     		sub	sp, sp, #20
 1597              		.cfi_def_cfa_offset 32
 1598 0004 00AF     		add	r7, sp, #0
 1599              		.cfi_def_cfa_register 7
 1600 0006 7860     		str	r0, [r7, #4]
1192:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1193:Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 50


1194:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1601              		.loc 1 1194 0
 1602 0008 0F23     		mov	r3, #15
 1603 000a FC18     		add	r4, r7, r3
 1604 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1605 0010 031C     		mov	r3, r0
 1606 0012 2370     		strb	r3, [r4]
1195:Generated_Source\PSoC4/PWM.c **** 
1196:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_COUNT_MASK;
 1607              		.loc 1 1196 0
 1608 0014 0A4B     		ldr	r3, .L106
 1609 0016 0A4A     		ldr	r2, .L106
 1610 0018 1268     		ldr	r2, [r2]
 1611 001a 0C21     		mov	r1, #12
 1612 001c 8A43     		bic	r2, r1
 1613 001e 1A60     		str	r2, [r3]
1197:Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_COUNT_SHIFT));
 1614              		.loc 1 1197 0
 1615 0020 074B     		ldr	r3, .L106
 1616 0022 074A     		ldr	r2, .L106
 1617 0024 1168     		ldr	r1, [r2]
 1618 0026 7A68     		ldr	r2, [r7, #4]
 1619 0028 9200     		lsl	r2, r2, #2
 1620 002a 0A43     		orr	r2, r1
 1621 002c 1A60     		str	r2, [r3]
1198:Generated_Source\PSoC4/PWM.c **** 
1199:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1622              		.loc 1 1199 0
 1623 002e 0F23     		mov	r3, #15
 1624 0030 FB18     		add	r3, r7, r3
 1625 0032 1B78     		ldrb	r3, [r3]
 1626 0034 181C     		mov	r0, r3
 1627 0036 FFF7FEFF 		bl	CyExitCriticalSection
1200:Generated_Source\PSoC4/PWM.c **** }
 1628              		.loc 1 1200 0
 1629 003a BD46     		mov	sp, r7
 1630 003c 05B0     		add	sp, sp, #20
 1631              		@ sp needed
 1632 003e 90BD     		pop	{r4, r7, pc}
 1633              	.L107:
 1634              		.align	2
 1635              	.L106:
 1636 0040 24010540 		.word	1074069796
 1637              		.cfi_endproc
 1638              	.LFE32:
 1639              		.size	PWM_SetCountMode, .-PWM_SetCountMode
 1640              		.section	.text.PWM_TriggerCommand,"ax",%progbits
 1641              		.align	2
 1642              		.global	PWM_TriggerCommand
 1643              		.code	16
 1644              		.thumb_func
 1645              		.type	PWM_TriggerCommand, %function
 1646              	PWM_TriggerCommand:
 1647              	.LFB33:
1201:Generated_Source\PSoC4/PWM.c **** 
1202:Generated_Source\PSoC4/PWM.c **** 
1203:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 51


1204:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_TriggerCommand
1205:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1206:Generated_Source\PSoC4/PWM.c **** *
1207:Generated_Source\PSoC4/PWM.c **** * Summary:
1208:Generated_Source\PSoC4/PWM.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1209:Generated_Source\PSoC4/PWM.c **** *  The mask can be used to apply this command simultaneously to more than one
1210:Generated_Source\PSoC4/PWM.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1211:Generated_Source\PSoC4/PWM.c **** *
1212:Generated_Source\PSoC4/PWM.c **** * Parameters:
1213:Generated_Source\PSoC4/PWM.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1214:Generated_Source\PSoC4/PWM.c **** *        command should apply to.  This function from one instance can be used
1215:Generated_Source\PSoC4/PWM.c **** *        to apply the command to any of the instances in the design.
1216:Generated_Source\PSoC4/PWM.c **** *        The mask value for a specific instance is available with the MASK
1217:Generated_Source\PSoC4/PWM.c **** *        define.
1218:Generated_Source\PSoC4/PWM.c **** *  command: Enumerated command values. Capture command only applicable for
1219:Generated_Source\PSoC4/PWM.c **** *           Timer/Counter with Capture and PWM modes.
1220:Generated_Source\PSoC4/PWM.c **** *   Values:
1221:Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_CAPTURE    - Trigger Capture command
1222:Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_RELOAD     - Trigger Reload command
1223:Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_STOP       - Trigger Stop command
1224:Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_START      - Trigger Start command
1225:Generated_Source\PSoC4/PWM.c **** *
1226:Generated_Source\PSoC4/PWM.c **** * Return:
1227:Generated_Source\PSoC4/PWM.c **** *  None
1228:Generated_Source\PSoC4/PWM.c **** *
1229:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1230:Generated_Source\PSoC4/PWM.c **** void PWM_TriggerCommand(uint32 mask, uint32 command)
1231:Generated_Source\PSoC4/PWM.c **** {
 1648              		.loc 1 1231 0
 1649              		.cfi_startproc
 1650 0000 90B5     		push	{r4, r7, lr}
 1651              		.cfi_def_cfa_offset 12
 1652              		.cfi_offset 4, -12
 1653              		.cfi_offset 7, -8
 1654              		.cfi_offset 14, -4
 1655 0002 85B0     		sub	sp, sp, #20
 1656              		.cfi_def_cfa_offset 32
 1657 0004 00AF     		add	r7, sp, #0
 1658              		.cfi_def_cfa_register 7
 1659 0006 7860     		str	r0, [r7, #4]
 1660 0008 3960     		str	r1, [r7]
1232:Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1233:Generated_Source\PSoC4/PWM.c **** 
1234:Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1661              		.loc 1 1234 0
 1662 000a 0F23     		mov	r3, #15
 1663 000c FC18     		add	r4, r7, r3
 1664 000e FFF7FEFF 		bl	CyEnterCriticalSection
 1665 0012 031C     		mov	r3, r0
 1666 0014 2370     		strb	r3, [r4]
1235:Generated_Source\PSoC4/PWM.c **** 
1236:Generated_Source\PSoC4/PWM.c ****     PWM_COMMAND_REG = ((uint32)(mask << command));
 1667              		.loc 1 1236 0
 1668 0016 074B     		ldr	r3, .L109
 1669 0018 3A68     		ldr	r2, [r7]
 1670 001a 7968     		ldr	r1, [r7, #4]
 1671 001c 9140     		lsl	r1, r1, r2
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 52


 1672 001e 0A1C     		mov	r2, r1
 1673 0020 1A60     		str	r2, [r3]
1237:Generated_Source\PSoC4/PWM.c **** 
1238:Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1674              		.loc 1 1238 0
 1675 0022 0F23     		mov	r3, #15
 1676 0024 FB18     		add	r3, r7, r3
 1677 0026 1B78     		ldrb	r3, [r3]
 1678 0028 181C     		mov	r0, r3
 1679 002a FFF7FEFF 		bl	CyExitCriticalSection
1239:Generated_Source\PSoC4/PWM.c **** }
 1680              		.loc 1 1239 0
 1681 002e BD46     		mov	sp, r7
 1682 0030 05B0     		add	sp, sp, #20
 1683              		@ sp needed
 1684 0032 90BD     		pop	{r4, r7, pc}
 1685              	.L110:
 1686              		.align	2
 1687              	.L109:
 1688 0034 08000540 		.word	1074069512
 1689              		.cfi_endproc
 1690              	.LFE33:
 1691              		.size	PWM_TriggerCommand, .-PWM_TriggerCommand
 1692              		.section	.text.PWM_ReadStatus,"ax",%progbits
 1693              		.align	2
 1694              		.global	PWM_ReadStatus
 1695              		.code	16
 1696              		.thumb_func
 1697              		.type	PWM_ReadStatus, %function
 1698              	PWM_ReadStatus:
 1699              	.LFB34:
1240:Generated_Source\PSoC4/PWM.c **** 
1241:Generated_Source\PSoC4/PWM.c **** 
1242:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1243:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadStatus
1244:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1245:Generated_Source\PSoC4/PWM.c **** *
1246:Generated_Source\PSoC4/PWM.c **** * Summary:
1247:Generated_Source\PSoC4/PWM.c **** *  Reads the status of the PWM.
1248:Generated_Source\PSoC4/PWM.c **** *
1249:Generated_Source\PSoC4/PWM.c **** * Parameters:
1250:Generated_Source\PSoC4/PWM.c **** *  None
1251:Generated_Source\PSoC4/PWM.c **** *
1252:Generated_Source\PSoC4/PWM.c **** * Return:
1253:Generated_Source\PSoC4/PWM.c **** *  Status
1254:Generated_Source\PSoC4/PWM.c **** *   Values:
1255:Generated_Source\PSoC4/PWM.c **** *     - PWM_STATUS_DOWN    - Set if counting down
1256:Generated_Source\PSoC4/PWM.c **** *     - PWM_STATUS_RUNNING - Set if counter is running
1257:Generated_Source\PSoC4/PWM.c **** *
1258:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1259:Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadStatus(void)
1260:Generated_Source\PSoC4/PWM.c **** {
 1700              		.loc 1 1260 0
 1701              		.cfi_startproc
 1702 0000 80B5     		push	{r7, lr}
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 7, -8
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 53


 1705              		.cfi_offset 14, -4
 1706 0002 00AF     		add	r7, sp, #0
 1707              		.cfi_def_cfa_register 7
1261:Generated_Source\PSoC4/PWM.c ****     return ((PWM_STATUS_REG >> PWM_RUNNING_STATUS_SHIFT) |
 1708              		.loc 1 1261 0
 1709 0004 054B     		ldr	r3, .L113
 1710 0006 1B68     		ldr	r3, [r3]
 1711 0008 9A0F     		lsr	r2, r3, #30
1262:Generated_Source\PSoC4/PWM.c ****             (PWM_STATUS_REG & PWM_STATUS_DOWN));
 1712              		.loc 1 1262 0
 1713 000a 044B     		ldr	r3, .L113
 1714 000c 1B68     		ldr	r3, [r3]
 1715 000e 0121     		mov	r1, #1
 1716 0010 0B40     		and	r3, r1
1261:Generated_Source\PSoC4/PWM.c ****     return ((PWM_STATUS_REG >> PWM_RUNNING_STATUS_SHIFT) |
 1717              		.loc 1 1261 0
 1718 0012 1343     		orr	r3, r2
1263:Generated_Source\PSoC4/PWM.c **** }
 1719              		.loc 1 1263 0
 1720 0014 181C     		mov	r0, r3
 1721 0016 BD46     		mov	sp, r7
 1722              		@ sp needed
 1723 0018 80BD     		pop	{r7, pc}
 1724              	.L114:
 1725 001a C046     		.align	2
 1726              	.L113:
 1727 001c 04010540 		.word	1074069764
 1728              		.cfi_endproc
 1729              	.LFE34:
 1730              		.size	PWM_ReadStatus, .-PWM_ReadStatus
 1731              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 1732              		.align	2
 1733              		.global	PWM_SetInterruptMode
 1734              		.code	16
 1735              		.thumb_func
 1736              		.type	PWM_SetInterruptMode, %function
 1737              	PWM_SetInterruptMode:
 1738              	.LFB35:
1264:Generated_Source\PSoC4/PWM.c **** 
1265:Generated_Source\PSoC4/PWM.c **** 
1266:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1267:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetInterruptMode
1268:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1269:Generated_Source\PSoC4/PWM.c **** *
1270:Generated_Source\PSoC4/PWM.c **** * Summary:
1271:Generated_Source\PSoC4/PWM.c **** *  Sets the interrupt mask to control which interrupt
1272:Generated_Source\PSoC4/PWM.c **** *  requests generate the interrupt signal.
1273:Generated_Source\PSoC4/PWM.c **** *
1274:Generated_Source\PSoC4/PWM.c **** * Parameters:
1275:Generated_Source\PSoC4/PWM.c **** *   interruptMask: Mask of bits to be enabled
1276:Generated_Source\PSoC4/PWM.c **** *   Values:
1277:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1278:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1279:Generated_Source\PSoC4/PWM.c **** *
1280:Generated_Source\PSoC4/PWM.c **** * Return:
1281:Generated_Source\PSoC4/PWM.c **** *  None
1282:Generated_Source\PSoC4/PWM.c **** *
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 54


1283:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1284:Generated_Source\PSoC4/PWM.c **** void PWM_SetInterruptMode(uint32 interruptMask)
1285:Generated_Source\PSoC4/PWM.c **** {
 1739              		.loc 1 1285 0
 1740              		.cfi_startproc
 1741 0000 80B5     		push	{r7, lr}
 1742              		.cfi_def_cfa_offset 8
 1743              		.cfi_offset 7, -8
 1744              		.cfi_offset 14, -4
 1745 0002 82B0     		sub	sp, sp, #8
 1746              		.cfi_def_cfa_offset 16
 1747 0004 00AF     		add	r7, sp, #0
 1748              		.cfi_def_cfa_register 7
 1749 0006 7860     		str	r0, [r7, #4]
1286:Generated_Source\PSoC4/PWM.c ****     PWM_INTERRUPT_MASK_REG =  interruptMask;
 1750              		.loc 1 1286 0
 1751 0008 024B     		ldr	r3, .L116
 1752 000a 7A68     		ldr	r2, [r7, #4]
 1753 000c 1A60     		str	r2, [r3]
1287:Generated_Source\PSoC4/PWM.c **** }
 1754              		.loc 1 1287 0
 1755 000e BD46     		mov	sp, r7
 1756 0010 02B0     		add	sp, sp, #8
 1757              		@ sp needed
 1758 0012 80BD     		pop	{r7, pc}
 1759              	.L117:
 1760              		.align	2
 1761              	.L116:
 1762 0014 38010540 		.word	1074069816
 1763              		.cfi_endproc
 1764              	.LFE35:
 1765              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 1766              		.section	.text.PWM_GetInterruptSourceMasked,"ax",%progbits
 1767              		.align	2
 1768              		.global	PWM_GetInterruptSourceMasked
 1769              		.code	16
 1770              		.thumb_func
 1771              		.type	PWM_GetInterruptSourceMasked, %function
 1772              	PWM_GetInterruptSourceMasked:
 1773              	.LFB36:
1288:Generated_Source\PSoC4/PWM.c **** 
1289:Generated_Source\PSoC4/PWM.c **** 
1290:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1291:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_GetInterruptSourceMasked
1292:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1293:Generated_Source\PSoC4/PWM.c **** *
1294:Generated_Source\PSoC4/PWM.c **** * Summary:
1295:Generated_Source\PSoC4/PWM.c **** *  Gets the interrupt requests masked by the interrupt mask.
1296:Generated_Source\PSoC4/PWM.c **** *
1297:Generated_Source\PSoC4/PWM.c **** * Parameters:
1298:Generated_Source\PSoC4/PWM.c **** *   None
1299:Generated_Source\PSoC4/PWM.c **** *
1300:Generated_Source\PSoC4/PWM.c **** * Return:
1301:Generated_Source\PSoC4/PWM.c **** *  Masked interrupt source
1302:Generated_Source\PSoC4/PWM.c **** *   Values:
1303:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1304:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 55


1305:Generated_Source\PSoC4/PWM.c **** *
1306:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1307:Generated_Source\PSoC4/PWM.c **** uint32 PWM_GetInterruptSourceMasked(void)
1308:Generated_Source\PSoC4/PWM.c **** {
 1774              		.loc 1 1308 0
 1775              		.cfi_startproc
 1776 0000 80B5     		push	{r7, lr}
 1777              		.cfi_def_cfa_offset 8
 1778              		.cfi_offset 7, -8
 1779              		.cfi_offset 14, -4
 1780 0002 00AF     		add	r7, sp, #0
 1781              		.cfi_def_cfa_register 7
1309:Generated_Source\PSoC4/PWM.c ****     return (PWM_INTERRUPT_MASKED_REG);
 1782              		.loc 1 1309 0
 1783 0004 024B     		ldr	r3, .L120
 1784 0006 1B68     		ldr	r3, [r3]
1310:Generated_Source\PSoC4/PWM.c **** }
 1785              		.loc 1 1310 0
 1786 0008 181C     		mov	r0, r3
 1787 000a BD46     		mov	sp, r7
 1788              		@ sp needed
 1789 000c 80BD     		pop	{r7, pc}
 1790              	.L121:
 1791 000e C046     		.align	2
 1792              	.L120:
 1793 0010 3C010540 		.word	1074069820
 1794              		.cfi_endproc
 1795              	.LFE36:
 1796              		.size	PWM_GetInterruptSourceMasked, .-PWM_GetInterruptSourceMasked
 1797              		.section	.text.PWM_GetInterruptSource,"ax",%progbits
 1798              		.align	2
 1799              		.global	PWM_GetInterruptSource
 1800              		.code	16
 1801              		.thumb_func
 1802              		.type	PWM_GetInterruptSource, %function
 1803              	PWM_GetInterruptSource:
 1804              	.LFB37:
1311:Generated_Source\PSoC4/PWM.c **** 
1312:Generated_Source\PSoC4/PWM.c **** 
1313:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1314:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_GetInterruptSource
1315:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1316:Generated_Source\PSoC4/PWM.c **** *
1317:Generated_Source\PSoC4/PWM.c **** * Summary:
1318:Generated_Source\PSoC4/PWM.c **** *  Gets the interrupt requests (without masking).
1319:Generated_Source\PSoC4/PWM.c **** *
1320:Generated_Source\PSoC4/PWM.c **** * Parameters:
1321:Generated_Source\PSoC4/PWM.c **** *  None
1322:Generated_Source\PSoC4/PWM.c **** *
1323:Generated_Source\PSoC4/PWM.c **** * Return:
1324:Generated_Source\PSoC4/PWM.c **** *  Interrupt request value
1325:Generated_Source\PSoC4/PWM.c **** *   Values:
1326:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1327:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1328:Generated_Source\PSoC4/PWM.c **** *
1329:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1330:Generated_Source\PSoC4/PWM.c **** uint32 PWM_GetInterruptSource(void)
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 56


1331:Generated_Source\PSoC4/PWM.c **** {
 1805              		.loc 1 1331 0
 1806              		.cfi_startproc
 1807 0000 80B5     		push	{r7, lr}
 1808              		.cfi_def_cfa_offset 8
 1809              		.cfi_offset 7, -8
 1810              		.cfi_offset 14, -4
 1811 0002 00AF     		add	r7, sp, #0
 1812              		.cfi_def_cfa_register 7
1332:Generated_Source\PSoC4/PWM.c ****     return (PWM_INTERRUPT_REQ_REG);
 1813              		.loc 1 1332 0
 1814 0004 024B     		ldr	r3, .L124
 1815 0006 1B68     		ldr	r3, [r3]
1333:Generated_Source\PSoC4/PWM.c **** }
 1816              		.loc 1 1333 0
 1817 0008 181C     		mov	r0, r3
 1818 000a BD46     		mov	sp, r7
 1819              		@ sp needed
 1820 000c 80BD     		pop	{r7, pc}
 1821              	.L125:
 1822 000e C046     		.align	2
 1823              	.L124:
 1824 0010 30010540 		.word	1074069808
 1825              		.cfi_endproc
 1826              	.LFE37:
 1827              		.size	PWM_GetInterruptSource, .-PWM_GetInterruptSource
 1828              		.section	.text.PWM_ClearInterrupt,"ax",%progbits
 1829              		.align	2
 1830              		.global	PWM_ClearInterrupt
 1831              		.code	16
 1832              		.thumb_func
 1833              		.type	PWM_ClearInterrupt, %function
 1834              	PWM_ClearInterrupt:
 1835              	.LFB38:
1334:Generated_Source\PSoC4/PWM.c **** 
1335:Generated_Source\PSoC4/PWM.c **** 
1336:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1337:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ClearInterrupt
1338:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1339:Generated_Source\PSoC4/PWM.c **** *
1340:Generated_Source\PSoC4/PWM.c **** * Summary:
1341:Generated_Source\PSoC4/PWM.c **** *  Clears the interrupt request.
1342:Generated_Source\PSoC4/PWM.c **** *
1343:Generated_Source\PSoC4/PWM.c **** * Parameters:
1344:Generated_Source\PSoC4/PWM.c **** *   interruptMask: Mask of interrupts to clear
1345:Generated_Source\PSoC4/PWM.c **** *   Values:
1346:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1347:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1348:Generated_Source\PSoC4/PWM.c **** *
1349:Generated_Source\PSoC4/PWM.c **** * Return:
1350:Generated_Source\PSoC4/PWM.c **** *  None
1351:Generated_Source\PSoC4/PWM.c **** *
1352:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1353:Generated_Source\PSoC4/PWM.c **** void PWM_ClearInterrupt(uint32 interruptMask)
1354:Generated_Source\PSoC4/PWM.c **** {
 1836              		.loc 1 1354 0
 1837              		.cfi_startproc
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 57


 1838 0000 80B5     		push	{r7, lr}
 1839              		.cfi_def_cfa_offset 8
 1840              		.cfi_offset 7, -8
 1841              		.cfi_offset 14, -4
 1842 0002 82B0     		sub	sp, sp, #8
 1843              		.cfi_def_cfa_offset 16
 1844 0004 00AF     		add	r7, sp, #0
 1845              		.cfi_def_cfa_register 7
 1846 0006 7860     		str	r0, [r7, #4]
1355:Generated_Source\PSoC4/PWM.c ****     PWM_INTERRUPT_REQ_REG = interruptMask;
 1847              		.loc 1 1355 0
 1848 0008 024B     		ldr	r3, .L127
 1849 000a 7A68     		ldr	r2, [r7, #4]
 1850 000c 1A60     		str	r2, [r3]
1356:Generated_Source\PSoC4/PWM.c **** }
 1851              		.loc 1 1356 0
 1852 000e BD46     		mov	sp, r7
 1853 0010 02B0     		add	sp, sp, #8
 1854              		@ sp needed
 1855 0012 80BD     		pop	{r7, pc}
 1856              	.L128:
 1857              		.align	2
 1858              	.L127:
 1859 0014 30010540 		.word	1074069808
 1860              		.cfi_endproc
 1861              	.LFE38:
 1862              		.size	PWM_ClearInterrupt, .-PWM_ClearInterrupt
 1863              		.section	.text.PWM_SetInterrupt,"ax",%progbits
 1864              		.align	2
 1865              		.global	PWM_SetInterrupt
 1866              		.code	16
 1867              		.thumb_func
 1868              		.type	PWM_SetInterrupt, %function
 1869              	PWM_SetInterrupt:
 1870              	.LFB39:
1357:Generated_Source\PSoC4/PWM.c **** 
1358:Generated_Source\PSoC4/PWM.c **** 
1359:Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1360:Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetInterrupt
1361:Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1362:Generated_Source\PSoC4/PWM.c **** *
1363:Generated_Source\PSoC4/PWM.c **** * Summary:
1364:Generated_Source\PSoC4/PWM.c **** *  Sets a software interrupt request.
1365:Generated_Source\PSoC4/PWM.c **** *
1366:Generated_Source\PSoC4/PWM.c **** * Parameters:
1367:Generated_Source\PSoC4/PWM.c **** *   interruptMask: Mask of interrupts to set
1368:Generated_Source\PSoC4/PWM.c **** *   Values:
1369:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1370:Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1371:Generated_Source\PSoC4/PWM.c **** *
1372:Generated_Source\PSoC4/PWM.c **** * Return:
1373:Generated_Source\PSoC4/PWM.c **** *  None
1374:Generated_Source\PSoC4/PWM.c **** *
1375:Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1376:Generated_Source\PSoC4/PWM.c **** void PWM_SetInterrupt(uint32 interruptMask)
1377:Generated_Source\PSoC4/PWM.c **** {
 1871              		.loc 1 1377 0
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 58


 1872              		.cfi_startproc
 1873 0000 80B5     		push	{r7, lr}
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 7, -8
 1876              		.cfi_offset 14, -4
 1877 0002 82B0     		sub	sp, sp, #8
 1878              		.cfi_def_cfa_offset 16
 1879 0004 00AF     		add	r7, sp, #0
 1880              		.cfi_def_cfa_register 7
 1881 0006 7860     		str	r0, [r7, #4]
1378:Generated_Source\PSoC4/PWM.c ****     PWM_INTERRUPT_SET_REG = interruptMask;
 1882              		.loc 1 1378 0
 1883 0008 024B     		ldr	r3, .L130
 1884 000a 7A68     		ldr	r2, [r7, #4]
 1885 000c 1A60     		str	r2, [r3]
1379:Generated_Source\PSoC4/PWM.c **** }
 1886              		.loc 1 1379 0
 1887 000e BD46     		mov	sp, r7
 1888 0010 02B0     		add	sp, sp, #8
 1889              		@ sp needed
 1890 0012 80BD     		pop	{r7, pc}
 1891              	.L131:
 1892              		.align	2
 1893              	.L130:
 1894 0014 34010540 		.word	1074069812
 1895              		.cfi_endproc
 1896              	.LFE39:
 1897              		.size	PWM_SetInterrupt, .-PWM_SetInterrupt
 1898              		.text
 1899              	.Letext0:
 1900              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1901              		.section	.debug_info,"",%progbits
 1902              	.Ldebug_info0:
 1903 0000 EC060000 		.4byte	0x6ec
 1904 0004 0400     		.2byte	0x4
 1905 0006 00000000 		.4byte	.Ldebug_abbrev0
 1906 000a 04       		.byte	0x4
 1907 000b 01       		.uleb128 0x1
 1908 000c 4A040000 		.4byte	.LASF76
 1909 0010 01       		.byte	0x1
 1910 0011 6D000000 		.4byte	.LASF77
 1911 0015 3C030000 		.4byte	.LASF78
 1912 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1913 001d 00000000 		.4byte	0
 1914 0021 00000000 		.4byte	.Ldebug_line0
 1915 0025 02       		.uleb128 0x2
 1916 0026 01       		.byte	0x1
 1917 0027 06       		.byte	0x6
 1918 0028 A8000000 		.4byte	.LASF0
 1919 002c 02       		.uleb128 0x2
 1920 002d 01       		.byte	0x1
 1921 002e 08       		.byte	0x8
 1922 002f D0020000 		.4byte	.LASF1
 1923 0033 02       		.uleb128 0x2
 1924 0034 02       		.byte	0x2
 1925 0035 05       		.byte	0x5
 1926 0036 07030000 		.4byte	.LASF2
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 59


 1927 003a 02       		.uleb128 0x2
 1928 003b 02       		.byte	0x2
 1929 003c 07       		.byte	0x7
 1930 003d DA010000 		.4byte	.LASF3
 1931 0041 02       		.uleb128 0x2
 1932 0042 04       		.byte	0x4
 1933 0043 05       		.byte	0x5
 1934 0044 F0000000 		.4byte	.LASF4
 1935 0048 02       		.uleb128 0x2
 1936 0049 04       		.byte	0x4
 1937 004a 07       		.byte	0x7
 1938 004b BF010000 		.4byte	.LASF5
 1939 004f 02       		.uleb128 0x2
 1940 0050 08       		.byte	0x8
 1941 0051 05       		.byte	0x5
 1942 0052 9A000000 		.4byte	.LASF6
 1943 0056 02       		.uleb128 0x2
 1944 0057 08       		.byte	0x8
 1945 0058 07       		.byte	0x7
 1946 0059 2B000000 		.4byte	.LASF7
 1947 005d 03       		.uleb128 0x3
 1948 005e 04       		.byte	0x4
 1949 005f 05       		.byte	0x5
 1950 0060 696E7400 		.ascii	"int\000"
 1951 0064 02       		.uleb128 0x2
 1952 0065 04       		.byte	0x4
 1953 0066 07       		.byte	0x7
 1954 0067 97010000 		.4byte	.LASF8
 1955 006b 04       		.uleb128 0x4
 1956 006c F9000000 		.4byte	.LASF9
 1957 0070 02       		.byte	0x2
 1958 0071 A1       		.byte	0xa1
 1959 0072 2C000000 		.4byte	0x2c
 1960 0076 04       		.uleb128 0x4
 1961 0077 46010000 		.4byte	.LASF10
 1962 007b 02       		.byte	0x2
 1963 007c A3       		.byte	0xa3
 1964 007d 48000000 		.4byte	0x48
 1965 0081 02       		.uleb128 0x2
 1966 0082 04       		.byte	0x4
 1967 0083 04       		.byte	0x4
 1968 0084 9E020000 		.4byte	.LASF11
 1969 0088 02       		.uleb128 0x2
 1970 0089 08       		.byte	0x8
 1971 008a 04       		.byte	0x4
 1972 008b FF000000 		.4byte	.LASF12
 1973 008f 02       		.uleb128 0x2
 1974 0090 01       		.byte	0x1
 1975 0091 08       		.byte	0x8
 1976 0092 8D030000 		.4byte	.LASF13
 1977 0096 05       		.uleb128 0x5
 1978 0097 3C020000 		.4byte	.LASF14
 1979 009b 02       		.byte	0x2
 1980 009c 4D01     		.2byte	0x14d
 1981 009e A2000000 		.4byte	0xa2
 1982 00a2 06       		.uleb128 0x6
 1983 00a3 76000000 		.4byte	0x76
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 60


 1984 00a7 02       		.uleb128 0x2
 1985 00a8 04       		.byte	0x4
 1986 00a9 07       		.byte	0x7
 1987 00aa 5D020000 		.4byte	.LASF15
 1988 00ae 07       		.uleb128 0x7
 1989 00af DE020000 		.4byte	.LASF16
 1990 00b3 01       		.byte	0x1
 1991 00b4 26       		.byte	0x26
 1992 00b5 00000000 		.4byte	.LFB0
 1993 00b9 60000000 		.4byte	.LFE0-.LFB0
 1994 00bd 01       		.uleb128 0x1
 1995 00be 9C       		.byte	0x9c
 1996 00bf 08       		.uleb128 0x8
 1997 00c0 06000000 		.4byte	.LASF18
 1998 00c4 01       		.byte	0x1
 1999 00c5 B1       		.byte	0xb1
 2000 00c6 00000000 		.4byte	.LFB1
 2001 00ca 30000000 		.4byte	.LFE1-.LFB1
 2002 00ce 01       		.uleb128 0x1
 2003 00cf 9C       		.byte	0x9c
 2004 00d0 E3000000 		.4byte	0xe3
 2005 00d4 09       		.uleb128 0x9
 2006 00d5 F9030000 		.4byte	.LASF20
 2007 00d9 01       		.byte	0x1
 2008 00da B3       		.byte	0xb3
 2009 00db 6B000000 		.4byte	0x6b
 2010 00df 02       		.uleb128 0x2
 2011 00e0 91       		.byte	0x91
 2012 00e1 6F       		.sleb128 -17
 2013 00e2 00       		.byte	0
 2014 00e3 07       		.uleb128 0x7
 2015 00e4 FE010000 		.4byte	.LASF17
 2016 00e8 01       		.byte	0x1
 2017 00e9 E0       		.byte	0xe0
 2018 00ea 00000000 		.4byte	.LFB2
 2019 00ee 24000000 		.4byte	.LFE2-.LFB2
 2020 00f2 01       		.uleb128 0x1
 2021 00f3 9C       		.byte	0x9c
 2022 00f4 08       		.uleb128 0x8
 2023 00f5 2C010000 		.4byte	.LASF19
 2024 00f9 01       		.byte	0x1
 2025 00fa FA       		.byte	0xfa
 2026 00fb 00000000 		.4byte	.LFB3
 2027 00ff 30000000 		.4byte	.LFE3-.LFB3
 2028 0103 01       		.uleb128 0x1
 2029 0104 9C       		.byte	0x9c
 2030 0105 18010000 		.4byte	0x118
 2031 0109 09       		.uleb128 0x9
 2032 010a F9030000 		.4byte	.LASF20
 2033 010e 01       		.byte	0x1
 2034 010f FC       		.byte	0xfc
 2035 0110 6B000000 		.4byte	0x6b
 2036 0114 02       		.uleb128 0x2
 2037 0115 91       		.byte	0x91
 2038 0116 6F       		.sleb128 -17
 2039 0117 00       		.byte	0
 2040 0118 0A       		.uleb128 0xa
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 61


 2041 0119 29040000 		.4byte	.LASF21
 2042 011d 01       		.byte	0x1
 2043 011e 1F01     		.2byte	0x11f
 2044 0120 00000000 		.4byte	.LFB4
 2045 0124 48000000 		.4byte	.LFE4-.LFB4
 2046 0128 01       		.uleb128 0x1
 2047 0129 9C       		.byte	0x9c
 2048 012a 4D010000 		.4byte	0x14d
 2049 012e 0B       		.uleb128 0xb
 2050 012f 92030000 		.4byte	.LASF23
 2051 0133 01       		.byte	0x1
 2052 0134 1F01     		.2byte	0x11f
 2053 0136 76000000 		.4byte	0x76
 2054 013a 02       		.uleb128 0x2
 2055 013b 91       		.byte	0x91
 2056 013c 64       		.sleb128 -28
 2057 013d 0C       		.uleb128 0xc
 2058 013e F9030000 		.4byte	.LASF20
 2059 0142 01       		.byte	0x1
 2060 0143 2101     		.2byte	0x121
 2061 0145 6B000000 		.4byte	0x6b
 2062 0149 02       		.uleb128 0x2
 2063 014a 91       		.byte	0x91
 2064 014b 6F       		.sleb128 -17
 2065 014c 00       		.byte	0
 2066 014d 0A       		.uleb128 0xa
 2067 014e 7F030000 		.4byte	.LASF22
 2068 0152 01       		.byte	0x1
 2069 0153 4001     		.2byte	0x140
 2070 0155 00000000 		.4byte	.LFB5
 2071 0159 48000000 		.4byte	.LFE5-.LFB5
 2072 015d 01       		.uleb128 0x1
 2073 015e 9C       		.byte	0x9c
 2074 015f 82010000 		.4byte	0x182
 2075 0163 0B       		.uleb128 0xb
 2076 0164 55000000 		.4byte	.LASF24
 2077 0168 01       		.byte	0x1
 2078 0169 4001     		.2byte	0x140
 2079 016b 76000000 		.4byte	0x76
 2080 016f 02       		.uleb128 0x2
 2081 0170 91       		.byte	0x91
 2082 0171 64       		.sleb128 -28
 2083 0172 0C       		.uleb128 0xc
 2084 0173 F9030000 		.4byte	.LASF20
 2085 0177 01       		.byte	0x1
 2086 0178 4201     		.2byte	0x142
 2087 017a 6B000000 		.4byte	0x6b
 2088 017e 02       		.uleb128 0x2
 2089 017f 91       		.byte	0x91
 2090 0180 6F       		.sleb128 -17
 2091 0181 00       		.byte	0
 2092 0182 0A       		.uleb128 0xa
 2093 0183 ED010000 		.4byte	.LASF25
 2094 0187 01       		.byte	0x1
 2095 0188 6501     		.2byte	0x165
 2096 018a 00000000 		.4byte	.LFB6
 2097 018e 48000000 		.4byte	.LFE6-.LFB6
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 62


 2098 0192 01       		.uleb128 0x1
 2099 0193 9C       		.byte	0x9c
 2100 0194 B7010000 		.4byte	0x1b7
 2101 0198 0B       		.uleb128 0xb
 2102 0199 A4020000 		.4byte	.LASF26
 2103 019d 01       		.byte	0x1
 2104 019e 6501     		.2byte	0x165
 2105 01a0 76000000 		.4byte	0x76
 2106 01a4 02       		.uleb128 0x2
 2107 01a5 91       		.byte	0x91
 2108 01a6 64       		.sleb128 -28
 2109 01a7 0C       		.uleb128 0xc
 2110 01a8 F9030000 		.4byte	.LASF20
 2111 01ac 01       		.byte	0x1
 2112 01ad 6701     		.2byte	0x167
 2113 01af 6B000000 		.4byte	0x6b
 2114 01b3 02       		.uleb128 0x2
 2115 01b4 91       		.byte	0x91
 2116 01b5 6F       		.sleb128 -17
 2117 01b6 00       		.byte	0
 2118 01b7 0A       		.uleb128 0xa
 2119 01b8 7D020000 		.4byte	.LASF27
 2120 01bc 01       		.byte	0x1
 2121 01bd 8501     		.2byte	0x185
 2122 01bf 00000000 		.4byte	.LFB7
 2123 01c3 4C000000 		.4byte	.LFE7-.LFB7
 2124 01c7 01       		.uleb128 0x1
 2125 01c8 9C       		.byte	0x9c
 2126 01c9 EC010000 		.4byte	0x1ec
 2127 01cd 0B       		.uleb128 0xb
 2128 01ce 1B040000 		.4byte	.LASF28
 2129 01d2 01       		.byte	0x1
 2130 01d3 8501     		.2byte	0x185
 2131 01d5 76000000 		.4byte	0x76
 2132 01d9 02       		.uleb128 0x2
 2133 01da 91       		.byte	0x91
 2134 01db 64       		.sleb128 -28
 2135 01dc 0C       		.uleb128 0xc
 2136 01dd F9030000 		.4byte	.LASF20
 2137 01e1 01       		.byte	0x1
 2138 01e2 8701     		.2byte	0x187
 2139 01e4 6B000000 		.4byte	0x6b
 2140 01e8 02       		.uleb128 0x2
 2141 01e9 91       		.byte	0x91
 2142 01ea 6F       		.sleb128 -17
 2143 01eb 00       		.byte	0
 2144 01ec 0D       		.uleb128 0xd
 2145 01ed F8020000 		.4byte	.LASF29
 2146 01f1 01       		.byte	0x1
 2147 01f2 BB01     		.2byte	0x1bb
 2148 01f4 00000000 		.4byte	.LFB8
 2149 01f8 1C000000 		.4byte	.LFE8-.LFB8
 2150 01fc 01       		.uleb128 0x1
 2151 01fd 9C       		.byte	0x9c
 2152 01fe 12020000 		.4byte	0x212
 2153 0202 0B       		.uleb128 0xb
 2154 0203 D1010000 		.4byte	.LASF30
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 63


 2155 0207 01       		.byte	0x1
 2156 0208 BB01     		.2byte	0x1bb
 2157 020a 76000000 		.4byte	0x76
 2158 020e 02       		.uleb128 0x2
 2159 020f 91       		.byte	0x91
 2160 0210 74       		.sleb128 -12
 2161 0211 00       		.byte	0
 2162 0212 0A       		.uleb128 0xa
 2163 0213 11000000 		.4byte	.LASF31
 2164 0217 01       		.byte	0x1
 2165 0218 DF01     		.2byte	0x1df
 2166 021a 00000000 		.4byte	.LFB9
 2167 021e 48000000 		.4byte	.LFE9-.LFB9
 2168 0222 01       		.uleb128 0x1
 2169 0223 9C       		.byte	0x9c
 2170 0224 47020000 		.4byte	0x247
 2171 0228 0B       		.uleb128 0xb
 2172 0229 66020000 		.4byte	.LASF32
 2173 022d 01       		.byte	0x1
 2174 022e DF01     		.2byte	0x1df
 2175 0230 76000000 		.4byte	0x76
 2176 0234 02       		.uleb128 0x2
 2177 0235 91       		.byte	0x91
 2178 0236 64       		.sleb128 -28
 2179 0237 0C       		.uleb128 0xc
 2180 0238 F9030000 		.4byte	.LASF20
 2181 023c 01       		.byte	0x1
 2182 023d E101     		.2byte	0x1e1
 2183 023f 6B000000 		.4byte	0x6b
 2184 0243 02       		.uleb128 0x2
 2185 0244 91       		.byte	0x91
 2186 0245 6F       		.sleb128 -17
 2187 0246 00       		.byte	0
 2188 0247 0A       		.uleb128 0xa
 2189 0248 35040000 		.4byte	.LASF33
 2190 024c 01       		.byte	0x1
 2191 024d 0102     		.2byte	0x201
 2192 024f 00000000 		.4byte	.LFB10
 2193 0253 48000000 		.4byte	.LFE10-.LFB10
 2194 0257 01       		.uleb128 0x1
 2195 0258 9C       		.byte	0x9c
 2196 0259 7C020000 		.4byte	0x27c
 2197 025d 0B       		.uleb128 0xb
 2198 025e E7020000 		.4byte	.LASF34
 2199 0262 01       		.byte	0x1
 2200 0263 0102     		.2byte	0x201
 2201 0265 76000000 		.4byte	0x76
 2202 0269 02       		.uleb128 0x2
 2203 026a 91       		.byte	0x91
 2204 026b 64       		.sleb128 -28
 2205 026c 0C       		.uleb128 0xc
 2206 026d F9030000 		.4byte	.LASF20
 2207 0271 01       		.byte	0x1
 2208 0272 0302     		.2byte	0x203
 2209 0274 6B000000 		.4byte	0x6b
 2210 0278 02       		.uleb128 0x2
 2211 0279 91       		.byte	0x91
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 64


 2212 027a 6F       		.sleb128 -17
 2213 027b 00       		.byte	0
 2214 027c 0A       		.uleb128 0xa
 2215 027d A4010000 		.4byte	.LASF35
 2216 0281 01       		.byte	0x1
 2217 0282 2202     		.2byte	0x222
 2218 0284 00000000 		.4byte	.LFB11
 2219 0288 4C000000 		.4byte	.LFE11-.LFB11
 2220 028c 01       		.uleb128 0x1
 2221 028d 9C       		.byte	0x9c
 2222 028e B1020000 		.4byte	0x2b1
 2223 0292 0B       		.uleb128 0xb
 2224 0293 7E010000 		.4byte	.LASF36
 2225 0297 01       		.byte	0x1
 2226 0298 2202     		.2byte	0x222
 2227 029a 76000000 		.4byte	0x76
 2228 029e 02       		.uleb128 0x2
 2229 029f 91       		.byte	0x91
 2230 02a0 64       		.sleb128 -28
 2231 02a1 0C       		.uleb128 0xc
 2232 02a2 F9030000 		.4byte	.LASF20
 2233 02a6 01       		.byte	0x1
 2234 02a7 2402     		.2byte	0x224
 2235 02a9 6B000000 		.4byte	0x6b
 2236 02ad 02       		.uleb128 0x2
 2237 02ae 91       		.byte	0x91
 2238 02af 6F       		.sleb128 -17
 2239 02b0 00       		.byte	0
 2240 02b1 0A       		.uleb128 0xa
 2241 02b2 35010000 		.4byte	.LASF37
 2242 02b6 01       		.byte	0x1
 2243 02b7 4302     		.2byte	0x243
 2244 02b9 00000000 		.4byte	.LFB12
 2245 02bd 48000000 		.4byte	.LFE12-.LFB12
 2246 02c1 01       		.uleb128 0x1
 2247 02c2 9C       		.byte	0x9c
 2248 02c3 E6020000 		.4byte	0x2e6
 2249 02c7 0B       		.uleb128 0xb
 2250 02c8 6A010000 		.4byte	.LASF38
 2251 02cc 01       		.byte	0x1
 2252 02cd 4302     		.2byte	0x243
 2253 02cf 76000000 		.4byte	0x76
 2254 02d3 02       		.uleb128 0x2
 2255 02d4 91       		.byte	0x91
 2256 02d5 64       		.sleb128 -28
 2257 02d6 0C       		.uleb128 0xc
 2258 02d7 F9030000 		.4byte	.LASF20
 2259 02db 01       		.byte	0x1
 2260 02dc 4502     		.2byte	0x245
 2261 02de 6B000000 		.4byte	0x6b
 2262 02e2 02       		.uleb128 0x2
 2263 02e3 91       		.byte	0x91
 2264 02e4 6F       		.sleb128 -17
 2265 02e5 00       		.byte	0
 2266 02e6 0D       		.uleb128 0xd
 2267 02e7 5C000000 		.4byte	.LASF39
 2268 02eb 01       		.byte	0x1
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 65


 2269 02ec 6102     		.2byte	0x261
 2270 02ee 00000000 		.4byte	.LFB13
 2271 02f2 1C000000 		.4byte	.LFE13-.LFB13
 2272 02f6 01       		.uleb128 0x1
 2273 02f7 9C       		.byte	0x9c
 2274 02f8 0C030000 		.4byte	0x30c
 2275 02fc 0B       		.uleb128 0xb
 2276 02fd 00000000 		.4byte	.LASF40
 2277 0301 01       		.byte	0x1
 2278 0302 6102     		.2byte	0x261
 2279 0304 76000000 		.4byte	0x76
 2280 0308 02       		.uleb128 0x2
 2281 0309 91       		.byte	0x91
 2282 030a 74       		.sleb128 -12
 2283 030b 00       		.byte	0
 2284 030c 0E       		.uleb128 0xe
 2285 030d 8A000000 		.4byte	.LASF45
 2286 0311 01       		.byte	0x1
 2287 0312 7502     		.2byte	0x275
 2288 0314 76000000 		.4byte	0x76
 2289 0318 00000000 		.4byte	.LFB14
 2290 031c 18000000 		.4byte	.LFE14-.LFB14
 2291 0320 01       		.uleb128 0x1
 2292 0321 9C       		.byte	0x9c
 2293 0322 0A       		.uleb128 0xa
 2294 0323 EF040000 		.4byte	.LASF41
 2295 0327 01       		.byte	0x1
 2296 0328 9202     		.2byte	0x292
 2297 032a 00000000 		.4byte	.LFB15
 2298 032e 48000000 		.4byte	.LFE15-.LFB15
 2299 0332 01       		.uleb128 0x1
 2300 0333 9C       		.byte	0x9c
 2301 0334 57030000 		.4byte	0x357
 2302 0338 0B       		.uleb128 0xb
 2303 0339 BA030000 		.4byte	.LASF42
 2304 033d 01       		.byte	0x1
 2305 033e 9202     		.2byte	0x292
 2306 0340 76000000 		.4byte	0x76
 2307 0344 02       		.uleb128 0x2
 2308 0345 91       		.byte	0x91
 2309 0346 64       		.sleb128 -28
 2310 0347 0C       		.uleb128 0xc
 2311 0348 F9030000 		.4byte	.LASF20
 2312 034c 01       		.byte	0x1
 2313 034d 9402     		.2byte	0x294
 2314 034f 6B000000 		.4byte	0x6b
 2315 0353 02       		.uleb128 0x2
 2316 0354 91       		.byte	0x91
 2317 0355 6F       		.sleb128 -17
 2318 0356 00       		.byte	0
 2319 0357 0D       		.uleb128 0xd
 2320 0358 2C020000 		.4byte	.LASF43
 2321 035c 01       		.byte	0x1
 2322 035d AF02     		.2byte	0x2af
 2323 035f 00000000 		.4byte	.LFB16
 2324 0363 1C000000 		.4byte	.LFE16-.LFB16
 2325 0367 01       		.uleb128 0x1
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 66


 2326 0368 9C       		.byte	0x9c
 2327 0369 7D030000 		.4byte	0x37d
 2328 036d 0B       		.uleb128 0xb
 2329 036e 24000000 		.4byte	.LASF44
 2330 0372 01       		.byte	0x1
 2331 0373 AF02     		.2byte	0x2af
 2332 0375 76000000 		.4byte	0x76
 2333 0379 02       		.uleb128 0x2
 2334 037a 91       		.byte	0x91
 2335 037b 74       		.sleb128 -12
 2336 037c 00       		.byte	0
 2337 037d 0E       		.uleb128 0xe
 2338 037e 4E020000 		.4byte	.LASF46
 2339 0382 01       		.byte	0x1
 2340 0383 C302     		.2byte	0x2c3
 2341 0385 76000000 		.4byte	0x76
 2342 0389 00000000 		.4byte	.LFB17
 2343 038d 18000000 		.4byte	.LFE17-.LFB17
 2344 0391 01       		.uleb128 0x1
 2345 0392 9C       		.byte	0x9c
 2346 0393 0A       		.uleb128 0xa
 2347 0394 19010000 		.4byte	.LASF47
 2348 0398 01       		.byte	0x1
 2349 0399 DD02     		.2byte	0x2dd
 2350 039b 00000000 		.4byte	.LFB18
 2351 039f 48000000 		.4byte	.LFE18-.LFB18
 2352 03a3 01       		.uleb128 0x1
 2353 03a4 9C       		.byte	0x9c
 2354 03a5 C8030000 		.4byte	0x3c8
 2355 03a9 0B       		.uleb128 0xb
 2356 03aa C6030000 		.4byte	.LASF48
 2357 03ae 01       		.byte	0x1
 2358 03af DD02     		.2byte	0x2dd
 2359 03b1 76000000 		.4byte	0x76
 2360 03b5 02       		.uleb128 0x2
 2361 03b6 91       		.byte	0x91
 2362 03b7 64       		.sleb128 -28
 2363 03b8 0C       		.uleb128 0xc
 2364 03b9 F9030000 		.4byte	.LASF20
 2365 03bd 01       		.byte	0x1
 2366 03be DF02     		.2byte	0x2df
 2367 03c0 6B000000 		.4byte	0x6b
 2368 03c4 02       		.uleb128 0x2
 2369 03c5 91       		.byte	0x91
 2370 03c6 6F       		.sleb128 -17
 2371 03c7 00       		.byte	0
 2372 03c8 0D       		.uleb128 0xd
 2373 03c9 6C030000 		.4byte	.LASF49
 2374 03cd 01       		.byte	0x1
 2375 03ce F802     		.2byte	0x2f8
 2376 03d0 00000000 		.4byte	.LFB19
 2377 03d4 1C000000 		.4byte	.LFE19-.LFB19
 2378 03d8 01       		.uleb128 0x1
 2379 03d9 9C       		.byte	0x9c
 2380 03da EE030000 		.4byte	0x3ee
 2381 03de 0B       		.uleb128 0xb
 2382 03df DC030000 		.4byte	.LASF50
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 67


 2383 03e3 01       		.byte	0x1
 2384 03e4 F802     		.2byte	0x2f8
 2385 03e6 76000000 		.4byte	0x76
 2386 03ea 02       		.uleb128 0x2
 2387 03eb 91       		.byte	0x91
 2388 03ec 74       		.sleb128 -12
 2389 03ed 00       		.byte	0
 2390 03ee 0E       		.uleb128 0xe
 2391 03ef 8C020000 		.4byte	.LASF51
 2392 03f3 01       		.byte	0x1
 2393 03f4 0C03     		.2byte	0x30c
 2394 03f6 76000000 		.4byte	0x76
 2395 03fa 00000000 		.4byte	.LFB20
 2396 03fe 18000000 		.4byte	.LFE20-.LFB20
 2397 0402 01       		.uleb128 0x1
 2398 0403 9C       		.byte	0x9c
 2399 0404 0A       		.uleb128 0xa
 2400 0405 BE020000 		.4byte	.LASF52
 2401 0409 01       		.byte	0x1
 2402 040a 2603     		.2byte	0x326
 2403 040c 00000000 		.4byte	.LFB21
 2404 0410 48000000 		.4byte	.LFE21-.LFB21
 2405 0414 01       		.uleb128 0x1
 2406 0415 9C       		.byte	0x9c
 2407 0416 39040000 		.4byte	0x439
 2408 041a 0B       		.uleb128 0xb
 2409 041b C6030000 		.4byte	.LASF48
 2410 041f 01       		.byte	0x1
 2411 0420 2603     		.2byte	0x326
 2412 0422 76000000 		.4byte	0x76
 2413 0426 02       		.uleb128 0x2
 2414 0427 91       		.byte	0x91
 2415 0428 64       		.sleb128 -28
 2416 0429 0C       		.uleb128 0xc
 2417 042a F9030000 		.4byte	.LASF20
 2418 042e 01       		.byte	0x1
 2419 042f 2803     		.2byte	0x328
 2420 0431 6B000000 		.4byte	0x6b
 2421 0435 02       		.uleb128 0x2
 2422 0436 91       		.byte	0x91
 2423 0437 6F       		.sleb128 -17
 2424 0438 00       		.byte	0
 2425 0439 0D       		.uleb128 0xd
 2426 043a 1B020000 		.4byte	.LASF53
 2427 043e 01       		.byte	0x1
 2428 043f 4303     		.2byte	0x343
 2429 0441 00000000 		.4byte	.LFB22
 2430 0445 1C000000 		.4byte	.LFE22-.LFB22
 2431 0449 01       		.uleb128 0x1
 2432 044a 9C       		.byte	0x9c
 2433 044b 5F040000 		.4byte	0x45f
 2434 044f 0B       		.uleb128 0xb
 2435 0450 75020000 		.4byte	.LASF54
 2436 0454 01       		.byte	0x1
 2437 0455 4303     		.2byte	0x343
 2438 0457 76000000 		.4byte	0x76
 2439 045b 02       		.uleb128 0x2
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 68


 2440 045c 91       		.byte	0x91
 2441 045d 74       		.sleb128 -12
 2442 045e 00       		.byte	0
 2443 045f 0E       		.uleb128 0xe
 2444 0460 02050000 		.4byte	.LASF55
 2445 0464 01       		.byte	0x1
 2446 0465 6E03     		.2byte	0x36e
 2447 0467 76000000 		.4byte	0x76
 2448 046b 00000000 		.4byte	.LFB23
 2449 046f 18000000 		.4byte	.LFE23-.LFB23
 2450 0473 01       		.uleb128 0x1
 2451 0474 9C       		.byte	0x9c
 2452 0475 0D       		.uleb128 0xd
 2453 0476 B4000000 		.4byte	.LASF56
 2454 047a 01       		.byte	0x1
 2455 047b 9C03     		.2byte	0x39c
 2456 047d 00000000 		.4byte	.LFB24
 2457 0481 1C000000 		.4byte	.LFE24-.LFB24
 2458 0485 01       		.uleb128 0x1
 2459 0486 9C       		.byte	0x9c
 2460 0487 9B040000 		.4byte	0x49b
 2461 048b 0B       		.uleb128 0xb
 2462 048c D1030000 		.4byte	.LASF57
 2463 0490 01       		.byte	0x1
 2464 0491 9C03     		.2byte	0x39c
 2465 0493 76000000 		.4byte	0x76
 2466 0497 02       		.uleb128 0x2
 2467 0498 91       		.byte	0x91
 2468 0499 74       		.sleb128 -12
 2469 049a 00       		.byte	0
 2470 049b 0E       		.uleb128 0xe
 2471 049c 06010000 		.4byte	.LASF58
 2472 04a0 01       		.byte	0x1
 2473 04a1 C503     		.2byte	0x3c5
 2474 04a3 76000000 		.4byte	0x76
 2475 04a7 00000000 		.4byte	.LFB25
 2476 04ab 18000000 		.4byte	.LFE25-.LFB25
 2477 04af 01       		.uleb128 0x1
 2478 04b0 9C       		.byte	0x9c
 2479 04b1 0E       		.uleb128 0xe
 2480 04b2 AE020000 		.4byte	.LASF59
 2481 04b6 01       		.byte	0x1
 2482 04b7 F303     		.2byte	0x3f3
 2483 04b9 76000000 		.4byte	0x76
 2484 04bd 00000000 		.4byte	.LFB26
 2485 04c1 18000000 		.4byte	.LFE26-.LFB26
 2486 04c5 01       		.uleb128 0x1
 2487 04c6 9C       		.byte	0x9c
 2488 04c7 0E       		.uleb128 0xe
 2489 04c8 E6030000 		.4byte	.LASF60
 2490 04cc 01       		.byte	0x1
 2491 04cd 0804     		.2byte	0x408
 2492 04cf 76000000 		.4byte	0x76
 2493 04d3 00000000 		.4byte	.LFB27
 2494 04d7 18000000 		.4byte	.LFE27-.LFB27
 2495 04db 01       		.uleb128 0x1
 2496 04dc 9C       		.byte	0x9c
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 69


 2497 04dd 0A       		.uleb128 0xa
 2498 04de 42000000 		.4byte	.LASF61
 2499 04e2 01       		.byte	0x1
 2500 04e3 2304     		.2byte	0x423
 2501 04e5 00000000 		.4byte	.LFB28
 2502 04e9 44000000 		.4byte	.LFE28-.LFB28
 2503 04ed 01       		.uleb128 0x1
 2504 04ee 9C       		.byte	0x9c
 2505 04ef 12050000 		.4byte	0x512
 2506 04f3 0B       		.uleb128 0xb
 2507 04f4 5E010000 		.4byte	.LASF62
 2508 04f8 01       		.byte	0x1
 2509 04f9 2304     		.2byte	0x423
 2510 04fb 76000000 		.4byte	0x76
 2511 04ff 02       		.uleb128 0x2
 2512 0500 91       		.byte	0x91
 2513 0501 64       		.sleb128 -28
 2514 0502 0C       		.uleb128 0xc
 2515 0503 F9030000 		.4byte	.LASF20
 2516 0507 01       		.byte	0x1
 2517 0508 2504     		.2byte	0x425
 2518 050a 6B000000 		.4byte	0x6b
 2519 050e 02       		.uleb128 0x2
 2520 050f 91       		.byte	0x91
 2521 0510 6F       		.sleb128 -17
 2522 0511 00       		.byte	0
 2523 0512 0A       		.uleb128 0xa
 2524 0513 A8030000 		.4byte	.LASF63
 2525 0517 01       		.byte	0x1
 2526 0518 4404     		.2byte	0x444
 2527 051a 00000000 		.4byte	.LFB29
 2528 051e 44000000 		.4byte	.LFE29-.LFB29
 2529 0522 01       		.uleb128 0x1
 2530 0523 9C       		.byte	0x9c
 2531 0524 47050000 		.4byte	0x547
 2532 0528 0B       		.uleb128 0xb
 2533 0529 5E010000 		.4byte	.LASF62
 2534 052d 01       		.byte	0x1
 2535 052e 4404     		.2byte	0x444
 2536 0530 76000000 		.4byte	0x76
 2537 0534 02       		.uleb128 0x2
 2538 0535 91       		.byte	0x91
 2539 0536 64       		.sleb128 -28
 2540 0537 0C       		.uleb128 0xc
 2541 0538 F9030000 		.4byte	.LASF20
 2542 053c 01       		.byte	0x1
 2543 053d 4604     		.2byte	0x446
 2544 053f 6B000000 		.4byte	0x6b
 2545 0543 02       		.uleb128 0x2
 2546 0544 91       		.byte	0x91
 2547 0545 6F       		.sleb128 -17
 2548 0546 00       		.byte	0
 2549 0547 0A       		.uleb128 0xa
 2550 0548 4D010000 		.4byte	.LASF64
 2551 054c 01       		.byte	0x1
 2552 054d 6504     		.2byte	0x465
 2553 054f 00000000 		.4byte	.LFB30
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 70


 2554 0553 48000000 		.4byte	.LFE30-.LFB30
 2555 0557 01       		.uleb128 0x1
 2556 0558 9C       		.byte	0x9c
 2557 0559 7C050000 		.4byte	0x57c
 2558 055d 0B       		.uleb128 0xb
 2559 055e 5E010000 		.4byte	.LASF62
 2560 0562 01       		.byte	0x1
 2561 0563 6504     		.2byte	0x465
 2562 0565 76000000 		.4byte	0x76
 2563 0569 02       		.uleb128 0x2
 2564 056a 91       		.byte	0x91
 2565 056b 64       		.sleb128 -28
 2566 056c 0C       		.uleb128 0xc
 2567 056d F9030000 		.4byte	.LASF20
 2568 0571 01       		.byte	0x1
 2569 0572 6704     		.2byte	0x467
 2570 0574 6B000000 		.4byte	0x6b
 2571 0578 02       		.uleb128 0x2
 2572 0579 91       		.byte	0x91
 2573 057a 6F       		.sleb128 -17
 2574 057b 00       		.byte	0
 2575 057c 0A       		.uleb128 0xa
 2576 057d 87010000 		.4byte	.LASF65
 2577 0581 01       		.byte	0x1
 2578 0582 8504     		.2byte	0x485
 2579 0584 00000000 		.4byte	.LFB31
 2580 0588 44000000 		.4byte	.LFE31-.LFB31
 2581 058c 01       		.uleb128 0x1
 2582 058d 9C       		.byte	0x9c
 2583 058e B1050000 		.4byte	0x5b1
 2584 0592 0B       		.uleb128 0xb
 2585 0593 5E010000 		.4byte	.LASF62
 2586 0597 01       		.byte	0x1
 2587 0598 8504     		.2byte	0x485
 2588 059a 76000000 		.4byte	0x76
 2589 059e 02       		.uleb128 0x2
 2590 059f 91       		.byte	0x91
 2591 05a0 64       		.sleb128 -28
 2592 05a1 0C       		.uleb128 0xc
 2593 05a2 F9030000 		.4byte	.LASF20
 2594 05a6 01       		.byte	0x1
 2595 05a7 8704     		.2byte	0x487
 2596 05a9 6B000000 		.4byte	0x6b
 2597 05ad 02       		.uleb128 0x2
 2598 05ae 91       		.byte	0x91
 2599 05af 6F       		.sleb128 -17
 2600 05b0 00       		.byte	0
 2601 05b1 0A       		.uleb128 0xa
 2602 05b2 0A040000 		.4byte	.LASF66
 2603 05b6 01       		.byte	0x1
 2604 05b7 A604     		.2byte	0x4a6
 2605 05b9 00000000 		.4byte	.LFB32
 2606 05bd 44000000 		.4byte	.LFE32-.LFB32
 2607 05c1 01       		.uleb128 0x1
 2608 05c2 9C       		.byte	0x9c
 2609 05c3 E6050000 		.4byte	0x5e6
 2610 05c7 0B       		.uleb128 0xb
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 71


 2611 05c8 5E010000 		.4byte	.LASF62
 2612 05cc 01       		.byte	0x1
 2613 05cd A604     		.2byte	0x4a6
 2614 05cf 76000000 		.4byte	0x76
 2615 05d3 02       		.uleb128 0x2
 2616 05d4 91       		.byte	0x91
 2617 05d5 64       		.sleb128 -28
 2618 05d6 0C       		.uleb128 0xc
 2619 05d7 F9030000 		.4byte	.LASF20
 2620 05db 01       		.byte	0x1
 2621 05dc A804     		.2byte	0x4a8
 2622 05de 6B000000 		.4byte	0x6b
 2623 05e2 02       		.uleb128 0x2
 2624 05e3 91       		.byte	0x91
 2625 05e4 6F       		.sleb128 -17
 2626 05e5 00       		.byte	0
 2627 05e6 0A       		.uleb128 0xa
 2628 05e7 08020000 		.4byte	.LASF67
 2629 05eb 01       		.byte	0x1
 2630 05ec CE04     		.2byte	0x4ce
 2631 05ee 00000000 		.4byte	.LFB33
 2632 05f2 38000000 		.4byte	.LFE33-.LFB33
 2633 05f6 01       		.uleb128 0x1
 2634 05f7 9C       		.byte	0x9c
 2635 05f8 2A060000 		.4byte	0x62a
 2636 05fc 0B       		.uleb128 0xb
 2637 05fd 6A010000 		.4byte	.LASF38
 2638 0601 01       		.byte	0x1
 2639 0602 CE04     		.2byte	0x4ce
 2640 0604 76000000 		.4byte	0x76
 2641 0608 02       		.uleb128 0x2
 2642 0609 91       		.byte	0x91
 2643 060a 64       		.sleb128 -28
 2644 060b 0B       		.uleb128 0xb
 2645 060c B7010000 		.4byte	.LASF68
 2646 0610 01       		.byte	0x1
 2647 0611 CE04     		.2byte	0x4ce
 2648 0613 76000000 		.4byte	0x76
 2649 0617 02       		.uleb128 0x2
 2650 0618 91       		.byte	0x91
 2651 0619 60       		.sleb128 -32
 2652 061a 0C       		.uleb128 0xc
 2653 061b F9030000 		.4byte	.LASF20
 2654 061f 01       		.byte	0x1
 2655 0620 D004     		.2byte	0x4d0
 2656 0622 6B000000 		.4byte	0x6b
 2657 0626 02       		.uleb128 0x2
 2658 0627 91       		.byte	0x91
 2659 0628 6F       		.sleb128 -17
 2660 0629 00       		.byte	0
 2661 062a 0E       		.uleb128 0xe
 2662 062b 6F010000 		.4byte	.LASF69
 2663 062f 01       		.byte	0x1
 2664 0630 EB04     		.2byte	0x4eb
 2665 0632 76000000 		.4byte	0x76
 2666 0636 00000000 		.4byte	.LFB34
 2667 063a 20000000 		.4byte	.LFE34-.LFB34
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 72


 2668 063e 01       		.uleb128 0x1
 2669 063f 9C       		.byte	0x9c
 2670 0640 0D       		.uleb128 0xd
 2671 0641 C8000000 		.4byte	.LASF70
 2672 0645 01       		.byte	0x1
 2673 0646 0405     		.2byte	0x504
 2674 0648 00000000 		.4byte	.LFB35
 2675 064c 18000000 		.4byte	.LFE35-.LFB35
 2676 0650 01       		.uleb128 0x1
 2677 0651 9C       		.byte	0x9c
 2678 0652 66060000 		.4byte	0x666
 2679 0656 0B       		.uleb128 0xb
 2680 0657 2E030000 		.4byte	.LASF71
 2681 065b 01       		.byte	0x1
 2682 065c 0405     		.2byte	0x504
 2683 065e 76000000 		.4byte	0x76
 2684 0662 02       		.uleb128 0x2
 2685 0663 91       		.byte	0x91
 2686 0664 74       		.sleb128 -12
 2687 0665 00       		.byte	0
 2688 0666 0E       		.uleb128 0xe
 2689 0667 11030000 		.4byte	.LASF72
 2690 066b 01       		.byte	0x1
 2691 066c 1B05     		.2byte	0x51b
 2692 066e 76000000 		.4byte	0x76
 2693 0672 00000000 		.4byte	.LFB36
 2694 0676 14000000 		.4byte	.LFE36-.LFB36
 2695 067a 01       		.uleb128 0x1
 2696 067b 9C       		.byte	0x9c
 2697 067c 0E       		.uleb128 0xe
 2698 067d D8040000 		.4byte	.LASF73
 2699 0681 01       		.byte	0x1
 2700 0682 3205     		.2byte	0x532
 2701 0684 76000000 		.4byte	0x76
 2702 0688 00000000 		.4byte	.LFB37
 2703 068c 14000000 		.4byte	.LFE37-.LFB37
 2704 0690 01       		.uleb128 0x1
 2705 0691 9C       		.byte	0x9c
 2706 0692 0D       		.uleb128 0xd
 2707 0693 DD000000 		.4byte	.LASF74
 2708 0697 01       		.byte	0x1
 2709 0698 4905     		.2byte	0x549
 2710 069a 00000000 		.4byte	.LFB38
 2711 069e 18000000 		.4byte	.LFE38-.LFB38
 2712 06a2 01       		.uleb128 0x1
 2713 06a3 9C       		.byte	0x9c
 2714 06a4 B8060000 		.4byte	0x6b8
 2715 06a8 0B       		.uleb128 0xb
 2716 06a9 2E030000 		.4byte	.LASF71
 2717 06ad 01       		.byte	0x1
 2718 06ae 4905     		.2byte	0x549
 2719 06b0 76000000 		.4byte	0x76
 2720 06b4 02       		.uleb128 0x2
 2721 06b5 91       		.byte	0x91
 2722 06b6 74       		.sleb128 -12
 2723 06b7 00       		.byte	0
 2724 06b8 0D       		.uleb128 0xd
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 73


 2725 06b9 97030000 		.4byte	.LASF75
 2726 06bd 01       		.byte	0x1
 2727 06be 6005     		.2byte	0x560
 2728 06c0 00000000 		.4byte	.LFB39
 2729 06c4 18000000 		.4byte	.LFE39-.LFB39
 2730 06c8 01       		.uleb128 0x1
 2731 06c9 9C       		.byte	0x9c
 2732 06ca DE060000 		.4byte	0x6de
 2733 06ce 0B       		.uleb128 0xb
 2734 06cf 2E030000 		.4byte	.LASF71
 2735 06d3 01       		.byte	0x1
 2736 06d4 6005     		.2byte	0x560
 2737 06d6 76000000 		.4byte	0x76
 2738 06da 02       		.uleb128 0x2
 2739 06db 91       		.byte	0x91
 2740 06dc 74       		.sleb128 -12
 2741 06dd 00       		.byte	0
 2742 06de 0F       		.uleb128 0xf
 2743 06df 42020000 		.4byte	.LASF79
 2744 06e3 01       		.byte	0x1
 2745 06e4 15       		.byte	0x15
 2746 06e5 6B000000 		.4byte	0x6b
 2747 06e9 05       		.uleb128 0x5
 2748 06ea 03       		.byte	0x3
 2749 06eb 00000000 		.4byte	PWM_initVar
 2750 06ef 00       		.byte	0
 2751              		.section	.debug_abbrev,"",%progbits
 2752              	.Ldebug_abbrev0:
 2753 0000 01       		.uleb128 0x1
 2754 0001 11       		.uleb128 0x11
 2755 0002 01       		.byte	0x1
 2756 0003 25       		.uleb128 0x25
 2757 0004 0E       		.uleb128 0xe
 2758 0005 13       		.uleb128 0x13
 2759 0006 0B       		.uleb128 0xb
 2760 0007 03       		.uleb128 0x3
 2761 0008 0E       		.uleb128 0xe
 2762 0009 1B       		.uleb128 0x1b
 2763 000a 0E       		.uleb128 0xe
 2764 000b 55       		.uleb128 0x55
 2765 000c 17       		.uleb128 0x17
 2766 000d 11       		.uleb128 0x11
 2767 000e 01       		.uleb128 0x1
 2768 000f 10       		.uleb128 0x10
 2769 0010 17       		.uleb128 0x17
 2770 0011 00       		.byte	0
 2771 0012 00       		.byte	0
 2772 0013 02       		.uleb128 0x2
 2773 0014 24       		.uleb128 0x24
 2774 0015 00       		.byte	0
 2775 0016 0B       		.uleb128 0xb
 2776 0017 0B       		.uleb128 0xb
 2777 0018 3E       		.uleb128 0x3e
 2778 0019 0B       		.uleb128 0xb
 2779 001a 03       		.uleb128 0x3
 2780 001b 0E       		.uleb128 0xe
 2781 001c 00       		.byte	0
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 74


 2782 001d 00       		.byte	0
 2783 001e 03       		.uleb128 0x3
 2784 001f 24       		.uleb128 0x24
 2785 0020 00       		.byte	0
 2786 0021 0B       		.uleb128 0xb
 2787 0022 0B       		.uleb128 0xb
 2788 0023 3E       		.uleb128 0x3e
 2789 0024 0B       		.uleb128 0xb
 2790 0025 03       		.uleb128 0x3
 2791 0026 08       		.uleb128 0x8
 2792 0027 00       		.byte	0
 2793 0028 00       		.byte	0
 2794 0029 04       		.uleb128 0x4
 2795 002a 16       		.uleb128 0x16
 2796 002b 00       		.byte	0
 2797 002c 03       		.uleb128 0x3
 2798 002d 0E       		.uleb128 0xe
 2799 002e 3A       		.uleb128 0x3a
 2800 002f 0B       		.uleb128 0xb
 2801 0030 3B       		.uleb128 0x3b
 2802 0031 0B       		.uleb128 0xb
 2803 0032 49       		.uleb128 0x49
 2804 0033 13       		.uleb128 0x13
 2805 0034 00       		.byte	0
 2806 0035 00       		.byte	0
 2807 0036 05       		.uleb128 0x5
 2808 0037 16       		.uleb128 0x16
 2809 0038 00       		.byte	0
 2810 0039 03       		.uleb128 0x3
 2811 003a 0E       		.uleb128 0xe
 2812 003b 3A       		.uleb128 0x3a
 2813 003c 0B       		.uleb128 0xb
 2814 003d 3B       		.uleb128 0x3b
 2815 003e 05       		.uleb128 0x5
 2816 003f 49       		.uleb128 0x49
 2817 0040 13       		.uleb128 0x13
 2818 0041 00       		.byte	0
 2819 0042 00       		.byte	0
 2820 0043 06       		.uleb128 0x6
 2821 0044 35       		.uleb128 0x35
 2822 0045 00       		.byte	0
 2823 0046 49       		.uleb128 0x49
 2824 0047 13       		.uleb128 0x13
 2825 0048 00       		.byte	0
 2826 0049 00       		.byte	0
 2827 004a 07       		.uleb128 0x7
 2828 004b 2E       		.uleb128 0x2e
 2829 004c 00       		.byte	0
 2830 004d 3F       		.uleb128 0x3f
 2831 004e 19       		.uleb128 0x19
 2832 004f 03       		.uleb128 0x3
 2833 0050 0E       		.uleb128 0xe
 2834 0051 3A       		.uleb128 0x3a
 2835 0052 0B       		.uleb128 0xb
 2836 0053 3B       		.uleb128 0x3b
 2837 0054 0B       		.uleb128 0xb
 2838 0055 27       		.uleb128 0x27
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 75


 2839 0056 19       		.uleb128 0x19
 2840 0057 11       		.uleb128 0x11
 2841 0058 01       		.uleb128 0x1
 2842 0059 12       		.uleb128 0x12
 2843 005a 06       		.uleb128 0x6
 2844 005b 40       		.uleb128 0x40
 2845 005c 18       		.uleb128 0x18
 2846 005d 9642     		.uleb128 0x2116
 2847 005f 19       		.uleb128 0x19
 2848 0060 00       		.byte	0
 2849 0061 00       		.byte	0
 2850 0062 08       		.uleb128 0x8
 2851 0063 2E       		.uleb128 0x2e
 2852 0064 01       		.byte	0x1
 2853 0065 3F       		.uleb128 0x3f
 2854 0066 19       		.uleb128 0x19
 2855 0067 03       		.uleb128 0x3
 2856 0068 0E       		.uleb128 0xe
 2857 0069 3A       		.uleb128 0x3a
 2858 006a 0B       		.uleb128 0xb
 2859 006b 3B       		.uleb128 0x3b
 2860 006c 0B       		.uleb128 0xb
 2861 006d 27       		.uleb128 0x27
 2862 006e 19       		.uleb128 0x19
 2863 006f 11       		.uleb128 0x11
 2864 0070 01       		.uleb128 0x1
 2865 0071 12       		.uleb128 0x12
 2866 0072 06       		.uleb128 0x6
 2867 0073 40       		.uleb128 0x40
 2868 0074 18       		.uleb128 0x18
 2869 0075 9642     		.uleb128 0x2116
 2870 0077 19       		.uleb128 0x19
 2871 0078 01       		.uleb128 0x1
 2872 0079 13       		.uleb128 0x13
 2873 007a 00       		.byte	0
 2874 007b 00       		.byte	0
 2875 007c 09       		.uleb128 0x9
 2876 007d 34       		.uleb128 0x34
 2877 007e 00       		.byte	0
 2878 007f 03       		.uleb128 0x3
 2879 0080 0E       		.uleb128 0xe
 2880 0081 3A       		.uleb128 0x3a
 2881 0082 0B       		.uleb128 0xb
 2882 0083 3B       		.uleb128 0x3b
 2883 0084 0B       		.uleb128 0xb
 2884 0085 49       		.uleb128 0x49
 2885 0086 13       		.uleb128 0x13
 2886 0087 02       		.uleb128 0x2
 2887 0088 18       		.uleb128 0x18
 2888 0089 00       		.byte	0
 2889 008a 00       		.byte	0
 2890 008b 0A       		.uleb128 0xa
 2891 008c 2E       		.uleb128 0x2e
 2892 008d 01       		.byte	0x1
 2893 008e 3F       		.uleb128 0x3f
 2894 008f 19       		.uleb128 0x19
 2895 0090 03       		.uleb128 0x3
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 76


 2896 0091 0E       		.uleb128 0xe
 2897 0092 3A       		.uleb128 0x3a
 2898 0093 0B       		.uleb128 0xb
 2899 0094 3B       		.uleb128 0x3b
 2900 0095 05       		.uleb128 0x5
 2901 0096 27       		.uleb128 0x27
 2902 0097 19       		.uleb128 0x19
 2903 0098 11       		.uleb128 0x11
 2904 0099 01       		.uleb128 0x1
 2905 009a 12       		.uleb128 0x12
 2906 009b 06       		.uleb128 0x6
 2907 009c 40       		.uleb128 0x40
 2908 009d 18       		.uleb128 0x18
 2909 009e 9642     		.uleb128 0x2116
 2910 00a0 19       		.uleb128 0x19
 2911 00a1 01       		.uleb128 0x1
 2912 00a2 13       		.uleb128 0x13
 2913 00a3 00       		.byte	0
 2914 00a4 00       		.byte	0
 2915 00a5 0B       		.uleb128 0xb
 2916 00a6 05       		.uleb128 0x5
 2917 00a7 00       		.byte	0
 2918 00a8 03       		.uleb128 0x3
 2919 00a9 0E       		.uleb128 0xe
 2920 00aa 3A       		.uleb128 0x3a
 2921 00ab 0B       		.uleb128 0xb
 2922 00ac 3B       		.uleb128 0x3b
 2923 00ad 05       		.uleb128 0x5
 2924 00ae 49       		.uleb128 0x49
 2925 00af 13       		.uleb128 0x13
 2926 00b0 02       		.uleb128 0x2
 2927 00b1 18       		.uleb128 0x18
 2928 00b2 00       		.byte	0
 2929 00b3 00       		.byte	0
 2930 00b4 0C       		.uleb128 0xc
 2931 00b5 34       		.uleb128 0x34
 2932 00b6 00       		.byte	0
 2933 00b7 03       		.uleb128 0x3
 2934 00b8 0E       		.uleb128 0xe
 2935 00b9 3A       		.uleb128 0x3a
 2936 00ba 0B       		.uleb128 0xb
 2937 00bb 3B       		.uleb128 0x3b
 2938 00bc 05       		.uleb128 0x5
 2939 00bd 49       		.uleb128 0x49
 2940 00be 13       		.uleb128 0x13
 2941 00bf 02       		.uleb128 0x2
 2942 00c0 18       		.uleb128 0x18
 2943 00c1 00       		.byte	0
 2944 00c2 00       		.byte	0
 2945 00c3 0D       		.uleb128 0xd
 2946 00c4 2E       		.uleb128 0x2e
 2947 00c5 01       		.byte	0x1
 2948 00c6 3F       		.uleb128 0x3f
 2949 00c7 19       		.uleb128 0x19
 2950 00c8 03       		.uleb128 0x3
 2951 00c9 0E       		.uleb128 0xe
 2952 00ca 3A       		.uleb128 0x3a
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 77


 2953 00cb 0B       		.uleb128 0xb
 2954 00cc 3B       		.uleb128 0x3b
 2955 00cd 05       		.uleb128 0x5
 2956 00ce 27       		.uleb128 0x27
 2957 00cf 19       		.uleb128 0x19
 2958 00d0 11       		.uleb128 0x11
 2959 00d1 01       		.uleb128 0x1
 2960 00d2 12       		.uleb128 0x12
 2961 00d3 06       		.uleb128 0x6
 2962 00d4 40       		.uleb128 0x40
 2963 00d5 18       		.uleb128 0x18
 2964 00d6 9742     		.uleb128 0x2117
 2965 00d8 19       		.uleb128 0x19
 2966 00d9 01       		.uleb128 0x1
 2967 00da 13       		.uleb128 0x13
 2968 00db 00       		.byte	0
 2969 00dc 00       		.byte	0
 2970 00dd 0E       		.uleb128 0xe
 2971 00de 2E       		.uleb128 0x2e
 2972 00df 00       		.byte	0
 2973 00e0 3F       		.uleb128 0x3f
 2974 00e1 19       		.uleb128 0x19
 2975 00e2 03       		.uleb128 0x3
 2976 00e3 0E       		.uleb128 0xe
 2977 00e4 3A       		.uleb128 0x3a
 2978 00e5 0B       		.uleb128 0xb
 2979 00e6 3B       		.uleb128 0x3b
 2980 00e7 05       		.uleb128 0x5
 2981 00e8 27       		.uleb128 0x27
 2982 00e9 19       		.uleb128 0x19
 2983 00ea 49       		.uleb128 0x49
 2984 00eb 13       		.uleb128 0x13
 2985 00ec 11       		.uleb128 0x11
 2986 00ed 01       		.uleb128 0x1
 2987 00ee 12       		.uleb128 0x12
 2988 00ef 06       		.uleb128 0x6
 2989 00f0 40       		.uleb128 0x40
 2990 00f1 18       		.uleb128 0x18
 2991 00f2 9742     		.uleb128 0x2117
 2992 00f4 19       		.uleb128 0x19
 2993 00f5 00       		.byte	0
 2994 00f6 00       		.byte	0
 2995 00f7 0F       		.uleb128 0xf
 2996 00f8 34       		.uleb128 0x34
 2997 00f9 00       		.byte	0
 2998 00fa 03       		.uleb128 0x3
 2999 00fb 0E       		.uleb128 0xe
 3000 00fc 3A       		.uleb128 0x3a
 3001 00fd 0B       		.uleb128 0xb
 3002 00fe 3B       		.uleb128 0x3b
 3003 00ff 0B       		.uleb128 0xb
 3004 0100 49       		.uleb128 0x49
 3005 0101 13       		.uleb128 0x13
 3006 0102 3F       		.uleb128 0x3f
 3007 0103 19       		.uleb128 0x19
 3008 0104 02       		.uleb128 0x2
 3009 0105 18       		.uleb128 0x18
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 78


 3010 0106 00       		.byte	0
 3011 0107 00       		.byte	0
 3012 0108 00       		.byte	0
 3013              		.section	.debug_aranges,"",%progbits
 3014 0000 54010000 		.4byte	0x154
 3015 0004 0200     		.2byte	0x2
 3016 0006 00000000 		.4byte	.Ldebug_info0
 3017 000a 04       		.byte	0x4
 3018 000b 00       		.byte	0
 3019 000c 0000     		.2byte	0
 3020 000e 0000     		.2byte	0
 3021 0010 00000000 		.4byte	.LFB0
 3022 0014 60000000 		.4byte	.LFE0-.LFB0
 3023 0018 00000000 		.4byte	.LFB1
 3024 001c 30000000 		.4byte	.LFE1-.LFB1
 3025 0020 00000000 		.4byte	.LFB2
 3026 0024 24000000 		.4byte	.LFE2-.LFB2
 3027 0028 00000000 		.4byte	.LFB3
 3028 002c 30000000 		.4byte	.LFE3-.LFB3
 3029 0030 00000000 		.4byte	.LFB4
 3030 0034 48000000 		.4byte	.LFE4-.LFB4
 3031 0038 00000000 		.4byte	.LFB5
 3032 003c 48000000 		.4byte	.LFE5-.LFB5
 3033 0040 00000000 		.4byte	.LFB6
 3034 0044 48000000 		.4byte	.LFE6-.LFB6
 3035 0048 00000000 		.4byte	.LFB7
 3036 004c 4C000000 		.4byte	.LFE7-.LFB7
 3037 0050 00000000 		.4byte	.LFB8
 3038 0054 1C000000 		.4byte	.LFE8-.LFB8
 3039 0058 00000000 		.4byte	.LFB9
 3040 005c 48000000 		.4byte	.LFE9-.LFB9
 3041 0060 00000000 		.4byte	.LFB10
 3042 0064 48000000 		.4byte	.LFE10-.LFB10
 3043 0068 00000000 		.4byte	.LFB11
 3044 006c 4C000000 		.4byte	.LFE11-.LFB11
 3045 0070 00000000 		.4byte	.LFB12
 3046 0074 48000000 		.4byte	.LFE12-.LFB12
 3047 0078 00000000 		.4byte	.LFB13
 3048 007c 1C000000 		.4byte	.LFE13-.LFB13
 3049 0080 00000000 		.4byte	.LFB14
 3050 0084 18000000 		.4byte	.LFE14-.LFB14
 3051 0088 00000000 		.4byte	.LFB15
 3052 008c 48000000 		.4byte	.LFE15-.LFB15
 3053 0090 00000000 		.4byte	.LFB16
 3054 0094 1C000000 		.4byte	.LFE16-.LFB16
 3055 0098 00000000 		.4byte	.LFB17
 3056 009c 18000000 		.4byte	.LFE17-.LFB17
 3057 00a0 00000000 		.4byte	.LFB18
 3058 00a4 48000000 		.4byte	.LFE18-.LFB18
 3059 00a8 00000000 		.4byte	.LFB19
 3060 00ac 1C000000 		.4byte	.LFE19-.LFB19
 3061 00b0 00000000 		.4byte	.LFB20
 3062 00b4 18000000 		.4byte	.LFE20-.LFB20
 3063 00b8 00000000 		.4byte	.LFB21
 3064 00bc 48000000 		.4byte	.LFE21-.LFB21
 3065 00c0 00000000 		.4byte	.LFB22
 3066 00c4 1C000000 		.4byte	.LFE22-.LFB22
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 79


 3067 00c8 00000000 		.4byte	.LFB23
 3068 00cc 18000000 		.4byte	.LFE23-.LFB23
 3069 00d0 00000000 		.4byte	.LFB24
 3070 00d4 1C000000 		.4byte	.LFE24-.LFB24
 3071 00d8 00000000 		.4byte	.LFB25
 3072 00dc 18000000 		.4byte	.LFE25-.LFB25
 3073 00e0 00000000 		.4byte	.LFB26
 3074 00e4 18000000 		.4byte	.LFE26-.LFB26
 3075 00e8 00000000 		.4byte	.LFB27
 3076 00ec 18000000 		.4byte	.LFE27-.LFB27
 3077 00f0 00000000 		.4byte	.LFB28
 3078 00f4 44000000 		.4byte	.LFE28-.LFB28
 3079 00f8 00000000 		.4byte	.LFB29
 3080 00fc 44000000 		.4byte	.LFE29-.LFB29
 3081 0100 00000000 		.4byte	.LFB30
 3082 0104 48000000 		.4byte	.LFE30-.LFB30
 3083 0108 00000000 		.4byte	.LFB31
 3084 010c 44000000 		.4byte	.LFE31-.LFB31
 3085 0110 00000000 		.4byte	.LFB32
 3086 0114 44000000 		.4byte	.LFE32-.LFB32
 3087 0118 00000000 		.4byte	.LFB33
 3088 011c 38000000 		.4byte	.LFE33-.LFB33
 3089 0120 00000000 		.4byte	.LFB34
 3090 0124 20000000 		.4byte	.LFE34-.LFB34
 3091 0128 00000000 		.4byte	.LFB35
 3092 012c 18000000 		.4byte	.LFE35-.LFB35
 3093 0130 00000000 		.4byte	.LFB36
 3094 0134 14000000 		.4byte	.LFE36-.LFB36
 3095 0138 00000000 		.4byte	.LFB37
 3096 013c 14000000 		.4byte	.LFE37-.LFB37
 3097 0140 00000000 		.4byte	.LFB38
 3098 0144 18000000 		.4byte	.LFE38-.LFB38
 3099 0148 00000000 		.4byte	.LFB39
 3100 014c 18000000 		.4byte	.LFE39-.LFB39
 3101 0150 00000000 		.4byte	0
 3102 0154 00000000 		.4byte	0
 3103              		.section	.debug_ranges,"",%progbits
 3104              	.Ldebug_ranges0:
 3105 0000 00000000 		.4byte	.LFB0
 3106 0004 60000000 		.4byte	.LFE0
 3107 0008 00000000 		.4byte	.LFB1
 3108 000c 30000000 		.4byte	.LFE1
 3109 0010 00000000 		.4byte	.LFB2
 3110 0014 24000000 		.4byte	.LFE2
 3111 0018 00000000 		.4byte	.LFB3
 3112 001c 30000000 		.4byte	.LFE3
 3113 0020 00000000 		.4byte	.LFB4
 3114 0024 48000000 		.4byte	.LFE4
 3115 0028 00000000 		.4byte	.LFB5
 3116 002c 48000000 		.4byte	.LFE5
 3117 0030 00000000 		.4byte	.LFB6
 3118 0034 48000000 		.4byte	.LFE6
 3119 0038 00000000 		.4byte	.LFB7
 3120 003c 4C000000 		.4byte	.LFE7
 3121 0040 00000000 		.4byte	.LFB8
 3122 0044 1C000000 		.4byte	.LFE8
 3123 0048 00000000 		.4byte	.LFB9
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 80


 3124 004c 48000000 		.4byte	.LFE9
 3125 0050 00000000 		.4byte	.LFB10
 3126 0054 48000000 		.4byte	.LFE10
 3127 0058 00000000 		.4byte	.LFB11
 3128 005c 4C000000 		.4byte	.LFE11
 3129 0060 00000000 		.4byte	.LFB12
 3130 0064 48000000 		.4byte	.LFE12
 3131 0068 00000000 		.4byte	.LFB13
 3132 006c 1C000000 		.4byte	.LFE13
 3133 0070 00000000 		.4byte	.LFB14
 3134 0074 18000000 		.4byte	.LFE14
 3135 0078 00000000 		.4byte	.LFB15
 3136 007c 48000000 		.4byte	.LFE15
 3137 0080 00000000 		.4byte	.LFB16
 3138 0084 1C000000 		.4byte	.LFE16
 3139 0088 00000000 		.4byte	.LFB17
 3140 008c 18000000 		.4byte	.LFE17
 3141 0090 00000000 		.4byte	.LFB18
 3142 0094 48000000 		.4byte	.LFE18
 3143 0098 00000000 		.4byte	.LFB19
 3144 009c 1C000000 		.4byte	.LFE19
 3145 00a0 00000000 		.4byte	.LFB20
 3146 00a4 18000000 		.4byte	.LFE20
 3147 00a8 00000000 		.4byte	.LFB21
 3148 00ac 48000000 		.4byte	.LFE21
 3149 00b0 00000000 		.4byte	.LFB22
 3150 00b4 1C000000 		.4byte	.LFE22
 3151 00b8 00000000 		.4byte	.LFB23
 3152 00bc 18000000 		.4byte	.LFE23
 3153 00c0 00000000 		.4byte	.LFB24
 3154 00c4 1C000000 		.4byte	.LFE24
 3155 00c8 00000000 		.4byte	.LFB25
 3156 00cc 18000000 		.4byte	.LFE25
 3157 00d0 00000000 		.4byte	.LFB26
 3158 00d4 18000000 		.4byte	.LFE26
 3159 00d8 00000000 		.4byte	.LFB27
 3160 00dc 18000000 		.4byte	.LFE27
 3161 00e0 00000000 		.4byte	.LFB28
 3162 00e4 44000000 		.4byte	.LFE28
 3163 00e8 00000000 		.4byte	.LFB29
 3164 00ec 44000000 		.4byte	.LFE29
 3165 00f0 00000000 		.4byte	.LFB30
 3166 00f4 48000000 		.4byte	.LFE30
 3167 00f8 00000000 		.4byte	.LFB31
 3168 00fc 44000000 		.4byte	.LFE31
 3169 0100 00000000 		.4byte	.LFB32
 3170 0104 44000000 		.4byte	.LFE32
 3171 0108 00000000 		.4byte	.LFB33
 3172 010c 38000000 		.4byte	.LFE33
 3173 0110 00000000 		.4byte	.LFB34
 3174 0114 20000000 		.4byte	.LFE34
 3175 0118 00000000 		.4byte	.LFB35
 3176 011c 18000000 		.4byte	.LFE35
 3177 0120 00000000 		.4byte	.LFB36
 3178 0124 14000000 		.4byte	.LFE36
 3179 0128 00000000 		.4byte	.LFB37
 3180 012c 14000000 		.4byte	.LFE37
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 81


 3181 0130 00000000 		.4byte	.LFB38
 3182 0134 18000000 		.4byte	.LFE38
 3183 0138 00000000 		.4byte	.LFB39
 3184 013c 18000000 		.4byte	.LFE39
 3185 0140 00000000 		.4byte	0
 3186 0144 00000000 		.4byte	0
 3187              		.section	.debug_line,"",%progbits
 3188              	.Ldebug_line0:
 3189 0000 6C030000 		.section	.debug_str,"MS",%progbits,1
 3189      02004000 
 3189      00000201 
 3189      FB0E0D00 
 3189      01010101 
 3190              	.LASF40:
 3191 0000 636F756E 		.ascii	"count\000"
 3191      7400
 3192              	.LASF18:
 3193 0006 50574D5F 		.ascii	"PWM_Enable\000"
 3193      456E6162 
 3193      6C6500
 3194              	.LASF31:
 3195 0011 50574D5F 		.ascii	"PWM_SetPWMSyncKill\000"
 3195      53657450 
 3195      574D5379 
 3195      6E634B69 
 3195      6C6C00
 3196              	.LASF44:
 3197 0024 70657269 		.ascii	"period\000"
 3197      6F6400
 3198              	.LASF7:
 3199 002b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3199      206C6F6E 
 3199      6720756E 
 3199      7369676E 
 3199      65642069 
 3200              	.LASF61:
 3201 0042 50574D5F 		.ascii	"PWM_SetCaptureMode\000"
 3201      53657443 
 3201      61707475 
 3201      72654D6F 
 3201      646500
 3202              	.LASF24:
 3203 0055 71644D6F 		.ascii	"qdMode\000"
 3203      646500
 3204              	.LASF39:
 3205 005c 50574D5F 		.ascii	"PWM_WriteCounter\000"
 3205      57726974 
 3205      65436F75 
 3205      6E746572 
 3205      00
 3206              	.LASF77:
 3207 006d 47656E65 		.ascii	"Generated_Source\\PSoC4\\PWM.c\000"
 3207      72617465 
 3207      645F536F 
 3207      75726365 
 3207      5C50536F 
 3208              	.LASF45:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 82


 3209 008a 50574D5F 		.ascii	"PWM_ReadCounter\000"
 3209      52656164 
 3209      436F756E 
 3209      74657200 
 3210              	.LASF6:
 3211 009a 6C6F6E67 		.ascii	"long long int\000"
 3211      206C6F6E 
 3211      6720696E 
 3211      7400
 3212              	.LASF0:
 3213 00a8 7369676E 		.ascii	"signed char\000"
 3213      65642063 
 3213      68617200 
 3214              	.LASF56:
 3215 00b4 50574D5F 		.ascii	"PWM_WriteCompareBuf\000"
 3215      57726974 
 3215      65436F6D 
 3215      70617265 
 3215      42756600 
 3216              	.LASF70:
 3217 00c8 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 3217      53657449 
 3217      6E746572 
 3217      72757074 
 3217      4D6F6465 
 3218              	.LASF74:
 3219 00dd 50574D5F 		.ascii	"PWM_ClearInterrupt\000"
 3219      436C6561 
 3219      72496E74 
 3219      65727275 
 3219      707400
 3220              	.LASF4:
 3221 00f0 6C6F6E67 		.ascii	"long int\000"
 3221      20696E74 
 3221      00
 3222              	.LASF9:
 3223 00f9 75696E74 		.ascii	"uint8\000"
 3223      3800
 3224              	.LASF12:
 3225 00ff 646F7562 		.ascii	"double\000"
 3225      6C6500
 3226              	.LASF58:
 3227 0106 50574D5F 		.ascii	"PWM_ReadCompareBuf\000"
 3227      52656164 
 3227      436F6D70 
 3227      61726542 
 3227      756600
 3228              	.LASF47:
 3229 0119 50574D5F 		.ascii	"PWM_SetCompareSwap\000"
 3229      53657443 
 3229      6F6D7061 
 3229      72655377 
 3229      617000
 3230              	.LASF19:
 3231 012c 50574D5F 		.ascii	"PWM_Stop\000"
 3231      53746F70 
 3231      00
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 83


 3232              	.LASF37:
 3233 0135 50574D5F 		.ascii	"PWM_SetPWMInvert\000"
 3233      53657450 
 3233      574D496E 
 3233      76657274 
 3233      00
 3234              	.LASF10:
 3235 0146 75696E74 		.ascii	"uint32\000"
 3235      333200
 3236              	.LASF64:
 3237 014d 50574D5F 		.ascii	"PWM_SetStartMode\000"
 3237      53657453 
 3237      74617274 
 3237      4D6F6465 
 3237      00
 3238              	.LASF62:
 3239 015e 74726967 		.ascii	"triggerMode\000"
 3239      6765724D 
 3239      6F646500 
 3240              	.LASF38:
 3241 016a 6D61736B 		.ascii	"mask\000"
 3241      00
 3242              	.LASF69:
 3243 016f 50574D5F 		.ascii	"PWM_ReadStatus\000"
 3243      52656164 
 3243      53746174 
 3243      757300
 3244              	.LASF36:
 3245 017e 64656164 		.ascii	"deadTime\000"
 3245      54696D65 
 3245      00
 3246              	.LASF65:
 3247 0187 50574D5F 		.ascii	"PWM_SetStopMode\000"
 3247      53657453 
 3247      746F704D 
 3247      6F646500 
 3248              	.LASF8:
 3249 0197 756E7369 		.ascii	"unsigned int\000"
 3249      676E6564 
 3249      20696E74 
 3249      00
 3250              	.LASF35:
 3251 01a4 50574D5F 		.ascii	"PWM_SetPWMDeadTime\000"
 3251      53657450 
 3251      574D4465 
 3251      61645469 
 3251      6D6500
 3252              	.LASF68:
 3253 01b7 636F6D6D 		.ascii	"command\000"
 3253      616E6400 
 3254              	.LASF5:
 3255 01bf 6C6F6E67 		.ascii	"long unsigned int\000"
 3255      20756E73 
 3255      69676E65 
 3255      6420696E 
 3255      7400
 3256              	.LASF30:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 84


 3257 01d1 6D6F6465 		.ascii	"modeMask\000"
 3257      4D61736B 
 3257      00
 3258              	.LASF3:
 3259 01da 73686F72 		.ascii	"short unsigned int\000"
 3259      7420756E 
 3259      7369676E 
 3259      65642069 
 3259      6E7400
 3260              	.LASF25:
 3261 01ed 50574D5F 		.ascii	"PWM_SetPrescaler\000"
 3261      53657450 
 3261      72657363 
 3261      616C6572 
 3261      00
 3262              	.LASF17:
 3263 01fe 50574D5F 		.ascii	"PWM_Start\000"
 3263      53746172 
 3263      7400
 3264              	.LASF67:
 3265 0208 50574D5F 		.ascii	"PWM_TriggerCommand\000"
 3265      54726967 
 3265      67657243 
 3265      6F6D6D61 
 3265      6E6400
 3266              	.LASF53:
 3267 021b 50574D5F 		.ascii	"PWM_WriteCompare\000"
 3267      57726974 
 3267      65436F6D 
 3267      70617265 
 3267      00
 3268              	.LASF43:
 3269 022c 50574D5F 		.ascii	"PWM_WritePeriod\000"
 3269      57726974 
 3269      65506572 
 3269      696F6400 
 3270              	.LASF14:
 3271 023c 72656733 		.ascii	"reg32\000"
 3271      3200
 3272              	.LASF79:
 3273 0242 50574D5F 		.ascii	"PWM_initVar\000"
 3273      696E6974 
 3273      56617200 
 3274              	.LASF46:
 3275 024e 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 3275      52656164 
 3275      50657269 
 3275      6F6400
 3276              	.LASF15:
 3277 025d 73697A65 		.ascii	"sizetype\000"
 3277      74797065 
 3277      00
 3278              	.LASF32:
 3279 0266 73796E63 		.ascii	"syncKillEnable\000"
 3279      4B696C6C 
 3279      456E6162 
 3279      6C6500
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 85


 3280              	.LASF54:
 3281 0275 636F6D70 		.ascii	"compare\000"
 3281      61726500 
 3282              	.LASF27:
 3283 027d 50574D5F 		.ascii	"PWM_SetOneShot\000"
 3283      5365744F 
 3283      6E655368 
 3283      6F7400
 3284              	.LASF51:
 3285 028c 50574D5F 		.ascii	"PWM_ReadPeriodBuf\000"
 3285      52656164 
 3285      50657269 
 3285      6F644275 
 3285      6600
 3286              	.LASF11:
 3287 029e 666C6F61 		.ascii	"float\000"
 3287      7400
 3288              	.LASF26:
 3289 02a4 70726573 		.ascii	"prescaler\000"
 3289      63616C65 
 3289      7200
 3290              	.LASF59:
 3291 02ae 50574D5F 		.ascii	"PWM_ReadCapture\000"
 3291      52656164 
 3291      43617074 
 3291      75726500 
 3292              	.LASF52:
 3293 02be 50574D5F 		.ascii	"PWM_SetPeriodSwap\000"
 3293      53657450 
 3293      6572696F 
 3293      64537761 
 3293      7000
 3294              	.LASF1:
 3295 02d0 756E7369 		.ascii	"unsigned char\000"
 3295      676E6564 
 3295      20636861 
 3295      7200
 3296              	.LASF16:
 3297 02de 50574D5F 		.ascii	"PWM_Init\000"
 3297      496E6974 
 3297      00
 3298              	.LASF34:
 3299 02e7 73746F70 		.ascii	"stopOnKillEnable\000"
 3299      4F6E4B69 
 3299      6C6C456E 
 3299      61626C65 
 3299      00
 3300              	.LASF29:
 3301 02f8 50574D5F 		.ascii	"PWM_SetPWMMode\000"
 3301      53657450 
 3301      574D4D6F 
 3301      646500
 3302              	.LASF2:
 3303 0307 73686F72 		.ascii	"short int\000"
 3303      7420696E 
 3303      7400
 3304              	.LASF72:
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 86


 3305 0311 50574D5F 		.ascii	"PWM_GetInterruptSourceMasked\000"
 3305      47657449 
 3305      6E746572 
 3305      72757074 
 3305      536F7572 
 3306              	.LASF71:
 3307 032e 696E7465 		.ascii	"interruptMask\000"
 3307      72727570 
 3307      744D6173 
 3307      6B00
 3308              	.LASF78:
 3309 033c 433A5C77 		.ascii	"C:\\work\\Blinking LED red\\Blinking LED red.cydsn\000"
 3309      6F726B5C 
 3309      426C696E 
 3309      6B696E67 
 3309      204C4544 
 3310              	.LASF49:
 3311 036c 50574D5F 		.ascii	"PWM_WritePeriodBuf\000"
 3311      57726974 
 3311      65506572 
 3311      696F6442 
 3311      756600
 3312              	.LASF22:
 3313 037f 50574D5F 		.ascii	"PWM_SetQDMode\000"
 3313      53657451 
 3313      444D6F64 
 3313      6500
 3314              	.LASF13:
 3315 038d 63686172 		.ascii	"char\000"
 3315      00
 3316              	.LASF23:
 3317 0392 6D6F6465 		.ascii	"mode\000"
 3317      00
 3318              	.LASF75:
 3319 0397 50574D5F 		.ascii	"PWM_SetInterrupt\000"
 3319      53657449 
 3319      6E746572 
 3319      72757074 
 3319      00
 3320              	.LASF63:
 3321 03a8 50574D5F 		.ascii	"PWM_SetReloadMode\000"
 3321      53657452 
 3321      656C6F61 
 3321      644D6F64 
 3321      6500
 3322              	.LASF42:
 3323 03ba 636F756E 		.ascii	"counterMode\000"
 3323      7465724D 
 3323      6F646500 
 3324              	.LASF48:
 3325 03c6 73776170 		.ascii	"swapEnable\000"
 3325      456E6162 
 3325      6C6500
 3326              	.LASF57:
 3327 03d1 636F6D70 		.ascii	"compareBuf\000"
 3327      61726542 
 3327      756600
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 87


 3328              	.LASF50:
 3329 03dc 70657269 		.ascii	"periodBuf\000"
 3329      6F644275 
 3329      6600
 3330              	.LASF60:
 3331 03e6 50574D5F 		.ascii	"PWM_ReadCaptureBuf\000"
 3331      52656164 
 3331      43617074 
 3331      75726542 
 3331      756600
 3332              	.LASF20:
 3333 03f9 656E6162 		.ascii	"enableInterrupts\000"
 3333      6C65496E 
 3333      74657272 
 3333      75707473 
 3333      00
 3334              	.LASF66:
 3335 040a 50574D5F 		.ascii	"PWM_SetCountMode\000"
 3335      53657443 
 3335      6F756E74 
 3335      4D6F6465 
 3335      00
 3336              	.LASF28:
 3337 041b 6F6E6553 		.ascii	"oneShotEnable\000"
 3337      686F7445 
 3337      6E61626C 
 3337      6500
 3338              	.LASF21:
 3339 0429 50574D5F 		.ascii	"PWM_SetMode\000"
 3339      5365744D 
 3339      6F646500 
 3340              	.LASF33:
 3341 0435 50574D5F 		.ascii	"PWM_SetPWMStopOnKill\000"
 3341      53657450 
 3341      574D5374 
 3341      6F704F6E 
 3341      4B696C6C 
 3342              	.LASF76:
 3343 044a 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3343      4320342E 
 3343      392E3320 
 3343      32303135 
 3343      30333033 
 3344 047d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 3344      20726576 
 3344      6973696F 
 3344      6E203232 
 3344      31323230 
 3345 04b0 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3345      66756E63 
 3345      74696F6E 
 3345      2D736563 
 3345      74696F6E 
 3346              	.LASF73:
 3347 04d8 50574D5F 		.ascii	"PWM_GetInterruptSource\000"
 3347      47657449 
 3347      6E746572 
ARM GAS  C:\Users\MM1005~1\AppData\Local\Temp\ccqjNQc1.s 			page 88


 3347      72757074 
 3347      536F7572 
 3348              	.LASF41:
 3349 04ef 50574D5F 		.ascii	"PWM_SetCounterMode\000"
 3349      53657443 
 3349      6F756E74 
 3349      65724D6F 
 3349      646500
 3350              	.LASF55:
 3351 0502 50574D5F 		.ascii	"PWM_ReadCompare\000"
 3351      52656164 
 3351      436F6D70 
 3351      61726500 
 3352              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
